// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `ZXINGroupAgentServant.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ZXINGroupAgentServant_h__
#define __ZXINGroupAgentServant_h__

#ifdef _WINDOWS
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif


namespace IceProxy
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant;
		void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::ZXIN::ZXINGroupAgentServant>&);
		::IceProxy::Ice::Object* upCast(::IceProxy::ZXIN::ZXINGroupAgentServant*);

	}

}

namespace ZXIN
{

	class ZXINGroupAgentServant;
	bool operator==(const ZXINGroupAgentServant&, const ZXINGroupAgentServant&);
	bool operator<(const ZXINGroupAgentServant&, const ZXINGroupAgentServant&);
	::Ice::Object* upCast(::ZXIN::ZXINGroupAgentServant*);
	typedef ::IceInternal::Handle< ::ZXIN::ZXINGroupAgentServant> ZXINGroupAgentServantPtr;
	typedef ::IceInternal::ProxyHandle< ::IceProxy::ZXIN::ZXINGroupAgentServant> ZXINGroupAgentServantPrx;
	void __patch(ZXINGroupAgentServantPtr&, const ::Ice::ObjectPtr&);

}

namespace ZXIN
{

	typedef ::std::vector< ::Ice::Byte> ByteSeq;

	enum GrpAgentCmd
	{
		GRPCREATEREQ = 1,
		GRPREMOVEREQ = 2,
		GRPCREATERESP = 101,
		GRPREMOVERESP = 102
	};

	struct GrpAgentPack
	{
		GrpAgentPack() :
	retCode(0),
		retMsg("OK"),
		grpId(ICE_INT64(0))
	{
	}

	GrpAgentPack(::Ice::Int __ice_retCode, const ::std::string& __ice_retMsg, ::ZXIN::GrpAgentCmd __ice_cmd, ::Ice::Long __ice_grpId, const ::ZXIN::ByteSeq& __ice_reserve) :
	retCode(__ice_retCode),
		retMsg(__ice_retMsg),
		cmd(__ice_cmd),
		grpId(__ice_grpId),
		reserve(__ice_reserve)
	{
	}


	::Ice::Int retCode;
	::std::string retMsg;
	::ZXIN::GrpAgentCmd cmd;
	::Ice::Long grpId;
	::ZXIN::ByteSeq reserve;
	};

}

namespace Ice
{
	template<>
	struct StreamableTraits< ::ZXIN::GrpAgentCmd>
	{
		static const StreamHelperCategory helper = StreamHelperCategoryEnum;
		static const int minValue = 1;
		static const int maxValue = 102;
		static const int minWireSize = 1;
		static const bool fixedLength = false;
	};

	template<>
	struct StreamableTraits< ::ZXIN::GrpAgentPack>
	{
		static const StreamHelperCategory helper = StreamHelperCategoryStruct;
		static const int minWireSize = 15;
		static const bool fixedLength = false;
	};

	template<class S>
	struct StreamWriter< ::ZXIN::GrpAgentPack, S>
	{
		static void write(S* __os, const ::ZXIN::GrpAgentPack& v)
		{
			__os->write(v.retCode);
			__os->write(v.retMsg);
			__os->write(v.cmd);
			__os->write(v.grpId);
			__os->write(v.reserve);
		}
	};

	template<class S>
	struct StreamReader< ::ZXIN::GrpAgentPack, S>
	{
		static void read(S* __is, ::ZXIN::GrpAgentPack& v)
		{
			__is->read(v.retCode);
			__is->read(v.retMsg);
			__is->read(v.cmd);
			__is->read(v.grpId);
			__is->read(v.reserve);
		}
	};

}

namespace ZXIN
{

	class AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner : virtual public ::Ice::AMDCallback
	{
	public:

		virtual void ice_response(::Ice::Int, const ::ZXIN::GrpAgentPack&) = 0;
	};

	typedef ::IceUtil::Handle< ::ZXIN::AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner> AMD_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr;

}

namespace IceAsync
{

	namespace ZXIN
	{

		class AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner : public ::ZXIN::AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner, public ::IceInternal::IncomingAsync
		{
		public:

			AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner(::IceInternal::Incoming&);

			virtual void ice_response(::Ice::Int, const ::ZXIN::GrpAgentPack&);
		};

	}

}

namespace ZXIN
{

	class Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner_Base : virtual public ::IceInternal::CallbackBase { };
	typedef ::IceUtil::Handle< Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner_Base> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr;

}

namespace IceProxy
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant : virtual public ::IceProxy::Ice::Object
		{
		public:

			::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, ::ZXIN::GrpAgentPack& resps)
			{
				return DoZxinGroupAgentInner(req, resps, 0);
			}
			::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, ::ZXIN::GrpAgentPack& resps, const ::Ice::Context& __ctx)
			{
				return DoZxinGroupAgentInner(req, resps, &__ctx);
			}
#ifdef ICE_CPP11
			::Ice::AsyncResultPtr
				begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::IceInternal::Function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
			{
				return __begin_DoZxinGroupAgentInner(req, 0, response, exception, sent);
			}
			::Ice::AsyncResultPtr
				begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
			{
				return begin_DoZxinGroupAgentInner(req, 0, ::Ice::newCallback(completed, sent), 0);
			}
			::Ice::AsyncResultPtr
				begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
			{
				return __begin_DoZxinGroupAgentInner(req, &ctx, response, exception, sent);
			}
			::Ice::AsyncResultPtr
				begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
			{
				return begin_DoZxinGroupAgentInner(req, &ctx, ::Ice::newCallback(completed, sent));
			}

		private:

			::Ice::AsyncResultPtr __begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context* ctx, const ::IceInternal::Function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
			{
				class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
				{
				public:

					Cpp11CB(const ::std::function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
					  ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
						  _response(responseFunc)
					  {
						  CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
					  }

					  virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
					  {
						  ::ZXIN::ZXINGroupAgentServantPrx __proxy = ::ZXIN::ZXINGroupAgentServantPrx::uncheckedCast(__result->getProxy());
						  ::ZXIN::GrpAgentPack resps;
						  ::Ice::Int __ret;
						  try
						  {
							  __ret = __proxy->end_DoZxinGroupAgentInner(resps, __result);
						  }
						  catch(::Ice::Exception& ex)
						  {
							  Cpp11FnCallbackNC::__exception(__result, ex);
							  return;
						  }
						  if(_response != nullptr)
						  {
							  _response(__ret, resps);
						  }
					  }

				private:

					::std::function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)> _response;
				};
				return begin_DoZxinGroupAgentInner(req, ctx, new Cpp11CB(response, exception, sent));
			}

		public:
#endif

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req)
			{
				return begin_DoZxinGroupAgentInner(req, 0, ::IceInternal::__dummyCallback, 0);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& __ctx)
			{
				return begin_DoZxinGroupAgentInner(req, &__ctx, ::IceInternal::__dummyCallback, 0);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
			{
				return begin_DoZxinGroupAgentInner(req, 0, __del, __cookie);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
			{
				return begin_DoZxinGroupAgentInner(req, &__ctx, __del, __cookie);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::ZXIN::Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
			{
				return begin_DoZxinGroupAgentInner(req, 0, __del, __cookie);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& __ctx, const ::ZXIN::Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
			{
				return begin_DoZxinGroupAgentInner(req, &__ctx, __del, __cookie);
			}

			::Ice::Int end_DoZxinGroupAgentInner(::ZXIN::GrpAgentPack& resps, const ::Ice::AsyncResultPtr&);

		private:

			::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, ::ZXIN::GrpAgentPack&, const ::Ice::Context*);
			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

		public:

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_context(const ::Ice::Context& __context) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_context(__context).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_adapterId(const ::std::string& __id) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_locatorCacheTimeout(int __timeout) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_connectionCached(bool __cached) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_secure(bool __secure) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_preferSecure(bool __preferSecure) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_router(const ::Ice::RouterPrx& __router) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_router(__router).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_locator(const ::Ice::LocatorPrx& __locator) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_collocationOptimized(bool __co) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_twoway() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_twoway().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_oneway() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_oneway().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_batchOneway() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_batchOneway().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_datagram() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_datagram().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_batchDatagram() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_compress(bool __compress) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_timeout(int __timeout) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_connectionId(const ::std::string& __id) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
			}

			static const ::std::string& ice_staticId();

		private: 

			virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
			virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
			virtual ::IceProxy::Ice::Object* __newInstance() const;
		};

	}

}

namespace IceDelegate
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant : virtual public ::IceDelegate::Ice::Object
		{
		public:

			virtual ::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, ::ZXIN::GrpAgentPack&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
		};

	}

}

namespace IceDelegateM
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant : virtual public ::IceDelegate::ZXIN::ZXINGroupAgentServant,
			virtual public ::IceDelegateM::Ice::Object
		{
		public:

			virtual ::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, ::ZXIN::GrpAgentPack&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
		};

	}

}

namespace IceDelegateD
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant : virtual public ::IceDelegate::ZXIN::ZXINGroupAgentServant,
			virtual public ::IceDelegateD::Ice::Object
		{
		public:

			virtual ::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, ::ZXIN::GrpAgentPack&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
		};

	}

}

namespace ZXIN
{

	class ZXINGroupAgentServant : virtual public ::Ice::Object
	{
	public:

		typedef ZXINGroupAgentServantPrx ProxyType;
		typedef ZXINGroupAgentServantPtr PointerType;

		virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
		virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
		virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
		static const ::std::string& ice_staticId();

		virtual void DoZxinGroupAgentInner_async(const ::ZXIN::AMD_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr&, const ::ZXIN::GrpAgentPack&, const ::Ice::Current& = ::Ice::Current()) = 0;
		::Ice::DispatchStatus ___DoZxinGroupAgentInner(::IceInternal::Incoming&, const ::Ice::Current&);

		virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

	protected:
		virtual void __writeImpl(::IceInternal::BasicStream*) const;
		virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
		using ::Ice::Object::__writeImpl;
		using ::Ice::Object::__readImpl;
#endif
	};

	inline bool operator==(const ZXINGroupAgentServant& l, const ZXINGroupAgentServant& r)
	{
		return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
	}

	inline bool operator<(const ZXINGroupAgentServant& l, const ZXINGroupAgentServant& r)
	{
		return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
	}

}

namespace ZXIN
{

	template<class T>
	class CallbackNC_ZXINGroupAgentServant_DoZxinGroupAgentInner : public Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner_Base, public ::IceInternal::TwowayCallbackNC<T>
	{
	public:

		typedef IceUtil::Handle<T> TPtr;

		typedef void (T::*Exception)(const ::Ice::Exception&);
		typedef void (T::*Sent)(bool);
		typedef void (T::*Response)(::Ice::Int, const ::ZXIN::GrpAgentPack&);

		CallbackNC_ZXINGroupAgentServant_DoZxinGroupAgentInner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
			: ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
		{
		}

		virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
		{
			::ZXIN::ZXINGroupAgentServantPrx __proxy = ::ZXIN::ZXINGroupAgentServantPrx::uncheckedCast(__result->getProxy());
			::ZXIN::GrpAgentPack resps;
			::Ice::Int __ret;
			try
			{
				__ret = __proxy->end_DoZxinGroupAgentInner(resps, __result);
			}
			catch(::Ice::Exception& ex)
			{
				::IceInternal::CallbackNC<T>::__exception(__result, ex);
				return;
			}
			if(response)
			{
				(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, resps);
			}
		}

		Response response;
	};

	template<class T> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr
		newCallback_ZXINGroupAgentServant_DoZxinGroupAgentInner(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::ZXIN::GrpAgentPack&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
	{
		return new CallbackNC_ZXINGroupAgentServant_DoZxinGroupAgentInner<T>(instance, cb, excb, sentcb);
	}

	template<class T> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr
		newCallback_ZXINGroupAgentServant_DoZxinGroupAgentInner(T* instance, void (T::*cb)(::Ice::Int, const ::ZXIN::GrpAgentPack&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
	{
		return new CallbackNC_ZXINGroupAgentServant_DoZxinGroupAgentInner<T>(instance, cb, excb, sentcb);
	}

	template<class T, typename CT>
	class Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner : public Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner_Base, public ::IceInternal::TwowayCallback<T, CT>
	{
	public:

		typedef IceUtil::Handle<T> TPtr;

		typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
		typedef void (T::*Sent)(bool , const CT&);
		typedef void (T::*Response)(::Ice::Int, const ::ZXIN::GrpAgentPack&, const CT&);

		Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
			: ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
		{
		}

		virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
		{
			::ZXIN::ZXINGroupAgentServantPrx __proxy = ::ZXIN::ZXINGroupAgentServantPrx::uncheckedCast(__result->getProxy());
			::ZXIN::GrpAgentPack resps;
			::Ice::Int __ret;
			try
			{
				__ret = __proxy->end_DoZxinGroupAgentInner(resps, __result);
			}
			catch(::Ice::Exception& ex)
			{
				::IceInternal::Callback<T, CT>::__exception(__result, ex);
				return;
			}
			if(response)
			{
				(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, resps, CT::dynamicCast(__result->getCookie()));
			}
		}

		Response response;
	};

	template<class T, typename CT> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr
		newCallback_ZXINGroupAgentServant_DoZxinGroupAgentInner(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::ZXIN::GrpAgentPack&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
	{
		return new Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner<T, CT>(instance, cb, excb, sentcb);
	}

	template<class T, typename CT> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr
		newCallback_ZXINGroupAgentServant_DoZxinGroupAgentInner(T* instance, void (T::*cb)(::Ice::Int, const ::ZXIN::GrpAgentPack&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
	{
		return new Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner<T, CT>(instance, cb, excb, sentcb);
	}
	
}

#else

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant;
		void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::ZXIN::ZXINGroupAgentServant>&);
		::IceProxy::Ice::Object* upCast(::IceProxy::ZXIN::ZXINGroupAgentServant*);

	}

}

namespace ZXIN
{

	class ZXINGroupAgentServant;
	bool operator==(const ZXINGroupAgentServant&, const ZXINGroupAgentServant&);
	bool operator<(const ZXINGroupAgentServant&, const ZXINGroupAgentServant&);
	::Ice::Object* upCast(::ZXIN::ZXINGroupAgentServant*);
	typedef ::IceInternal::Handle< ::ZXIN::ZXINGroupAgentServant> ZXINGroupAgentServantPtr;
	typedef ::IceInternal::ProxyHandle< ::IceProxy::ZXIN::ZXINGroupAgentServant> ZXINGroupAgentServantPrx;
	void __patch(ZXINGroupAgentServantPtr&, const ::Ice::ObjectPtr&);

}

namespace ZXIN
{

	typedef ::std::vector< ::Ice::Byte> ByteSeq;

	enum GrpAgentCmd
	{
		GRPCREATEREQ = 1,
		GRPREMOVEREQ = 2,
		GRPCREATERESP = 101,
		GRPREMOVERESP = 102
	};

	struct GrpAgentPack
	{
		GrpAgentPack() :
	retCode(0),
		retMsg("OK"),
		grpId(ICE_INT64(0))
	{
	}

	GrpAgentPack(::Ice::Int __ice_retCode, const ::std::string& __ice_retMsg, ::ZXIN::GrpAgentCmd __ice_cmd, ::Ice::Long __ice_grpId, const ::ZXIN::ByteSeq& __ice_reserve) :
	retCode(__ice_retCode),
		retMsg(__ice_retMsg),
		cmd(__ice_cmd),
		grpId(__ice_grpId),
		reserve(__ice_reserve)
	{
	}


	::Ice::Int retCode;
	::std::string retMsg;
	::ZXIN::GrpAgentCmd cmd;
	::Ice::Long grpId;
	::ZXIN::ByteSeq reserve;
	};

}

namespace Ice
{
	template<>
	struct StreamableTraits< ::ZXIN::GrpAgentCmd>
	{
		static const StreamHelperCategory helper = StreamHelperCategoryEnum;
		static const int minValue = 1;
		static const int maxValue = 102;
		static const int minWireSize = 1;
		static const bool fixedLength = false;
	};

	template<>
	struct StreamableTraits< ::ZXIN::GrpAgentPack>
	{
		static const StreamHelperCategory helper = StreamHelperCategoryStruct;
		static const int minWireSize = 15;
		static const bool fixedLength = false;
	};

	template<class S>
	struct StreamWriter< ::ZXIN::GrpAgentPack, S>
	{
		static void write(S* __os, const ::ZXIN::GrpAgentPack& v)
		{
			__os->write(v.retCode);
			__os->write(v.retMsg);
			__os->write(v.cmd);
			__os->write(v.grpId);
			__os->write(v.reserve);
		}
	};

	template<class S>
	struct StreamReader< ::ZXIN::GrpAgentPack, S>
	{
		static void read(S* __is, ::ZXIN::GrpAgentPack& v)
		{
			__is->read(v.retCode);
			__is->read(v.retMsg);
			__is->read(v.cmd);
			__is->read(v.grpId);
			__is->read(v.reserve);
		}
	};

}

namespace ZXIN
{

	class AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner : virtual public ::Ice::AMDCallback
	{
	public:

		virtual void ice_response(::Ice::Int, const ::ZXIN::GrpAgentPack&) = 0;
	};

	typedef ::IceUtil::Handle< ::ZXIN::AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner> AMD_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr;

}

namespace IceAsync
{

	namespace ZXIN
	{

		class AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner : public ::ZXIN::AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner, public ::IceInternal::IncomingAsync
		{
		public:

			AMD_ZXINGroupAgentServant_DoZxinGroupAgentInner(::IceInternal::Incoming&);

			virtual void ice_response(::Ice::Int, const ::ZXIN::GrpAgentPack&);
		};

	}

}

namespace ZXIN
{

	class Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner_Base : virtual public ::IceInternal::CallbackBase { };
	typedef ::IceUtil::Handle< Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner_Base> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr;

}

namespace IceProxy
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant : virtual public ::IceProxy::Ice::Object
		{
		public:

			::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, ::ZXIN::GrpAgentPack& resps)
			{
				return DoZxinGroupAgentInner(req, resps, 0);
			}
			::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, ::ZXIN::GrpAgentPack& resps, const ::Ice::Context& __ctx)
			{
				return DoZxinGroupAgentInner(req, resps, &__ctx);
			}
#ifdef ICE_CPP11
			::Ice::AsyncResultPtr
				begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::IceInternal::Function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
			{
				return __begin_DoZxinGroupAgentInner(req, 0, __response, __exception, __sent);
			}
			::Ice::AsyncResultPtr
				begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
			{
				return begin_DoZxinGroupAgentInner(req, 0, ::Ice::newCallback(__completed, __sent), 0);
			}
			::Ice::AsyncResultPtr
				begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
			{
				return __begin_DoZxinGroupAgentInner(req, &__ctx, __response, __exception, __sent);
			}
			::Ice::AsyncResultPtr
				begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
			{
				return begin_DoZxinGroupAgentInner(req, &__ctx, ::Ice::newCallback(__completed, __sent));
			}

		private:

			::Ice::AsyncResultPtr __begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
			{
				class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
				{
				public:

					Cpp11CB(const ::std::function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
					  ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
						  _response(responseFunc)
					  {
						  CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
					  }

					  virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
					  {
						  ::ZXIN::ZXINGroupAgentServantPrx __proxy = ::ZXIN::ZXINGroupAgentServantPrx::uncheckedCast(__result->getProxy());
						  ::ZXIN::GrpAgentPack resps;
						  ::Ice::Int __ret;
						  try
						  {
							  __ret = __proxy->end_DoZxinGroupAgentInner(resps, __result);
						  }
						  catch(::Ice::Exception& ex)
						  {
							  Cpp11FnCallbackNC::__exception(__result, ex);
							  return;
						  }
						  if(_response != nullptr)
						  {
							  _response(__ret, resps);
						  }
					  }

				private:

					::std::function<void (::Ice::Int, const ::ZXIN::GrpAgentPack&)> _response;
				};
				return begin_DoZxinGroupAgentInner(req, __ctx, new Cpp11CB(__response, __exception, __sent));
			}

		public:
#endif

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req)
			{
				return begin_DoZxinGroupAgentInner(req, 0, ::IceInternal::__dummyCallback, 0);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& __ctx)
			{
				return begin_DoZxinGroupAgentInner(req, &__ctx, ::IceInternal::__dummyCallback, 0);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
			{
				return begin_DoZxinGroupAgentInner(req, 0, __del, __cookie);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
			{
				return begin_DoZxinGroupAgentInner(req, &__ctx, __del, __cookie);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::ZXIN::Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
			{
				return begin_DoZxinGroupAgentInner(req, 0, __del, __cookie);
			}

			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack& req, const ::Ice::Context& __ctx, const ::ZXIN::Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
			{
				return begin_DoZxinGroupAgentInner(req, &__ctx, __del, __cookie);
			}

			::Ice::Int end_DoZxinGroupAgentInner(::ZXIN::GrpAgentPack& resps, const ::Ice::AsyncResultPtr&);

		private:

			::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, ::ZXIN::GrpAgentPack&, const ::Ice::Context*);
			::Ice::AsyncResultPtr begin_DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);

		public:

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_context(const ::Ice::Context& __context) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_context(__context).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_adapterId(const ::std::string& __id) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_locatorCacheTimeout(int __timeout) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_connectionCached(bool __cached) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_secure(bool __secure) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_preferSecure(bool __preferSecure) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_router(const ::Ice::RouterPrx& __router) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_router(__router).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_locator(const ::Ice::LocatorPrx& __locator) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_collocationOptimized(bool __co) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_twoway() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_twoway().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_oneway() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_oneway().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_batchOneway() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_batchOneway().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_datagram() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_datagram().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_batchDatagram() const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_compress(bool __compress) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_timeout(int __timeout) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_connectionId(const ::std::string& __id) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
			}

			::IceInternal::ProxyHandle<ZXINGroupAgentServant> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
			{
				return dynamic_cast<ZXINGroupAgentServant*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
			}

			static const ::std::string& ice_staticId();

		private: 

			virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
			virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
			virtual ::IceProxy::Ice::Object* __newInstance() const;
		};

	}

}

namespace IceDelegate
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant : virtual public ::IceDelegate::Ice::Object
		{
		public:

			virtual ::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, ::ZXIN::GrpAgentPack&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
		};

	}

}

namespace IceDelegateM
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant : virtual public ::IceDelegate::ZXIN::ZXINGroupAgentServant,
			virtual public ::IceDelegateM::Ice::Object
		{
		public:

			virtual ::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, ::ZXIN::GrpAgentPack&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
		};

	}

}

namespace IceDelegateD
{

	namespace ZXIN
	{

		class ZXINGroupAgentServant : virtual public ::IceDelegate::ZXIN::ZXINGroupAgentServant,
			virtual public ::IceDelegateD::Ice::Object
		{
		public:

			virtual ::Ice::Int DoZxinGroupAgentInner(const ::ZXIN::GrpAgentPack&, ::ZXIN::GrpAgentPack&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
		};

	}

}

namespace ZXIN
{

	class ZXINGroupAgentServant : virtual public ::Ice::Object
	{
	public:

		typedef ZXINGroupAgentServantPrx ProxyType;
		typedef ZXINGroupAgentServantPtr PointerType;

		virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
		virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
		virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
		static const ::std::string& ice_staticId();

		virtual void DoZxinGroupAgentInner_async(const ::ZXIN::AMD_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr&, const ::ZXIN::GrpAgentPack&, const ::Ice::Current& = ::Ice::Current()) = 0;
		::Ice::DispatchStatus ___DoZxinGroupAgentInner(::IceInternal::Incoming&, const ::Ice::Current&);

		virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

	protected:
		virtual void __writeImpl(::IceInternal::BasicStream*) const;
		virtual void __readImpl(::IceInternal::BasicStream*);
#ifdef __SUNPRO_CC
		using ::Ice::Object::__writeImpl;
		using ::Ice::Object::__readImpl;
#endif
	};

	inline bool operator==(const ZXINGroupAgentServant& l, const ZXINGroupAgentServant& r)
	{
		return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
	}

	inline bool operator<(const ZXINGroupAgentServant& l, const ZXINGroupAgentServant& r)
	{
		return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
	}

}

namespace ZXIN
{

	template<class T>
	class CallbackNC_ZXINGroupAgentServant_DoZxinGroupAgentInner : public Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner_Base, public ::IceInternal::TwowayCallbackNC<T>
	{
	public:

		typedef IceUtil::Handle<T> TPtr;

		typedef void (T::*Exception)(const ::Ice::Exception&);
		typedef void (T::*Sent)(bool);
		typedef void (T::*Response)(::Ice::Int, const ::ZXIN::GrpAgentPack&);

		CallbackNC_ZXINGroupAgentServant_DoZxinGroupAgentInner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
			: ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
		{
		}

		virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
		{
			::ZXIN::ZXINGroupAgentServantPrx __proxy = ::ZXIN::ZXINGroupAgentServantPrx::uncheckedCast(__result->getProxy());
			::ZXIN::GrpAgentPack resps;
			::Ice::Int __ret;
			try
			{
				__ret = __proxy->end_DoZxinGroupAgentInner(resps, __result);
			}
			catch(::Ice::Exception& ex)
			{
				::IceInternal::CallbackNC<T>::__exception(__result, ex);
				return;
			}
			if(response)
			{
				(::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, resps);
			}
		}

		Response response;
	};

	template<class T> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr
		newCallback_ZXINGroupAgentServant_DoZxinGroupAgentInner(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::ZXIN::GrpAgentPack&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
	{
		return new CallbackNC_ZXINGroupAgentServant_DoZxinGroupAgentInner<T>(instance, cb, excb, sentcb);
	}

	template<class T> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr
		newCallback_ZXINGroupAgentServant_DoZxinGroupAgentInner(T* instance, void (T::*cb)(::Ice::Int, const ::ZXIN::GrpAgentPack&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
	{
		return new CallbackNC_ZXINGroupAgentServant_DoZxinGroupAgentInner<T>(instance, cb, excb, sentcb);
	}

	template<class T, typename CT>
	class Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner : public Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner_Base, public ::IceInternal::TwowayCallback<T, CT>
	{
	public:

		typedef IceUtil::Handle<T> TPtr;

		typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
		typedef void (T::*Sent)(bool , const CT&);
		typedef void (T::*Response)(::Ice::Int, const ::ZXIN::GrpAgentPack&, const CT&);

		Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
			: ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
		{
		}

		virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
		{
			::ZXIN::ZXINGroupAgentServantPrx __proxy = ::ZXIN::ZXINGroupAgentServantPrx::uncheckedCast(__result->getProxy());
			::ZXIN::GrpAgentPack resps;
			::Ice::Int __ret;
			try
			{
				__ret = __proxy->end_DoZxinGroupAgentInner(resps, __result);
			}
			catch(::Ice::Exception& ex)
			{
				::IceInternal::Callback<T, CT>::__exception(__result, ex);
				return;
			}
			if(response)
			{
				(::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, resps, CT::dynamicCast(__result->getCookie()));
			}
		}

		Response response;
	};

	template<class T, typename CT> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr
		newCallback_ZXINGroupAgentServant_DoZxinGroupAgentInner(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::ZXIN::GrpAgentPack&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
	{
		return new Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner<T, CT>(instance, cb, excb, sentcb);
	}

	template<class T, typename CT> Callback_ZXINGroupAgentServant_DoZxinGroupAgentInnerPtr
		newCallback_ZXINGroupAgentServant_DoZxinGroupAgentInner(T* instance, void (T::*cb)(::Ice::Int, const ::ZXIN::GrpAgentPack&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
	{
		return new Callback_ZXINGroupAgentServant_DoZxinGroupAgentInner<T, CT>(instance, cb, excb, sentcb);
	}

}

#endif

#endif
