// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BSToGS.proto
// Protobuf C++ Version: 4.26.0-dev

#include "BSToGS.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace BSToGS {

inline constexpr OneUserLoginToken::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        gateclient_{0},
        port_{0},
        msgid_{static_cast< ::BSToGS::MsgID >(24578)} {}

template <typename>
PROTOBUF_CONSTEXPR OneUserLoginToken::OneUserLoginToken(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OneUserLoginTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneUserLoginTokenDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneUserLoginTokenDefaultTypeInternal() {}
  union {
    OneUserLoginToken _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneUserLoginTokenDefaultTypeInternal _OneUserLoginToken_default_instance_;

inline constexpr AskRegister::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gsid_{0},
        port_{0},
        mgsid_{static_cast< ::BSToGS::MsgID >(24577)} {}

template <typename>
PROTOBUF_CONSTEXPR AskRegister::AskRegister(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AskRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AskRegisterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AskRegisterDefaultTypeInternal() {}
  union {
    AskRegister _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AskRegisterDefaultTypeInternal _AskRegister_default_instance_;
}  // namespace BSToGS
static ::_pb::Metadata file_level_metadata_BSToGS_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_BSToGS_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_BSToGS_2eproto = nullptr;
const ::uint32_t
    TableStruct_BSToGS_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::BSToGS::AskRegister, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::AskRegister, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::BSToGS::AskRegister, _impl_.mgsid_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::AskRegister, _impl_.gsid_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::AskRegister, _impl_.port_),
        2,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::BSToGS::OneUserLoginToken, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::OneUserLoginToken, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::BSToGS::OneUserLoginToken, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::OneUserLoginToken, _impl_.gateclient_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::OneUserLoginToken, _impl_.token_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::OneUserLoginToken, _impl_.user_name_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::OneUserLoginToken, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::BSToGS::OneUserLoginToken, _impl_.ip_),
        5,
        3,
        0,
        1,
        4,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::BSToGS::AskRegister)},
        {14, 28, -1, sizeof(::BSToGS::OneUserLoginToken)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::BSToGS::_AskRegister_default_instance_._instance,
    &::BSToGS::_OneUserLoginToken_default_instance_._instance,
};
const char descriptor_table_protodef_BSToGS_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014BSToGS.proto\022\006BSToGS\"f\n\013AskRegister\022;\n"
    "\005mgsid\030\001 \001(\0162\r.BSToGS.MsgID:\035eMsgToGSFro"
    "mBS_AskRegisterRet\022\014\n\004gsid\030\002 \001(\005\022\014\n\004port"
    "\030\003 \001(\005\"\243\001\n\021OneUserLoginToken\022>\n\005msgid\030\001 "
    "\001(\0162\r.BSToGS.MsgID: eMsgToGSFromBS_OneUs"
    "erLoginToken\022\022\n\ngateclient\030\002 \001(\005\022\r\n\005toke"
    "n\030\003 \001(\t\022\021\n\tuser_name\030\004 \001(\t\022\014\n\004port\030\005 \001(\005"
    "\022\n\n\002ip\030\006 \001(\t*\212\001\n\005MsgID\022\032\n\024eMsgToGSFromBS"
    "_Begin\020\200\300\001\022#\n\035eMsgToGSFromBS_AskRegister"
    "Ret\020\201\300\001\022&\n eMsgToGSFromBS_OneUserLoginTo"
    "ken\020\202\300\001\022\030\n\022eMsgToGSFromBS_End\020\250\303\001"
};
static ::absl::once_flag descriptor_table_BSToGS_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_BSToGS_2eproto = {
    false,
    false,
    433,
    descriptor_table_protodef_BSToGS_2eproto,
    "BSToGS.proto",
    &descriptor_table_BSToGS_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_BSToGS_2eproto::offsets,
    file_level_metadata_BSToGS_2eproto,
    file_level_enum_descriptors_BSToGS_2eproto,
    file_level_service_descriptors_BSToGS_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_BSToGS_2eproto_getter() {
  return &descriptor_table_BSToGS_2eproto;
}
namespace BSToGS {
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_BSToGS_2eproto);
  return file_level_enum_descriptors_BSToGS_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MsgID_internal_data_[] = {
    221184u, 65536u, 25000u, };
bool MsgID_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, MsgID_internal_data_);
}
// ===================================================================

class AskRegister::_Internal {
 public:
  using HasBits = decltype(std::declval<AskRegister>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AskRegister, _impl_._has_bits_);
};

AskRegister::AskRegister(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:BSToGS.AskRegister)
}
AskRegister::AskRegister(
    ::google::protobuf::Arena* arena, const AskRegister& from)
    : AskRegister(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AskRegister::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        mgsid_{static_cast< ::BSToGS::MsgID >(24577)} {}

inline void AskRegister::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gsid_),
           0,
           offsetof(Impl_, port_) -
               offsetof(Impl_, gsid_) +
               sizeof(Impl_::port_));
}
AskRegister::~AskRegister() {
  // @@protoc_insertion_point(destructor:BSToGS.AskRegister)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AskRegister::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AskRegister::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AskRegister, _impl_._cached_size_),
              false,
          },
          &AskRegister::MergeImpl,
          &AskRegister::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AskRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:BSToGS.AskRegister)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.gsid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.port_) -
        reinterpret_cast<char*>(&_impl_.gsid_)) + sizeof(_impl_.port_));
    _impl_.mgsid_ = 24577;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AskRegister::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> AskRegister::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AskRegister, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AskRegister_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::BSToGS::AskRegister>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .BSToGS.MsgID mgsid = 1 [default = eMsgToGSFromBS_AskRegisterRet];
    {::_pbi::TcParser::FastEvS1,
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.mgsid_)}},
    // optional int32 gsid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AskRegister, _impl_.gsid_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.gsid_)}},
    // optional int32 port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AskRegister, _impl_.port_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .BSToGS.MsgID mgsid = 1 [default = eMsgToGSFromBS_AskRegisterRet];
    {PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.mgsid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional int32 gsid = 2;
    {PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.gsid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 port = 3;
    {PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.port_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::BSToGS::MsgID_internal_data_},
  }}, {{
  }},
};

::uint8_t* AskRegister::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BSToGS.AskRegister)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .BSToGS.MsgID mgsid = 1 [default = eMsgToGSFromBS_AskRegisterRet];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_mgsid(), target);
  }

  // optional int32 gsid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_gsid(), target);
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BSToGS.AskRegister)
  return target;
}

::size_t AskRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BSToGS.AskRegister)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 gsid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_gsid());
    }

    // optional int32 port = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_port());
    }

    // optional .BSToGS.MsgID mgsid = 1 [default = eMsgToGSFromBS_AskRegisterRet];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_mgsid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AskRegister::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AskRegister*>(&to_msg);
  auto& from = static_cast<const AskRegister&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BSToGS.AskRegister)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gsid_ = from._impl_.gsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mgsid_ = from._impl_.mgsid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AskRegister::CopyFrom(const AskRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BSToGS.AskRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AskRegister::IsInitialized() const {
  return true;
}

void AskRegister::InternalSwap(AskRegister* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.mgsid_)
      + sizeof(AskRegister::_impl_.mgsid_)
      - PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.gsid_)>(
          reinterpret_cast<char*>(&_impl_.gsid_),
          reinterpret_cast<char*>(&other->_impl_.gsid_));
}

::google::protobuf::Metadata AskRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_BSToGS_2eproto_getter,
                                   &descriptor_table_BSToGS_2eproto_once,
                                   file_level_metadata_BSToGS_2eproto[0]);
}
// ===================================================================

class OneUserLoginToken::_Internal {
 public:
  using HasBits = decltype(std::declval<OneUserLoginToken>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_._has_bits_);
};

OneUserLoginToken::OneUserLoginToken(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:BSToGS.OneUserLoginToken)
}
inline PROTOBUF_NDEBUG_INLINE OneUserLoginToken::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        token_(arena, from.token_),
        user_name_(arena, from.user_name_),
        ip_(arena, from.ip_) {}

OneUserLoginToken::OneUserLoginToken(
    ::google::protobuf::Arena* arena,
    const OneUserLoginToken& from)
    : ::google::protobuf::Message(arena) {
  OneUserLoginToken* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gateclient_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, gateclient_),
           offsetof(Impl_, msgid_) -
               offsetof(Impl_, gateclient_) +
               sizeof(Impl_::msgid_));

  // @@protoc_insertion_point(copy_constructor:BSToGS.OneUserLoginToken)
}
inline PROTOBUF_NDEBUG_INLINE OneUserLoginToken::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        token_(arena),
        user_name_(arena),
        ip_(arena),
        msgid_{static_cast< ::BSToGS::MsgID >(24578)} {}

inline void OneUserLoginToken::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gateclient_),
           0,
           offsetof(Impl_, port_) -
               offsetof(Impl_, gateclient_) +
               sizeof(Impl_::port_));
}
OneUserLoginToken::~OneUserLoginToken() {
  // @@protoc_insertion_point(destructor:BSToGS.OneUserLoginToken)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OneUserLoginToken::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.token_.Destroy();
  _impl_.user_name_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
OneUserLoginToken::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_._cached_size_),
              false,
          },
          &OneUserLoginToken::MergeImpl,
          &OneUserLoginToken::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void OneUserLoginToken::Clear() {
// @@protoc_insertion_point(message_clear_start:BSToGS.OneUserLoginToken)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ip_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.gateclient_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.port_) -
        reinterpret_cast<char*>(&_impl_.gateclient_)) + sizeof(_impl_.port_));
    _impl_.msgid_ = 24578;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OneUserLoginToken::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 49, 2> OneUserLoginToken::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OneUserLoginToken_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::BSToGS::OneUserLoginToken>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .BSToGS.MsgID msgid = 1 [default = eMsgToGSFromBS_OneUserLoginToken];
    {::_pbi::TcParser::FastEvS1,
     {8, 5, 0, PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.msgid_)}},
    // optional int32 gateclient = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OneUserLoginToken, _impl_.gateclient_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.gateclient_)}},
    // optional string token = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.token_)}},
    // optional string user_name = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.user_name_)}},
    // optional int32 port = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OneUserLoginToken, _impl_.port_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.port_)}},
    // optional string ip = 6;
    {::_pbi::TcParser::FastSS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.ip_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .BSToGS.MsgID msgid = 1 [default = eMsgToGSFromBS_OneUserLoginToken];
    {PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.msgid_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional int32 gateclient = 2;
    {PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.gateclient_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string token = 3;
    {PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string user_name = 4;
    {PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.user_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 port = 5;
    {PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.port_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string ip = 6;
    {PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.ip_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::BSToGS::MsgID_internal_data_},
  }}, {{
    "\30\0\0\5\11\0\2\0"
    "BSToGS.OneUserLoginToken"
    "token"
    "user_name"
    "ip"
  }},
};

::uint8_t* OneUserLoginToken::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BSToGS.OneUserLoginToken)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .BSToGS.MsgID msgid = 1 [default = eMsgToGSFromBS_OneUserLoginToken];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional int32 gateclient = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_gateclient(), target);
  }

  // optional string token = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_token();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "BSToGS.OneUserLoginToken.token");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string user_name = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_user_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "BSToGS.OneUserLoginToken.user_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional int32 port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_port(), target);
  }

  // optional string ip = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_ip();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "BSToGS.OneUserLoginToken.ip");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BSToGS.OneUserLoginToken)
  return target;
}

::size_t OneUserLoginToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BSToGS.OneUserLoginToken)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_token());
    }

    // optional string user_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_user_name());
    }

    // optional string ip = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_ip());
    }

    // optional int32 gateclient = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_gateclient());
    }

    // optional int32 port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_port());
    }

    // optional .BSToGS.MsgID msgid = 1 [default = eMsgToGSFromBS_OneUserLoginToken];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void OneUserLoginToken::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OneUserLoginToken*>(&to_msg);
  auto& from = static_cast<const OneUserLoginToken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BSToGS.OneUserLoginToken)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gateclient_ = from._impl_.gateclient_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OneUserLoginToken::CopyFrom(const OneUserLoginToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BSToGS.OneUserLoginToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OneUserLoginToken::IsInitialized() const {
  return true;
}

void OneUserLoginToken::InternalSwap(OneUserLoginToken* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, &other->_impl_.token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_name_, &other->_impl_.user_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.msgid_)
      + sizeof(OneUserLoginToken::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(OneUserLoginToken, _impl_.gateclient_)>(
          reinterpret_cast<char*>(&_impl_.gateclient_),
          reinterpret_cast<char*>(&other->_impl_.gateclient_));
}

::google::protobuf::Metadata OneUserLoginToken::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_BSToGS_2eproto_getter,
                                   &descriptor_table_BSToGS_2eproto_once,
                                   file_level_metadata_BSToGS_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace BSToGS
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_BSToGS_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
