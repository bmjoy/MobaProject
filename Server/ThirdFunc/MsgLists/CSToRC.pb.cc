// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSToRC.proto
// Protobuf C++ Version: 4.26.0-dev

#include "CSToRC.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CSToRC {

inline constexpr ServerUserInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        allusernum_{0},
        msgid_{static_cast< ::CSToRC::MsgID >(33503)} {}

template <typename>
PROTOBUF_CONSTEXPR ServerUserInfo::ServerUserInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ServerUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerUserInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerUserInfoDefaultTypeInternal() {}
  union {
    ServerUserInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerUserInfoDefaultTypeInternal _ServerUserInfo_default_instance_;

inline constexpr QueryCDkeyInfoResp_CDKey_Info::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        platform_{0},
        end_tiem_{::int64_t{0}},
        code_num_{0},
        code_len_{0},
        type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR QueryCDkeyInfoResp_CDKey_Info::QueryCDkeyInfoResp_CDKey_Info(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QueryCDkeyInfoResp_CDKey_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryCDkeyInfoResp_CDKey_InfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryCDkeyInfoResp_CDKey_InfoDefaultTypeInternal() {}
  union {
    QueryCDkeyInfoResp_CDKey_Info _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryCDkeyInfoResp_CDKey_InfoDefaultTypeInternal _QueryCDkeyInfoResp_CDKey_Info_default_instance_;

inline constexpr NoticeInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        notice_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR NoticeInfo::NoticeInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NoticeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoticeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoticeInfoDefaultTypeInternal() {}
  union {
    NoticeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoticeInfoDefaultTypeInternal _NoticeInfo_default_instance_;

inline constexpr DeleteNoticeResp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rst_{false},
        msgid_{static_cast< ::CSToRC::MsgID >(33506)} {}

template <typename>
PROTOBUF_CONSTEXPR DeleteNoticeResp::DeleteNoticeResp(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DeleteNoticeRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteNoticeRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteNoticeRespDefaultTypeInternal() {}
  union {
    DeleteNoticeResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteNoticeRespDefaultTypeInternal _DeleteNoticeResp_default_instance_;

inline constexpr AskRegistRsp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rst_{false},
        msgid_{static_cast< ::CSToRC::MsgID >(33501)} {}

template <typename>
PROTOBUF_CONSTEXPR AskRegistRsp::AskRegistRsp(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AskRegistRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AskRegistRspDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AskRegistRspDefaultTypeInternal() {}
  union {
    AskRegistRsp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AskRegistRspDefaultTypeInternal _AskRegistRsp_default_instance_;

inline constexpr AllServerInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        servername_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        curttime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        roomusernum_{0},
        battleusernum_{0},
        loadfactory_{0},
        allusernum_{0},
        msgid_{static_cast< ::CSToRC::MsgID >(33502)} {}

template <typename>
PROTOBUF_CONSTEXPR AllServerInfo::AllServerInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AllServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllServerInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllServerInfoDefaultTypeInternal() {}
  union {
    AllServerInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllServerInfoDefaultTypeInternal _AllServerInfo_default_instance_;

inline constexpr AddNoticeResp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rst_{false},
        msgid_{static_cast< ::CSToRC::MsgID >(33505)} {}

template <typename>
PROTOBUF_CONSTEXPR AddNoticeResp::AddNoticeResp(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AddNoticeRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddNoticeRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddNoticeRespDefaultTypeInternal() {}
  union {
    AddNoticeResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddNoticeRespDefaultTypeInternal _AddNoticeResp_default_instance_;

inline constexpr AddMailResp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rst_{false},
        msgid_{static_cast< ::CSToRC::MsgID >(33507)} {}

template <typename>
PROTOBUF_CONSTEXPR AddMailResp::AddMailResp(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AddMailRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddMailRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddMailRespDefaultTypeInternal() {}
  union {
    AddMailResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddMailRespDefaultTypeInternal _AddMailResp_default_instance_;

inline constexpr QueryCDkeyInfoResp::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        info_{},
        msgid_{static_cast< ::CSToRC::MsgID >(33508)} {}

template <typename>
PROTOBUF_CONSTEXPR QueryCDkeyInfoResp::QueryCDkeyInfoResp(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QueryCDkeyInfoRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryCDkeyInfoRespDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryCDkeyInfoRespDefaultTypeInternal() {}
  union {
    QueryCDkeyInfoResp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryCDkeyInfoRespDefaultTypeInternal _QueryCDkeyInfoResp_default_instance_;

inline constexpr AllNoticeInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        notices_{},
        msgid_{static_cast< ::CSToRC::MsgID >(33504)} {}

template <typename>
PROTOBUF_CONSTEXPR AllNoticeInfo::AllNoticeInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AllNoticeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllNoticeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllNoticeInfoDefaultTypeInternal() {}
  union {
    AllNoticeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllNoticeInfoDefaultTypeInternal _AllNoticeInfo_default_instance_;
}  // namespace CSToRC
static ::_pb::Metadata file_level_metadata_CSToRC_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_CSToRC_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_CSToRC_2eproto = nullptr;
const ::uint32_t
    TableStruct_CSToRC_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _impl_.title_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _impl_.platform_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _impl_.end_tiem_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _impl_.code_num_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _impl_.code_len_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp_CDKey_Info, _impl_.type_),
        1,
        0,
        2,
        3,
        4,
        5,
        6,
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::QueryCDkeyInfoResp, _impl_.info_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::CSToRC::AddMailResp, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AddMailResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::AddMailResp, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AddMailResp, _impl_.rst_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::CSToRC::AskRegistRsp, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AskRegistRsp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::AskRegistRsp, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AskRegistRsp, _impl_.rst_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _impl_.servername_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _impl_.roomusernum_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _impl_.battleusernum_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _impl_.loadfactory_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _impl_.allusernum_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllServerInfo, _impl_.curttime_),
        6,
        0,
        2,
        3,
        4,
        5,
        1,
        PROTOBUF_FIELD_OFFSET(::CSToRC::ServerUserInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::ServerUserInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::ServerUserInfo, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::ServerUserInfo, _impl_.allusernum_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::CSToRC::NoticeInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::NoticeInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::NoticeInfo, _impl_.notice_),
        0,
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllNoticeInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllNoticeInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllNoticeInfo, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AllNoticeInfo, _impl_.notices_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::CSToRC::AddNoticeResp, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AddNoticeResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::AddNoticeResp, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::AddNoticeResp, _impl_.rst_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::CSToRC::DeleteNoticeResp, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::DeleteNoticeResp, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSToRC::DeleteNoticeResp, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::CSToRC::DeleteNoticeResp, _impl_.rst_),
        1,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::CSToRC::QueryCDkeyInfoResp_CDKey_Info)},
        {22, 32, -1, sizeof(::CSToRC::QueryCDkeyInfoResp)},
        {34, 44, -1, sizeof(::CSToRC::AddMailResp)},
        {46, 56, -1, sizeof(::CSToRC::AskRegistRsp)},
        {58, 73, -1, sizeof(::CSToRC::AllServerInfo)},
        {80, 90, -1, sizeof(::CSToRC::ServerUserInfo)},
        {92, 101, -1, sizeof(::CSToRC::NoticeInfo)},
        {102, 112, -1, sizeof(::CSToRC::AllNoticeInfo)},
        {114, 124, -1, sizeof(::CSToRC::AddNoticeResp)},
        {126, 136, -1, sizeof(::CSToRC::DeleteNoticeResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CSToRC::_QueryCDkeyInfoResp_CDKey_Info_default_instance_._instance,
    &::CSToRC::_QueryCDkeyInfoResp_default_instance_._instance,
    &::CSToRC::_AddMailResp_default_instance_._instance,
    &::CSToRC::_AskRegistRsp_default_instance_._instance,
    &::CSToRC::_AllServerInfo_default_instance_._instance,
    &::CSToRC::_ServerUserInfo_default_instance_._instance,
    &::CSToRC::_NoticeInfo_default_instance_._instance,
    &::CSToRC::_AllNoticeInfo_default_instance_._instance,
    &::CSToRC::_AddNoticeResp_default_instance_._instance,
    &::CSToRC::_DeleteNoticeResp_default_instance_._instance,
};
const char descriptor_table_protodef_CSToRC_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014CSToRC.proto\022\006CSToRC\"\203\002\n\022QueryCDkeyInf"
    "oResp\0229\n\005msgid\030\001 \001(\0162\r.CSToRC.MsgID:\033eMs"
    "gCS2RC_AskQueryCDkeyResp\0223\n\004info\030\002 \003(\0132%"
    ".CSToRC.QueryCDkeyInfoResp.CDKey_Info\032}\n"
    "\nCDKey_Info\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\020"
    "\n\010platform\030\003 \001(\005\022\020\n\010end_tiem\030\004 \001(\003\022\020\n\010co"
    "de_num\030\005 \001(\005\022\020\n\010code_len\030\006 \001(\005\022\014\n\004type\030\007"
    " \001(\005\"U\n\013AddMailResp\0229\n\005msgid\030\001 \001(\0162\r.CST"
    "oRC.MsgID:\033eMsgCS2RC_AskAddOneMailResp\022\013"
    "\n\003rst\030\002 \001(\010\"Q\n\014AskRegistRsp\0224\n\005msgid\030\001 \001"
    "(\0162\r.CSToRC.MsgID:\026eMsgCS2RC_AskRegistRs"
    "p\022\013\n\003rst\030\002 \001(\010\"\301\001\n\rAllServerInfo\0225\n\005msgi"
    "d\030\001 \001(\0162\r.CSToRC.MsgID:\027eMsgCS2RC_AllSer"
    "verInfo\022\022\n\nservername\030\002 \001(\014\022\023\n\013roomUserN"
    "um\030\003 \001(\005\022\025\n\rbattleUserNum\030\004 \001(\005\022\023\n\013loadF"
    "actory\030\005 \001(\002\022\022\n\nallUserNum\030\006 \001(\005\022\020\n\010curt"
    "time\030\007 \001(\t\"\\\n\016ServerUserInfo\0226\n\005msgid\030\001 "
    "\001(\0162\r.CSToRC.MsgID:\030eMsgCS2RC_ServerUser"
    "Info\022\022\n\nallUserNum\030\002 \001(\005\"\034\n\nNoticeInfo\022\016"
    "\n\006notice\030\001 \001(\014\"k\n\rAllNoticeInfo\0225\n\005msgid"
    "\030\001 \001(\0162\r.CSToRC.MsgID:\027eMsgCS2RC_AllNoti"
    "ceInfo\022#\n\007notices\030\002 \003(\0132\022.CSToRC.NoticeI"
    "nfo\"S\n\rAddNoticeResp\0225\n\005msgid\030\001 \001(\0162\r.CS"
    "ToRC.MsgID:\027eMsgCS2RC_AddNoticeResp\022\013\n\003r"
    "st\030\002 \001(\010\"Y\n\020DeleteNoticeResp\0228\n\005msgid\030\001 "
    "\001(\0162\r.CSToRC.MsgID:\032eMsgCS2RC_DeleteNoti"
    "ceResp\022\013\n\003rst\030\002 \001(\010*\266\002\n\005MsgID\022\025\n\017eMsgCS2"
    "RC_Begin\020\334\205\002\022\034\n\026eMsgCS2RC_AskRegistRsp\020\335"
    "\205\002\022\035\n\027eMsgCS2RC_AllServerInfo\020\336\205\002\022\036\n\030eMs"
    "gCS2RC_ServerUserInfo\020\337\205\002\022\035\n\027eMsgCS2RC_A"
    "llNoticeInfo\020\340\205\002\022\035\n\027eMsgCS2RC_AddNoticeR"
    "esp\020\341\205\002\022 \n\032eMsgCS2RC_DeleteNoticeResp\020\342\205"
    "\002\022!\n\033eMsgCS2RC_AskAddOneMailResp\020\343\205\002\022!\n\033"
    "eMsgCS2RC_AskQueryCDkeyResp\020\344\205\002\022\023\n\reMsgC"
    "S2RC_End\020\317\211\002"
};
static ::absl::once_flag descriptor_table_CSToRC_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CSToRC_2eproto = {
    false,
    false,
    1372,
    descriptor_table_protodef_CSToRC_2eproto,
    "CSToRC.proto",
    &descriptor_table_CSToRC_2eproto_once,
    nullptr,
    0,
    10,
    schemas,
    file_default_instances,
    TableStruct_CSToRC_2eproto::offsets,
    file_level_metadata_CSToRC_2eproto,
    file_level_enum_descriptors_CSToRC_2eproto,
    file_level_service_descriptors_CSToRC_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CSToRC_2eproto_getter() {
  return &descriptor_table_CSToRC_2eproto;
}
namespace CSToRC {
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_CSToRC_2eproto);
  return file_level_enum_descriptors_CSToRC_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MsgID_internal_data_[] = {
    0u, 655360u, 33506u, 33503u, 33508u, 33501u, 33505u, 33507u, 33999u, 33500u, 33502u, 33504u, };
bool MsgID_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, MsgID_internal_data_);
}
// ===================================================================

class QueryCDkeyInfoResp_CDKey_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryCDkeyInfoResp_CDKey_Info>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_._has_bits_);
};

QueryCDkeyInfoResp_CDKey_Info::QueryCDkeyInfoResp_CDKey_Info(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
}
inline PROTOBUF_NDEBUG_INLINE QueryCDkeyInfoResp_CDKey_Info::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        title_(arena, from.title_) {}

QueryCDkeyInfoResp_CDKey_Info::QueryCDkeyInfoResp_CDKey_Info(
    ::google::protobuf::Arena* arena,
    const QueryCDkeyInfoResp_CDKey_Info& from)
    : ::google::protobuf::Message(arena) {
  QueryCDkeyInfoResp_CDKey_Info* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
}
inline PROTOBUF_NDEBUG_INLINE QueryCDkeyInfoResp_CDKey_Info::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        title_(arena) {}

inline void QueryCDkeyInfoResp_CDKey_Info::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));
}
QueryCDkeyInfoResp_CDKey_Info::~QueryCDkeyInfoResp_CDKey_Info() {
  // @@protoc_insertion_point(destructor:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QueryCDkeyInfoResp_CDKey_Info::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.title_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
QueryCDkeyInfoResp_CDKey_Info::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_._cached_size_),
              false,
          },
          &QueryCDkeyInfoResp_CDKey_Info::MergeImpl,
          &QueryCDkeyInfoResp_CDKey_Info::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void QueryCDkeyInfoResp_CDKey_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QueryCDkeyInfoResp_CDKey_Info::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 50, 2> QueryCDkeyInfoResp_CDKey_Info::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_QueryCDkeyInfoResp_CDKey_Info_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(QueryCDkeyInfoResp_CDKey_Info, _impl_.id_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.id_)}},
    // optional string title = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.title_)}},
    // optional int32 platform = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(QueryCDkeyInfoResp_CDKey_Info, _impl_.platform_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.platform_)}},
    // optional int64 end_tiem = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(QueryCDkeyInfoResp_CDKey_Info, _impl_.end_tiem_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.end_tiem_)}},
    // optional int32 code_num = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(QueryCDkeyInfoResp_CDKey_Info, _impl_.code_num_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.code_num_)}},
    // optional int32 code_len = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(QueryCDkeyInfoResp_CDKey_Info, _impl_.code_len_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.code_len_)}},
    // optional int32 type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(QueryCDkeyInfoResp_CDKey_Info, _impl_.type_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string title = 2;
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.title_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 platform = 3;
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.platform_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int64 end_tiem = 4;
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.end_tiem_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int32 code_num = 5;
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.code_num_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 code_len = 6;
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.code_len_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 type = 7;
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.type_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\44\0\5\0\0\0\0\0"
    "CSToRC.QueryCDkeyInfoResp.CDKey_Info"
    "title"
  }},
};

::uint8_t* QueryCDkeyInfoResp_CDKey_Info::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_title();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CSToRC.QueryCDkeyInfoResp.CDKey_Info.title");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 platform = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_platform(), target);
  }

  // optional int64 end_tiem = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_end_tiem(), target);
  }

  // optional int32 code_num = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_code_num(), target);
  }

  // optional int32 code_len = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_code_len(), target);
  }

  // optional int32 type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  return target;
}

::size_t QueryCDkeyInfoResp_CDKey_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_title());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional int32 platform = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_platform());
    }

    // optional int64 end_tiem = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_end_tiem());
    }

    // optional int32 code_num = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_code_num());
    }

    // optional int32 code_len = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_code_len());
    }

    // optional int32 type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void QueryCDkeyInfoResp_CDKey_Info::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QueryCDkeyInfoResp_CDKey_Info*>(&to_msg);
  auto& from = static_cast<const QueryCDkeyInfoResp_CDKey_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.platform_ = from._impl_.platform_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_tiem_ = from._impl_.end_tiem_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.code_num_ = from._impl_.code_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.code_len_ = from._impl_.code_len_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryCDkeyInfoResp_CDKey_Info::CopyFrom(const QueryCDkeyInfoResp_CDKey_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryCDkeyInfoResp_CDKey_Info::IsInitialized() const {
  return true;
}

void QueryCDkeyInfoResp_CDKey_Info::InternalSwap(QueryCDkeyInfoResp_CDKey_Info* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.type_)
      + sizeof(QueryCDkeyInfoResp_CDKey_Info::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp_CDKey_Info, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata QueryCDkeyInfoResp_CDKey_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[0]);
}
// ===================================================================

class QueryCDkeyInfoResp::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryCDkeyInfoResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp, _impl_._has_bits_);
};

QueryCDkeyInfoResp::QueryCDkeyInfoResp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.QueryCDkeyInfoResp)
}
inline PROTOBUF_NDEBUG_INLINE QueryCDkeyInfoResp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        info_{visibility, arena, from.info_} {}

QueryCDkeyInfoResp::QueryCDkeyInfoResp(
    ::google::protobuf::Arena* arena,
    const QueryCDkeyInfoResp& from)
    : ::google::protobuf::Message(arena) {
  QueryCDkeyInfoResp* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.msgid_ = from._impl_.msgid_;

  // @@protoc_insertion_point(copy_constructor:CSToRC.QueryCDkeyInfoResp)
}
inline PROTOBUF_NDEBUG_INLINE QueryCDkeyInfoResp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        info_{visibility, arena},
        msgid_{static_cast< ::CSToRC::MsgID >(33508)} {}

inline void QueryCDkeyInfoResp::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
QueryCDkeyInfoResp::~QueryCDkeyInfoResp() {
  // @@protoc_insertion_point(destructor:CSToRC.QueryCDkeyInfoResp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QueryCDkeyInfoResp::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
QueryCDkeyInfoResp::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp, _impl_._cached_size_),
              false,
          },
          &QueryCDkeyInfoResp::MergeImpl,
          &QueryCDkeyInfoResp::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void QueryCDkeyInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.QueryCDkeyInfoResp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  _impl_.msgid_ = 33508;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QueryCDkeyInfoResp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> QueryCDkeyInfoResp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_QueryCDkeyInfoResp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::QueryCDkeyInfoResp>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp, _impl_.info_)}},
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
    {::_pbi::TcParser::FastEvS1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp, _impl_.msgid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp, _impl_.msgid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
    {PROTOBUF_FIELD_OFFSET(QueryCDkeyInfoResp, _impl_.info_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::CSToRC::MsgID_internal_data_},
    {::_pbi::TcParser::GetTable<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>()},
  }}, {{
  }},
};

::uint8_t* QueryCDkeyInfoResp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.QueryCDkeyInfoResp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_info().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.QueryCDkeyInfoResp)
  return target;
}

::size_t QueryCDkeyInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.QueryCDkeyInfoResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->_internal_info()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void QueryCDkeyInfoResp::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QueryCDkeyInfoResp*>(&to_msg);
  auto& from = static_cast<const QueryCDkeyInfoResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.QueryCDkeyInfoResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_info()->MergeFrom(
      from._internal_info());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.msgid_ = from._impl_.msgid_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QueryCDkeyInfoResp::CopyFrom(const QueryCDkeyInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.QueryCDkeyInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QueryCDkeyInfoResp::IsInitialized() const {
  return true;
}

void QueryCDkeyInfoResp::InternalSwap(QueryCDkeyInfoResp* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
  swap(_impl_.msgid_, other->_impl_.msgid_);
}

::google::protobuf::Metadata QueryCDkeyInfoResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[1]);
}
// ===================================================================

class AddMailResp::_Internal {
 public:
  using HasBits = decltype(std::declval<AddMailResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_._has_bits_);
};

AddMailResp::AddMailResp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.AddMailResp)
}
AddMailResp::AddMailResp(
    ::google::protobuf::Arena* arena, const AddMailResp& from)
    : AddMailResp(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AddMailResp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        msgid_{static_cast< ::CSToRC::MsgID >(33507)} {}

inline void AddMailResp::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rst_ = {};
}
AddMailResp::~AddMailResp() {
  // @@protoc_insertion_point(destructor:CSToRC.AddMailResp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddMailResp::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AddMailResp::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_._cached_size_),
              false,
          },
          &AddMailResp::MergeImpl,
          &AddMailResp::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AddMailResp::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.AddMailResp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.rst_ = false;
    _impl_.msgid_ = 33507;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AddMailResp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AddMailResp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AddMailResp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::AddMailResp>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bool rst = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddMailResp, _impl_.rst_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_.rst_)}},
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
    {::_pbi::TcParser::FastEvS1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_.msgid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
    {PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_.msgid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional bool rst = 2;
    {PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_.rst_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::CSToRC::MsgID_internal_data_},
  }}, {{
  }},
};

::uint8_t* AddMailResp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AddMailResp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional bool rst = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_rst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AddMailResp)
  return target;
}

::size_t AddMailResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.AddMailResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool rst = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AddMailResp::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddMailResp*>(&to_msg);
  auto& from = static_cast<const AddMailResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.AddMailResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rst_ = from._impl_.rst_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddMailResp::CopyFrom(const AddMailResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.AddMailResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AddMailResp::IsInitialized() const {
  return true;
}

void AddMailResp::InternalSwap(AddMailResp* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_.msgid_)
      + sizeof(AddMailResp::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(AddMailResp, _impl_.rst_)>(
          reinterpret_cast<char*>(&_impl_.rst_),
          reinterpret_cast<char*>(&other->_impl_.rst_));
}

::google::protobuf::Metadata AddMailResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[2]);
}
// ===================================================================

class AskRegistRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<AskRegistRsp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_._has_bits_);
};

AskRegistRsp::AskRegistRsp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.AskRegistRsp)
}
AskRegistRsp::AskRegistRsp(
    ::google::protobuf::Arena* arena, const AskRegistRsp& from)
    : AskRegistRsp(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AskRegistRsp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        msgid_{static_cast< ::CSToRC::MsgID >(33501)} {}

inline void AskRegistRsp::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rst_ = {};
}
AskRegistRsp::~AskRegistRsp() {
  // @@protoc_insertion_point(destructor:CSToRC.AskRegistRsp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AskRegistRsp::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AskRegistRsp::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_._cached_size_),
              false,
          },
          &AskRegistRsp::MergeImpl,
          &AskRegistRsp::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AskRegistRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.AskRegistRsp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.rst_ = false;
    _impl_.msgid_ = 33501;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AskRegistRsp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AskRegistRsp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AskRegistRsp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::AskRegistRsp>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bool rst = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AskRegistRsp, _impl_.rst_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_.rst_)}},
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
    {::_pbi::TcParser::FastEvS1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_.msgid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
    {PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_.msgid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional bool rst = 2;
    {PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_.rst_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::CSToRC::MsgID_internal_data_},
  }}, {{
  }},
};

::uint8_t* AskRegistRsp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AskRegistRsp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional bool rst = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_rst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AskRegistRsp)
  return target;
}

::size_t AskRegistRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.AskRegistRsp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool rst = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AskRegistRsp::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AskRegistRsp*>(&to_msg);
  auto& from = static_cast<const AskRegistRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.AskRegistRsp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rst_ = from._impl_.rst_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AskRegistRsp::CopyFrom(const AskRegistRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.AskRegistRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AskRegistRsp::IsInitialized() const {
  return true;
}

void AskRegistRsp::InternalSwap(AskRegistRsp* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_.msgid_)
      + sizeof(AskRegistRsp::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(AskRegistRsp, _impl_.rst_)>(
          reinterpret_cast<char*>(&_impl_.rst_),
          reinterpret_cast<char*>(&other->_impl_.rst_));
}

::google::protobuf::Metadata AskRegistRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[3]);
}
// ===================================================================

class AllServerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AllServerInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_._has_bits_);
};

AllServerInfo::AllServerInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.AllServerInfo)
}
inline PROTOBUF_NDEBUG_INLINE AllServerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        servername_(arena, from.servername_),
        curttime_(arena, from.curttime_) {}

AllServerInfo::AllServerInfo(
    ::google::protobuf::Arena* arena,
    const AllServerInfo& from)
    : ::google::protobuf::Message(arena) {
  AllServerInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roomusernum_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, roomusernum_),
           offsetof(Impl_, msgid_) -
               offsetof(Impl_, roomusernum_) +
               sizeof(Impl_::msgid_));

  // @@protoc_insertion_point(copy_constructor:CSToRC.AllServerInfo)
}
inline PROTOBUF_NDEBUG_INLINE AllServerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        servername_(arena),
        curttime_(arena),
        msgid_{static_cast< ::CSToRC::MsgID >(33502)} {}

inline void AllServerInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roomusernum_),
           0,
           offsetof(Impl_, allusernum_) -
               offsetof(Impl_, roomusernum_) +
               sizeof(Impl_::allusernum_));
}
AllServerInfo::~AllServerInfo() {
  // @@protoc_insertion_point(destructor:CSToRC.AllServerInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AllServerInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.servername_.Destroy();
  _impl_.curttime_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AllServerInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_._cached_size_),
              false,
          },
          &AllServerInfo::MergeImpl,
          &AllServerInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AllServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.AllServerInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.servername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.curttime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.roomusernum_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.allusernum_) -
        reinterpret_cast<char*>(&_impl_.roomusernum_)) + sizeof(_impl_.allusernum_));
    _impl_.msgid_ = 33502;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AllServerInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 37, 2> AllServerInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AllServerInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::AllServerInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
    {::_pbi::TcParser::FastEvS1,
     {8, 6, 0, PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.msgid_)}},
    // optional bytes servername = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.servername_)}},
    // optional int32 roomUserNum = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AllServerInfo, _impl_.roomusernum_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.roomusernum_)}},
    // optional int32 battleUserNum = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AllServerInfo, _impl_.battleusernum_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.battleusernum_)}},
    // optional float loadFactory = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.loadfactory_)}},
    // optional int32 allUserNum = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AllServerInfo, _impl_.allusernum_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.allusernum_)}},
    // optional string curttime = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.curttime_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
    {PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.msgid_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional bytes servername = 2;
    {PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.servername_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 roomUserNum = 3;
    {PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.roomusernum_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 battleUserNum = 4;
    {PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.battleusernum_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float loadFactory = 5;
    {PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.loadfactory_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 allUserNum = 6;
    {PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.allusernum_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string curttime = 7;
    {PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.curttime_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::CSToRC::MsgID_internal_data_},
  }}, {{
    "\24\0\0\0\0\0\0\10"
    "CSToRC.AllServerInfo"
    "curttime"
  }},
};

::uint8_t* AllServerInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AllServerInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional bytes servername = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_servername();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional int32 roomUserNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_roomusernum(), target);
  }

  // optional int32 battleUserNum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_battleusernum(), target);
  }

  // optional float loadFactory = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_loadfactory(), target);
  }

  // optional int32 allUserNum = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_allusernum(), target);
  }

  // optional string curttime = 7;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_curttime();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CSToRC.AllServerInfo.curttime");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AllServerInfo)
  return target;
}

::size_t AllServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.AllServerInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes servername = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_servername());
    }

    // optional string curttime = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_curttime());
    }

    // optional int32 roomUserNum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_roomusernum());
    }

    // optional int32 battleUserNum = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_battleusernum());
    }

    // optional float loadFactory = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional int32 allUserNum = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_allusernum());
    }

    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AllServerInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AllServerInfo*>(&to_msg);
  auto& from = static_cast<const AllServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.AllServerInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_servername(from._internal_servername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_curttime(from._internal_curttime());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.roomusernum_ = from._impl_.roomusernum_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.battleusernum_ = from._impl_.battleusernum_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.loadfactory_ = from._impl_.loadfactory_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.allusernum_ = from._impl_.allusernum_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AllServerInfo::CopyFrom(const AllServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.AllServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AllServerInfo::IsInitialized() const {
  return true;
}

void AllServerInfo::InternalSwap(AllServerInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.servername_, &other->_impl_.servername_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.curttime_, &other->_impl_.curttime_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.msgid_)
      + sizeof(AllServerInfo::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(AllServerInfo, _impl_.roomusernum_)>(
          reinterpret_cast<char*>(&_impl_.roomusernum_),
          reinterpret_cast<char*>(&other->_impl_.roomusernum_));
}

::google::protobuf::Metadata AllServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[4]);
}
// ===================================================================

class ServerUserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerUserInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_._has_bits_);
};

ServerUserInfo::ServerUserInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.ServerUserInfo)
}
ServerUserInfo::ServerUserInfo(
    ::google::protobuf::Arena* arena, const ServerUserInfo& from)
    : ServerUserInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ServerUserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        msgid_{static_cast< ::CSToRC::MsgID >(33503)} {}

inline void ServerUserInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.allusernum_ = {};
}
ServerUserInfo::~ServerUserInfo() {
  // @@protoc_insertion_point(destructor:CSToRC.ServerUserInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ServerUserInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ServerUserInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_._cached_size_),
              false,
          },
          &ServerUserInfo::MergeImpl,
          &ServerUserInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ServerUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.ServerUserInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.allusernum_ = 0;
    _impl_.msgid_ = 33503;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ServerUserInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ServerUserInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ServerUserInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::ServerUserInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 allUserNum = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerUserInfo, _impl_.allusernum_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_.allusernum_)}},
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
    {::_pbi::TcParser::FastEvS1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_.msgid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
    {PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_.msgid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional int32 allUserNum = 2;
    {PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_.allusernum_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::CSToRC::MsgID_internal_data_},
  }}, {{
  }},
};

::uint8_t* ServerUserInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.ServerUserInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional int32 allUserNum = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_allusernum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.ServerUserInfo)
  return target;
}

::size_t ServerUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.ServerUserInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 allUserNum = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_allusernum());
    }

    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ServerUserInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServerUserInfo*>(&to_msg);
  auto& from = static_cast<const ServerUserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.ServerUserInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.allusernum_ = from._impl_.allusernum_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerUserInfo::CopyFrom(const ServerUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.ServerUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ServerUserInfo::IsInitialized() const {
  return true;
}

void ServerUserInfo::InternalSwap(ServerUserInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_.msgid_)
      + sizeof(ServerUserInfo::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(ServerUserInfo, _impl_.allusernum_)>(
          reinterpret_cast<char*>(&_impl_.allusernum_),
          reinterpret_cast<char*>(&other->_impl_.allusernum_));
}

::google::protobuf::Metadata ServerUserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[5]);
}
// ===================================================================

class NoticeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NoticeInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NoticeInfo, _impl_._has_bits_);
};

NoticeInfo::NoticeInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.NoticeInfo)
}
inline PROTOBUF_NDEBUG_INLINE NoticeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        notice_(arena, from.notice_) {}

NoticeInfo::NoticeInfo(
    ::google::protobuf::Arena* arena,
    const NoticeInfo& from)
    : ::google::protobuf::Message(arena) {
  NoticeInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:CSToRC.NoticeInfo)
}
inline PROTOBUF_NDEBUG_INLINE NoticeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        notice_(arena) {}

inline void NoticeInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
NoticeInfo::~NoticeInfo() {
  // @@protoc_insertion_point(destructor:CSToRC.NoticeInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NoticeInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.notice_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
NoticeInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(NoticeInfo, _impl_._cached_size_),
              false,
          },
          &NoticeInfo::MergeImpl,
          &NoticeInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void NoticeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.NoticeInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.notice_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NoticeInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> NoticeInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NoticeInfo, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_NoticeInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::NoticeInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bytes notice = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NoticeInfo, _impl_.notice_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes notice = 1;
    {PROTOBUF_FIELD_OFFSET(NoticeInfo, _impl_.notice_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* NoticeInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.NoticeInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes notice = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_notice();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.NoticeInfo)
  return target;
}

::size_t NoticeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.NoticeInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes notice = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_notice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void NoticeInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NoticeInfo*>(&to_msg);
  auto& from = static_cast<const NoticeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.NoticeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_internal_set_notice(from._internal_notice());
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NoticeInfo::CopyFrom(const NoticeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.NoticeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NoticeInfo::IsInitialized() const {
  return true;
}

void NoticeInfo::InternalSwap(NoticeInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.notice_, &other->_impl_.notice_, arena);
}

::google::protobuf::Metadata NoticeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[6]);
}
// ===================================================================

class AllNoticeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AllNoticeInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AllNoticeInfo, _impl_._has_bits_);
};

AllNoticeInfo::AllNoticeInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.AllNoticeInfo)
}
inline PROTOBUF_NDEBUG_INLINE AllNoticeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        notices_{visibility, arena, from.notices_} {}

AllNoticeInfo::AllNoticeInfo(
    ::google::protobuf::Arena* arena,
    const AllNoticeInfo& from)
    : ::google::protobuf::Message(arena) {
  AllNoticeInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.msgid_ = from._impl_.msgid_;

  // @@protoc_insertion_point(copy_constructor:CSToRC.AllNoticeInfo)
}
inline PROTOBUF_NDEBUG_INLINE AllNoticeInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        notices_{visibility, arena},
        msgid_{static_cast< ::CSToRC::MsgID >(33504)} {}

inline void AllNoticeInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AllNoticeInfo::~AllNoticeInfo() {
  // @@protoc_insertion_point(destructor:CSToRC.AllNoticeInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AllNoticeInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AllNoticeInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AllNoticeInfo, _impl_._cached_size_),
              false,
          },
          &AllNoticeInfo::MergeImpl,
          &AllNoticeInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AllNoticeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.AllNoticeInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notices_.Clear();
  _impl_.msgid_ = 33504;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AllNoticeInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> AllNoticeInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AllNoticeInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AllNoticeInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::AllNoticeInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .CSToRC.NoticeInfo notices = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(AllNoticeInfo, _impl_.notices_)}},
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
    {::_pbi::TcParser::FastEvS1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AllNoticeInfo, _impl_.msgid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
    {PROTOBUF_FIELD_OFFSET(AllNoticeInfo, _impl_.msgid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // repeated .CSToRC.NoticeInfo notices = 2;
    {PROTOBUF_FIELD_OFFSET(AllNoticeInfo, _impl_.notices_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::CSToRC::MsgID_internal_data_},
    {::_pbi::TcParser::GetTable<::CSToRC::NoticeInfo>()},
  }}, {{
  }},
};

::uint8_t* AllNoticeInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AllNoticeInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // repeated .CSToRC.NoticeInfo notices = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notices_size()); i < n; i++) {
    const auto& repfield = this->_internal_notices().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AllNoticeInfo)
  return target;
}

::size_t AllNoticeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.AllNoticeInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSToRC.NoticeInfo notices = 2;
  total_size += 1UL * this->_internal_notices_size();
  for (const auto& msg : this->_internal_notices()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AllNoticeInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AllNoticeInfo*>(&to_msg);
  auto& from = static_cast<const AllNoticeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.AllNoticeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_notices()->MergeFrom(
      from._internal_notices());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.msgid_ = from._impl_.msgid_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AllNoticeInfo::CopyFrom(const AllNoticeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.AllNoticeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AllNoticeInfo::IsInitialized() const {
  return true;
}

void AllNoticeInfo::InternalSwap(AllNoticeInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.notices_.InternalSwap(&other->_impl_.notices_);
  swap(_impl_.msgid_, other->_impl_.msgid_);
}

::google::protobuf::Metadata AllNoticeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[7]);
}
// ===================================================================

class AddNoticeResp::_Internal {
 public:
  using HasBits = decltype(std::declval<AddNoticeResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_._has_bits_);
};

AddNoticeResp::AddNoticeResp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.AddNoticeResp)
}
AddNoticeResp::AddNoticeResp(
    ::google::protobuf::Arena* arena, const AddNoticeResp& from)
    : AddNoticeResp(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AddNoticeResp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        msgid_{static_cast< ::CSToRC::MsgID >(33505)} {}

inline void AddNoticeResp::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rst_ = {};
}
AddNoticeResp::~AddNoticeResp() {
  // @@protoc_insertion_point(destructor:CSToRC.AddNoticeResp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AddNoticeResp::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AddNoticeResp::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_._cached_size_),
              false,
          },
          &AddNoticeResp::MergeImpl,
          &AddNoticeResp::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AddNoticeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.AddNoticeResp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.rst_ = false;
    _impl_.msgid_ = 33505;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AddNoticeResp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AddNoticeResp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AddNoticeResp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::AddNoticeResp>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bool rst = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddNoticeResp, _impl_.rst_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_.rst_)}},
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
    {::_pbi::TcParser::FastEvS1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_.msgid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
    {PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_.msgid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional bool rst = 2;
    {PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_.rst_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::CSToRC::MsgID_internal_data_},
  }}, {{
  }},
};

::uint8_t* AddNoticeResp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.AddNoticeResp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional bool rst = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_rst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.AddNoticeResp)
  return target;
}

::size_t AddNoticeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.AddNoticeResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool rst = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AddNoticeResp::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddNoticeResp*>(&to_msg);
  auto& from = static_cast<const AddNoticeResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.AddNoticeResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rst_ = from._impl_.rst_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddNoticeResp::CopyFrom(const AddNoticeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.AddNoticeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AddNoticeResp::IsInitialized() const {
  return true;
}

void AddNoticeResp::InternalSwap(AddNoticeResp* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_.msgid_)
      + sizeof(AddNoticeResp::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(AddNoticeResp, _impl_.rst_)>(
          reinterpret_cast<char*>(&_impl_.rst_),
          reinterpret_cast<char*>(&other->_impl_.rst_));
}

::google::protobuf::Metadata AddNoticeResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[8]);
}
// ===================================================================

class DeleteNoticeResp::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteNoticeResp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_._has_bits_);
};

DeleteNoticeResp::DeleteNoticeResp(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSToRC.DeleteNoticeResp)
}
DeleteNoticeResp::DeleteNoticeResp(
    ::google::protobuf::Arena* arena, const DeleteNoticeResp& from)
    : DeleteNoticeResp(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE DeleteNoticeResp::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        msgid_{static_cast< ::CSToRC::MsgID >(33506)} {}

inline void DeleteNoticeResp::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.rst_ = {};
}
DeleteNoticeResp::~DeleteNoticeResp() {
  // @@protoc_insertion_point(destructor:CSToRC.DeleteNoticeResp)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeleteNoticeResp::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
DeleteNoticeResp::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_._cached_size_),
              false,
          },
          &DeleteNoticeResp::MergeImpl,
          &DeleteNoticeResp::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void DeleteNoticeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:CSToRC.DeleteNoticeResp)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.rst_ = false;
    _impl_.msgid_ = 33506;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeleteNoticeResp::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> DeleteNoticeResp::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeleteNoticeResp_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSToRC::DeleteNoticeResp>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bool rst = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DeleteNoticeResp, _impl_.rst_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_.rst_)}},
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
    {::_pbi::TcParser::FastEvS1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_.msgid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
    {PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_.msgid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional bool rst = 2;
    {PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_.rst_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::CSToRC::MsgID_internal_data_},
  }}, {{
  }},
};

::uint8_t* DeleteNoticeResp::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSToRC.DeleteNoticeResp)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional bool rst = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_rst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSToRC.DeleteNoticeResp)
  return target;
}

::size_t DeleteNoticeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSToRC.DeleteNoticeResp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool rst = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void DeleteNoticeResp::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeleteNoticeResp*>(&to_msg);
  auto& from = static_cast<const DeleteNoticeResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSToRC.DeleteNoticeResp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rst_ = from._impl_.rst_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteNoticeResp::CopyFrom(const DeleteNoticeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSToRC.DeleteNoticeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeleteNoticeResp::IsInitialized() const {
  return true;
}

void DeleteNoticeResp::InternalSwap(DeleteNoticeResp* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_.msgid_)
      + sizeof(DeleteNoticeResp::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(DeleteNoticeResp, _impl_.rst_)>(
          reinterpret_cast<char*>(&_impl_.rst_),
          reinterpret_cast<char*>(&other->_impl_.rst_));
}

::google::protobuf::Metadata DeleteNoticeResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_CSToRC_2eproto_getter,
                                   &descriptor_table_CSToRC_2eproto_once,
                                   file_level_metadata_CSToRC_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace CSToRC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_CSToRC_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
