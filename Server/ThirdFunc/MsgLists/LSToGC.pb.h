// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LSToGC.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_LSToGC_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_LSToGC_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_LSToGC_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_LSToGC_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_LSToGC_2eproto;
namespace LSToGC {
class LoginResult;
struct LoginResultDefaultTypeInternal;
extern LoginResultDefaultTypeInternal _LoginResult_default_instance_;
class ServerBSAddr;
struct ServerBSAddrDefaultTypeInternal;
extern ServerBSAddrDefaultTypeInternal _ServerBSAddr_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
}  // namespace LSToGC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace LSToGC {
enum MsgID : int {
  eMsgToGCFromLS_NotifyLoginResult = 512,
  eMsgToGCFromLS_NotifyServerBSAddr = 513,
};

bool MsgID_IsValid(int value);
extern const uint32_t MsgID_internal_data_[];
constexpr MsgID MsgID_MIN = static_cast<MsgID>(512);
constexpr MsgID MsgID_MAX = static_cast<MsgID>(513);
constexpr int MsgID_ARRAYSIZE = 513 + 1;
const ::google::protobuf::EnumDescriptor*
MsgID_descriptor();
template <typename T>
const std::string& MsgID_Name(T value) {
  static_assert(std::is_same<T, MsgID>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgID_Name().");
  return MsgID_Name(static_cast<MsgID>(value));
}
template <>
inline const std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgID_descriptor,
                                                 512, 513>(
      static_cast<int>(value));
}
inline bool MsgID_Parse(absl::string_view name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
      MsgID_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ServerInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LSToGC.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerInfo(const ServerInfo& from) : ServerInfo(nullptr, from) {}
  inline ServerInfo(ServerInfo&& from) noexcept
      : ServerInfo(nullptr, std::move(from)) {}
  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
        &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ServerInfo& a, ServerInfo& b) { a.Swap(&b); }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ServerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerInfo& from) { ServerInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "LSToGC.ServerInfo"; }

 protected:
  explicit ServerInfo(::google::protobuf::Arena* arena);
  ServerInfo(::google::protobuf::Arena* arena, const ServerInfo& from);
  ServerInfo(::google::protobuf::Arena* arena, ServerInfo&& from) noexcept
      : ServerInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerNameFieldNumber = 1,
    kServerAddrFieldNumber = 2,
    kServerPortFieldNumber = 3,
    kServerStateFieldNumber = 4,
  };
  // optional string ServerName = 1;
  bool has_servername() const;
  void clear_servername() ;
  const std::string& servername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_servername(Arg_&& arg, Args_... args);
  std::string* mutable_servername();
  PROTOBUF_NODISCARD std::string* release_servername();
  void set_allocated_servername(std::string* value);

  private:
  const std::string& _internal_servername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servername(
      const std::string& value);
  std::string* _internal_mutable_servername();

  public:
  // optional string ServerAddr = 2;
  bool has_serveraddr() const;
  void clear_serveraddr() ;
  const std::string& serveraddr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_serveraddr(Arg_&& arg, Args_... args);
  std::string* mutable_serveraddr();
  PROTOBUF_NODISCARD std::string* release_serveraddr();
  void set_allocated_serveraddr(std::string* value);

  private:
  const std::string& _internal_serveraddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serveraddr(
      const std::string& value);
  std::string* _internal_mutable_serveraddr();

  public:
  // optional int32 ServerPort = 3;
  bool has_serverport() const;
  void clear_serverport() ;
  ::int32_t serverport() const;
  void set_serverport(::int32_t value);

  private:
  ::int32_t _internal_serverport() const;
  void _internal_set_serverport(::int32_t value);

  public:
  // optional int32 ServerState = 4;
  bool has_serverstate() const;
  void clear_serverstate() ;
  ::int32_t serverstate() const;
  void set_serverstate(::int32_t value);

  private:
  ::int32_t _internal_serverstate() const;
  void _internal_set_serverstate(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:LSToGC.ServerInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr servername_;
    ::google::protobuf::internal::ArenaStringPtr serveraddr_;
    ::int32_t serverport_;
    ::int32_t serverstate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LSToGC_2eproto;
};
// -------------------------------------------------------------------

class LoginResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LSToGC.LoginResult) */ {
 public:
  inline LoginResult() : LoginResult(nullptr) {}
  ~LoginResult() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LoginResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline LoginResult(const LoginResult& from) : LoginResult(nullptr, from) {}
  inline LoginResult(LoginResult&& from) noexcept
      : LoginResult(nullptr, std::move(from)) {}
  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResult& operator=(LoginResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResult* internal_default_instance() {
    return reinterpret_cast<const LoginResult*>(
        &_LoginResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(LoginResult& a, LoginResult& b) { a.Swap(&b); }
  inline void Swap(LoginResult* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LoginResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LoginResult& from) { LoginResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoginResult* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "LSToGC.LoginResult"; }

 protected:
  explicit LoginResult(::google::protobuf::Arena* arena);
  LoginResult(::google::protobuf::Arena* arena, const LoginResult& from);
  LoginResult(::google::protobuf::Arena* arena, LoginResult&& from) noexcept
      : LoginResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // optional int32 result = 2;
  bool has_result() const;
  void clear_result() ;
  ::int32_t result() const;
  void set_result(::int32_t value);

  private:
  ::int32_t _internal_result() const;
  void _internal_set_result(::int32_t value);

  public:
  // optional .LSToGC.MsgID msgid = 1 [default = eMsgToGCFromLS_NotifyLoginResult];
  bool has_msgid() const;
  void clear_msgid() ;
  ::LSToGC::MsgID msgid() const;
  void set_msgid(::LSToGC::MsgID value);

  private:
  ::LSToGC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::LSToGC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:LSToGC.LoginResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t result_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LSToGC_2eproto;
};
// -------------------------------------------------------------------

class ServerBSAddr final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LSToGC.ServerBSAddr) */ {
 public:
  inline ServerBSAddr() : ServerBSAddr(nullptr) {}
  ~ServerBSAddr() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerBSAddr(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerBSAddr(const ServerBSAddr& from) : ServerBSAddr(nullptr, from) {}
  inline ServerBSAddr(ServerBSAddr&& from) noexcept
      : ServerBSAddr(nullptr, std::move(from)) {}
  inline ServerBSAddr& operator=(const ServerBSAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerBSAddr& operator=(ServerBSAddr&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerBSAddr& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerBSAddr* internal_default_instance() {
    return reinterpret_cast<const ServerBSAddr*>(
        &_ServerBSAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ServerBSAddr& a, ServerBSAddr& b) { a.Swap(&b); }
  inline void Swap(ServerBSAddr* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerBSAddr* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerBSAddr* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ServerBSAddr>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerBSAddr& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerBSAddr& from) { ServerBSAddr::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerBSAddr* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "LSToGC.ServerBSAddr"; }

 protected:
  explicit ServerBSAddr(::google::protobuf::Arena* arena);
  ServerBSAddr(::google::protobuf::Arena* arena, const ServerBSAddr& from);
  ServerBSAddr(::google::protobuf::Arena* arena, ServerBSAddr&& from) noexcept
      : ServerBSAddr(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerinfoFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // repeated .LSToGC.ServerInfo serverinfo = 2;
  int serverinfo_size() const;
  private:
  int _internal_serverinfo_size() const;

  public:
  void clear_serverinfo() ;
  ::LSToGC::ServerInfo* mutable_serverinfo(int index);
  ::google::protobuf::RepeatedPtrField<::LSToGC::ServerInfo>* mutable_serverinfo();

  private:
  const ::google::protobuf::RepeatedPtrField<::LSToGC::ServerInfo>& _internal_serverinfo() const;
  ::google::protobuf::RepeatedPtrField<::LSToGC::ServerInfo>* _internal_mutable_serverinfo();
  public:
  const ::LSToGC::ServerInfo& serverinfo(int index) const;
  ::LSToGC::ServerInfo* add_serverinfo();
  const ::google::protobuf::RepeatedPtrField<::LSToGC::ServerInfo>& serverinfo() const;
  // optional .LSToGC.MsgID msgid = 1 [default = eMsgToGCFromLS_NotifyServerBSAddr];
  bool has_msgid() const;
  void clear_msgid() ;
  ::LSToGC::MsgID msgid() const;
  void set_msgid(::LSToGC::MsgID value);

  private:
  ::LSToGC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::LSToGC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:LSToGC.ServerBSAddr)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::LSToGC::ServerInfo > serverinfo_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LSToGC_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LoginResult

// optional .LSToGC.MsgID msgid = 1 [default = eMsgToGCFromLS_NotifyLoginResult];
inline bool LoginResult::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LoginResult::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 512;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::LSToGC::MsgID LoginResult::msgid() const {
  // @@protoc_insertion_point(field_get:LSToGC.LoginResult.msgid)
  return _internal_msgid();
}
inline void LoginResult::set_msgid(::LSToGC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:LSToGC.LoginResult.msgid)
}
inline ::LSToGC::MsgID LoginResult::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::LSToGC::MsgID>(_impl_.msgid_);
}
inline void LoginResult::_internal_set_msgid(::LSToGC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::LSToGC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional int32 result = 2;
inline bool LoginResult::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LoginResult::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t LoginResult::result() const {
  // @@protoc_insertion_point(field_get:LSToGC.LoginResult.result)
  return _internal_result();
}
inline void LoginResult::set_result(::int32_t value) {
  _internal_set_result(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:LSToGC.LoginResult.result)
}
inline ::int32_t LoginResult::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.result_;
}
inline void LoginResult::_internal_set_result(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_ = value;
}

// -------------------------------------------------------------------

// ServerInfo

// optional string ServerName = 1;
inline bool ServerInfo::has_servername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerInfo::clear_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.servername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerInfo::servername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LSToGC.ServerInfo.ServerName)
  return _internal_servername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_servername(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LSToGC.ServerInfo.ServerName)
}
inline std::string* ServerInfo::mutable_servername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_servername();
  // @@protoc_insertion_point(field_mutable:LSToGC.ServerInfo.ServerName)
  return _s;
}
inline const std::string& ServerInfo::_internal_servername() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.servername_.Get();
}
inline void ServerInfo::_internal_set_servername(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servername_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.servername_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:LSToGC.ServerInfo.ServerName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.servername_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.servername_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ServerInfo::set_allocated_servername(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.servername_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.servername_.IsDefault()) {
          _impl_.servername_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSToGC.ServerInfo.ServerName)
}

// optional string ServerAddr = 2;
inline bool ServerInfo::has_serveraddr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ServerInfo::clear_serveraddr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serveraddr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServerInfo::serveraddr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LSToGC.ServerInfo.ServerAddr)
  return _internal_serveraddr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerInfo::set_serveraddr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.serveraddr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LSToGC.ServerInfo.ServerAddr)
}
inline std::string* ServerInfo::mutable_serveraddr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_serveraddr();
  // @@protoc_insertion_point(field_mutable:LSToGC.ServerInfo.ServerAddr)
  return _s;
}
inline const std::string& ServerInfo::_internal_serveraddr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serveraddr_.Get();
}
inline void ServerInfo::_internal_set_serveraddr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.serveraddr_.Set(value, GetArena());
}
inline std::string* ServerInfo::_internal_mutable_serveraddr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.serveraddr_.Mutable( GetArena());
}
inline std::string* ServerInfo::release_serveraddr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:LSToGC.ServerInfo.ServerAddr)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.serveraddr_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serveraddr_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ServerInfo::set_allocated_serveraddr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.serveraddr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.serveraddr_.IsDefault()) {
          _impl_.serveraddr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSToGC.ServerInfo.ServerAddr)
}

// optional int32 ServerPort = 3;
inline bool ServerInfo::has_serverport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ServerInfo::clear_serverport() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverport_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ServerInfo::serverport() const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerInfo.ServerPort)
  return _internal_serverport();
}
inline void ServerInfo::set_serverport(::int32_t value) {
  _internal_set_serverport(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:LSToGC.ServerInfo.ServerPort)
}
inline ::int32_t ServerInfo::_internal_serverport() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverport_;
}
inline void ServerInfo::_internal_set_serverport(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverport_ = value;
}

// optional int32 ServerState = 4;
inline bool ServerInfo::has_serverstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ServerInfo::clear_serverstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverstate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ServerInfo::serverstate() const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerInfo.ServerState)
  return _internal_serverstate();
}
inline void ServerInfo::set_serverstate(::int32_t value) {
  _internal_set_serverstate(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:LSToGC.ServerInfo.ServerState)
}
inline ::int32_t ServerInfo::_internal_serverstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverstate_;
}
inline void ServerInfo::_internal_set_serverstate(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverstate_ = value;
}

// -------------------------------------------------------------------

// ServerBSAddr

// optional .LSToGC.MsgID msgid = 1 [default = eMsgToGCFromLS_NotifyServerBSAddr];
inline bool ServerBSAddr::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerBSAddr::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 513;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::LSToGC::MsgID ServerBSAddr::msgid() const {
  // @@protoc_insertion_point(field_get:LSToGC.ServerBSAddr.msgid)
  return _internal_msgid();
}
inline void ServerBSAddr::set_msgid(::LSToGC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:LSToGC.ServerBSAddr.msgid)
}
inline ::LSToGC::MsgID ServerBSAddr::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::LSToGC::MsgID>(_impl_.msgid_);
}
inline void ServerBSAddr::_internal_set_msgid(::LSToGC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::LSToGC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// repeated .LSToGC.ServerInfo serverinfo = 2;
inline int ServerBSAddr::_internal_serverinfo_size() const {
  return _internal_serverinfo().size();
}
inline int ServerBSAddr::serverinfo_size() const {
  return _internal_serverinfo_size();
}
inline void ServerBSAddr::clear_serverinfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverinfo_.Clear();
}
inline ::LSToGC::ServerInfo* ServerBSAddr::mutable_serverinfo(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:LSToGC.ServerBSAddr.serverinfo)
  return _internal_mutable_serverinfo()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::LSToGC::ServerInfo>* ServerBSAddr::mutable_serverinfo()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:LSToGC.ServerBSAddr.serverinfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_serverinfo();
}
inline const ::LSToGC::ServerInfo& ServerBSAddr::serverinfo(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LSToGC.ServerBSAddr.serverinfo)
  return _internal_serverinfo().Get(index);
}
inline ::LSToGC::ServerInfo* ServerBSAddr::add_serverinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::LSToGC::ServerInfo* _add = _internal_mutable_serverinfo()->Add();
  // @@protoc_insertion_point(field_add:LSToGC.ServerBSAddr.serverinfo)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::LSToGC::ServerInfo>& ServerBSAddr::serverinfo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:LSToGC.ServerBSAddr.serverinfo)
  return _internal_serverinfo();
}
inline const ::google::protobuf::RepeatedPtrField<::LSToGC::ServerInfo>&
ServerBSAddr::_internal_serverinfo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverinfo_;
}
inline ::google::protobuf::RepeatedPtrField<::LSToGC::ServerInfo>*
ServerBSAddr::_internal_mutable_serverinfo() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.serverinfo_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSToGC


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::LSToGC::MsgID> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::LSToGC::MsgID>() {
  return ::LSToGC::MsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_LSToGC_2eproto_2epb_2eh
