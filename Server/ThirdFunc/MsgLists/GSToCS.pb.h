// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSToCS.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_GSToCS_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_GSToCS_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_GSToCS_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_GSToCS_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_GSToCS_2eproto;
namespace GSToCS {
class AskRegiste;
struct AskRegisteDefaultTypeInternal;
extern AskRegisteDefaultTypeInternal _AskRegiste_default_instance_;
class Asking;
struct AskingDefaultTypeInternal;
extern AskingDefaultTypeInternal _Asking_default_instance_;
class ReportGCMsg;
struct ReportGCMsgDefaultTypeInternal;
extern ReportGCMsgDefaultTypeInternal _ReportGCMsg_default_instance_;
class ReportGetSomeMsg;
struct ReportGetSomeMsgDefaultTypeInternal;
extern ReportGetSomeMsgDefaultTypeInternal _ReportGetSomeMsg_default_instance_;
class UserOffLine;
struct UserOffLineDefaultTypeInternal;
extern UserOffLineDefaultTypeInternal _UserOffLine_default_instance_;
}  // namespace GSToCS
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace GSToCS {
enum MsgID : int {
  eMsgToCSFromGS_Begin = 8192,
  eMsgToCSFromGS_AskPing = 8193,
  eMsgToCSFromGS_AskRegiste = 8194,
  eMsgToCSFromGS_ReportGCMsg = 8195,
  eMsgToCSFromGS_ReportGetSomeMsg = 8196,
  eMsgToCSFromGS_UserOffLine = 8197,
  eMsgToCSFromGS_End = 8200,
};

bool MsgID_IsValid(int value);
extern const uint32_t MsgID_internal_data_[];
constexpr MsgID MsgID_MIN = static_cast<MsgID>(8192);
constexpr MsgID MsgID_MAX = static_cast<MsgID>(8200);
constexpr int MsgID_ARRAYSIZE = 8200 + 1;
const ::google::protobuf::EnumDescriptor*
MsgID_descriptor();
template <typename T>
const std::string& MsgID_Name(T value) {
  static_assert(std::is_same<T, MsgID>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgID_Name().");
  return MsgID_Name(static_cast<MsgID>(value));
}
template <>
inline const std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgID_descriptor,
                                                 8192, 8200>(
      static_cast<int>(value));
}
inline bool MsgID_Parse(absl::string_view name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
      MsgID_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserOffLine final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GSToCS.UserOffLine) */ {
 public:
  inline UserOffLine() : UserOffLine(nullptr) {}
  ~UserOffLine() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserOffLine(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserOffLine(const UserOffLine& from) : UserOffLine(nullptr, from) {}
  inline UserOffLine(UserOffLine&& from) noexcept
      : UserOffLine(nullptr, std::move(from)) {}
  inline UserOffLine& operator=(const UserOffLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOffLine& operator=(UserOffLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserOffLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserOffLine* internal_default_instance() {
    return reinterpret_cast<const UserOffLine*>(
        &_UserOffLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UserOffLine& a, UserOffLine& b) { a.Swap(&b); }
  inline void Swap(UserOffLine* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOffLine* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserOffLine* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserOffLine>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserOffLine& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserOffLine& from) { UserOffLine::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserOffLine* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GSToCS.UserOffLine"; }

 protected:
  explicit UserOffLine(::google::protobuf::Arena* arena);
  UserOffLine(::google::protobuf::Arena* arena, const UserOffLine& from);
  UserOffLine(::google::protobuf::Arena* arena, UserOffLine&& from) noexcept
      : UserOffLine(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernetidFieldNumber = 2,
    kMgsidFieldNumber = 1,
  };
  // optional int32 usernetid = 2;
  bool has_usernetid() const;
  void clear_usernetid() ;
  ::int32_t usernetid() const;
  void set_usernetid(::int32_t value);

  private:
  ::int32_t _internal_usernetid() const;
  void _internal_set_usernetid(::int32_t value);

  public:
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_UserOffLine];
  bool has_mgsid() const;
  void clear_mgsid() ;
  ::GSToCS::MsgID mgsid() const;
  void set_mgsid(::GSToCS::MsgID value);

  private:
  ::GSToCS::MsgID _internal_mgsid() const;
  void _internal_set_mgsid(::GSToCS::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:GSToCS.UserOffLine)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t usernetid_;
    int mgsid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSToCS_2eproto;
};
// -------------------------------------------------------------------

class ReportGetSomeMsg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GSToCS.ReportGetSomeMsg) */ {
 public:
  inline ReportGetSomeMsg() : ReportGetSomeMsg(nullptr) {}
  ~ReportGetSomeMsg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReportGetSomeMsg(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReportGetSomeMsg(const ReportGetSomeMsg& from) : ReportGetSomeMsg(nullptr, from) {}
  inline ReportGetSomeMsg(ReportGetSomeMsg&& from) noexcept
      : ReportGetSomeMsg(nullptr, std::move(from)) {}
  inline ReportGetSomeMsg& operator=(const ReportGetSomeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportGetSomeMsg& operator=(ReportGetSomeMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportGetSomeMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportGetSomeMsg* internal_default_instance() {
    return reinterpret_cast<const ReportGetSomeMsg*>(
        &_ReportGetSomeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ReportGetSomeMsg& a, ReportGetSomeMsg& b) { a.Swap(&b); }
  inline void Swap(ReportGetSomeMsg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportGetSomeMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportGetSomeMsg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ReportGetSomeMsg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportGetSomeMsg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReportGetSomeMsg& from) { ReportGetSomeMsg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReportGetSomeMsg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GSToCS.ReportGetSomeMsg"; }

 protected:
  explicit ReportGetSomeMsg(::google::protobuf::Arena* arena);
  ReportGetSomeMsg(::google::protobuf::Arena* arena, const ReportGetSomeMsg& from);
  ReportGetSomeMsg(::google::protobuf::Arena* arena, ReportGetSomeMsg&& from) noexcept
      : ReportGetSomeMsg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOthervalFieldNumber = 3,
    kGotmsgidFieldNumber = 2,
    kMgsidFieldNumber = 1,
  };
  // optional uint64 otherval = 3;
  bool has_otherval() const;
  void clear_otherval() ;
  ::uint64_t otherval() const;
  void set_otherval(::uint64_t value);

  private:
  ::uint64_t _internal_otherval() const;
  void _internal_set_otherval(::uint64_t value);

  public:
  // optional int32 gotmsgid = 2;
  bool has_gotmsgid() const;
  void clear_gotmsgid() ;
  ::int32_t gotmsgid() const;
  void set_gotmsgid(::int32_t value);

  private:
  ::int32_t _internal_gotmsgid() const;
  void _internal_set_gotmsgid(::int32_t value);

  public:
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_ReportGetSomeMsg];
  bool has_mgsid() const;
  void clear_mgsid() ;
  ::GSToCS::MsgID mgsid() const;
  void set_mgsid(::GSToCS::MsgID value);

  private:
  ::GSToCS::MsgID _internal_mgsid() const;
  void _internal_set_mgsid(::GSToCS::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:GSToCS.ReportGetSomeMsg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t otherval_;
    ::int32_t gotmsgid_;
    int mgsid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSToCS_2eproto;
};
// -------------------------------------------------------------------

class ReportGCMsg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GSToCS.ReportGCMsg) */ {
 public:
  inline ReportGCMsg() : ReportGCMsg(nullptr) {}
  ~ReportGCMsg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReportGCMsg(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReportGCMsg(const ReportGCMsg& from) : ReportGCMsg(nullptr, from) {}
  inline ReportGCMsg(ReportGCMsg&& from) noexcept
      : ReportGCMsg(nullptr, std::move(from)) {}
  inline ReportGCMsg& operator=(const ReportGCMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportGCMsg& operator=(ReportGCMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportGCMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportGCMsg* internal_default_instance() {
    return reinterpret_cast<const ReportGCMsg*>(
        &_ReportGCMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ReportGCMsg& a, ReportGCMsg& b) { a.Swap(&b); }
  inline void Swap(ReportGCMsg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportGCMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportGCMsg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ReportGCMsg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportGCMsg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReportGCMsg& from) { ReportGCMsg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReportGCMsg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GSToCS.ReportGCMsg"; }

 protected:
  explicit ReportGCMsg(::google::protobuf::Arena* arena);
  ReportGCMsg(::google::protobuf::Arena* arena, const ReportGCMsg& from);
  ReportGCMsg(::google::protobuf::Arena* arena, ReportGCMsg&& from) noexcept
      : ReportGCMsg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOthermsgFieldNumber = 4,
    kNsidFieldNumber = 2,
    kOthermsgidFieldNumber = 3,
    kMsgidFieldNumber = 1,
  };
  // optional bytes othermsg = 4;
  bool has_othermsg() const;
  void clear_othermsg() ;
  const std::string& othermsg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_othermsg(Arg_&& arg, Args_... args);
  std::string* mutable_othermsg();
  PROTOBUF_NODISCARD std::string* release_othermsg();
  void set_allocated_othermsg(std::string* value);

  private:
  const std::string& _internal_othermsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_othermsg(
      const std::string& value);
  std::string* _internal_mutable_othermsg();

  public:
  // optional int32 nsid = 2;
  bool has_nsid() const;
  void clear_nsid() ;
  ::int32_t nsid() const;
  void set_nsid(::int32_t value);

  private:
  ::int32_t _internal_nsid() const;
  void _internal_set_nsid(::int32_t value);

  public:
  // optional int32 othermsgid = 3;
  bool has_othermsgid() const;
  void clear_othermsgid() ;
  ::int32_t othermsgid() const;
  void set_othermsgid(::int32_t value);

  private:
  ::int32_t _internal_othermsgid() const;
  void _internal_set_othermsgid(::int32_t value);

  public:
  // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_ReportGCMsg];
  bool has_msgid() const;
  void clear_msgid() ;
  ::GSToCS::MsgID msgid() const;
  void set_msgid(::GSToCS::MsgID value);

  private:
  ::GSToCS::MsgID _internal_msgid() const;
  void _internal_set_msgid(::GSToCS::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:GSToCS.ReportGCMsg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr othermsg_;
    ::int32_t nsid_;
    ::int32_t othermsgid_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSToCS_2eproto;
};
// -------------------------------------------------------------------

class Asking final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GSToCS.Asking) */ {
 public:
  inline Asking() : Asking(nullptr) {}
  ~Asking() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Asking(
      ::google::protobuf::internal::ConstantInitialized);

  inline Asking(const Asking& from) : Asking(nullptr, from) {}
  inline Asking(Asking&& from) noexcept
      : Asking(nullptr, std::move(from)) {}
  inline Asking& operator=(const Asking& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asking& operator=(Asking&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Asking& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asking* internal_default_instance() {
    return reinterpret_cast<const Asking*>(
        &_Asking_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Asking& a, Asking& b) { a.Swap(&b); }
  inline void Swap(Asking* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asking* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Asking* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Asking>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Asking& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Asking& from) { Asking::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Asking* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GSToCS.Asking"; }

 protected:
  explicit Asking(::google::protobuf::Arena* arena);
  Asking(::google::protobuf::Arena* arena, const Asking& from);
  Asking(::google::protobuf::Arena* arena, Asking&& from) noexcept
      : Asking(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeFieldNumber = 2,
    kMgsidFieldNumber = 1,
  };
  // optional int64 time = 2;
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_AskPing];
  bool has_mgsid() const;
  void clear_mgsid() ;
  ::GSToCS::MsgID mgsid() const;
  void set_mgsid(::GSToCS::MsgID value);

  private:
  ::GSToCS::MsgID _internal_mgsid() const;
  void _internal_set_mgsid(::GSToCS::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:GSToCS.Asking)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t time_;
    int mgsid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSToCS_2eproto;
};
// -------------------------------------------------------------------

class AskRegiste final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GSToCS.AskRegiste) */ {
 public:
  inline AskRegiste() : AskRegiste(nullptr) {}
  ~AskRegiste() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AskRegiste(
      ::google::protobuf::internal::ConstantInitialized);

  inline AskRegiste(const AskRegiste& from) : AskRegiste(nullptr, from) {}
  inline AskRegiste(AskRegiste&& from) noexcept
      : AskRegiste(nullptr, std::move(from)) {}
  inline AskRegiste& operator=(const AskRegiste& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskRegiste& operator=(AskRegiste&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AskRegiste& default_instance() {
    return *internal_default_instance();
  }
  static inline const AskRegiste* internal_default_instance() {
    return reinterpret_cast<const AskRegiste*>(
        &_AskRegiste_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AskRegiste& a, AskRegiste& b) { a.Swap(&b); }
  inline void Swap(AskRegiste* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AskRegiste* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AskRegiste* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AskRegiste>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AskRegiste& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AskRegiste& from) { AskRegiste::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AskRegiste* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GSToCS.AskRegiste"; }

 protected:
  explicit AskRegiste(::google::protobuf::Arena* arena);
  AskRegiste(::google::protobuf::Arena* arena, const AskRegiste& from);
  AskRegiste(::google::protobuf::Arena* arena, AskRegiste&& from) noexcept
      : AskRegiste(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 3,
    kUsepwdFieldNumber = 5,
    kGsidFieldNumber = 2,
    kPortFieldNumber = 4,
    kMsgidFieldNumber = 1,
  };
  // optional string ip = 3;
  bool has_ip() const;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // optional string usepwd = 5;
  bool has_usepwd() const;
  void clear_usepwd() ;
  const std::string& usepwd() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_usepwd(Arg_&& arg, Args_... args);
  std::string* mutable_usepwd();
  PROTOBUF_NODISCARD std::string* release_usepwd();
  void set_allocated_usepwd(std::string* value);

  private:
  const std::string& _internal_usepwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usepwd(
      const std::string& value);
  std::string* _internal_mutable_usepwd();

  public:
  // optional int32 gsid = 2;
  bool has_gsid() const;
  void clear_gsid() ;
  ::int32_t gsid() const;
  void set_gsid(::int32_t value);

  private:
  ::int32_t _internal_gsid() const;
  void _internal_set_gsid(::int32_t value);

  public:
  // optional int32 port = 4;
  bool has_port() const;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_AskRegiste];
  bool has_msgid() const;
  void clear_msgid() ;
  ::GSToCS::MsgID msgid() const;
  void set_msgid(::GSToCS::MsgID value);

  private:
  ::GSToCS::MsgID _internal_msgid() const;
  void _internal_set_msgid(::GSToCS::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:GSToCS.AskRegiste)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr usepwd_;
    ::int32_t gsid_;
    ::int32_t port_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSToCS_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserOffLine

// optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_UserOffLine];
inline bool UserOffLine::has_mgsid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UserOffLine::clear_mgsid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mgsid_ = 8197;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::GSToCS::MsgID UserOffLine::mgsid() const {
  // @@protoc_insertion_point(field_get:GSToCS.UserOffLine.mgsid)
  return _internal_mgsid();
}
inline void UserOffLine::set_mgsid(::GSToCS::MsgID value) {
  _internal_set_mgsid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GSToCS.UserOffLine.mgsid)
}
inline ::GSToCS::MsgID UserOffLine::_internal_mgsid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::GSToCS::MsgID>(_impl_.mgsid_);
}
inline void UserOffLine::_internal_set_mgsid(::GSToCS::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::GSToCS::MsgID_IsValid(value));
  _impl_.mgsid_ = value;
}

// optional int32 usernetid = 2;
inline bool UserOffLine::has_usernetid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserOffLine::clear_usernetid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.usernetid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t UserOffLine::usernetid() const {
  // @@protoc_insertion_point(field_get:GSToCS.UserOffLine.usernetid)
  return _internal_usernetid();
}
inline void UserOffLine::set_usernetid(::int32_t value) {
  _internal_set_usernetid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GSToCS.UserOffLine.usernetid)
}
inline ::int32_t UserOffLine::_internal_usernetid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.usernetid_;
}
inline void UserOffLine::_internal_set_usernetid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.usernetid_ = value;
}

// -------------------------------------------------------------------

// Asking

// optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_AskPing];
inline bool Asking::has_mgsid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Asking::clear_mgsid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mgsid_ = 8193;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::GSToCS::MsgID Asking::mgsid() const {
  // @@protoc_insertion_point(field_get:GSToCS.Asking.mgsid)
  return _internal_mgsid();
}
inline void Asking::set_mgsid(::GSToCS::MsgID value) {
  _internal_set_mgsid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GSToCS.Asking.mgsid)
}
inline ::GSToCS::MsgID Asking::_internal_mgsid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::GSToCS::MsgID>(_impl_.mgsid_);
}
inline void Asking::_internal_set_mgsid(::GSToCS::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::GSToCS::MsgID_IsValid(value));
  _impl_.mgsid_ = value;
}

// optional int64 time = 2;
inline bool Asking::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Asking::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Asking::time() const {
  // @@protoc_insertion_point(field_get:GSToCS.Asking.time)
  return _internal_time();
}
inline void Asking::set_time(::int64_t value) {
  _internal_set_time(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GSToCS.Asking.time)
}
inline ::int64_t Asking::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void Asking::_internal_set_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// ReportGetSomeMsg

// optional .GSToCS.MsgID mgsid = 1 [default = eMsgToCSFromGS_ReportGetSomeMsg];
inline bool ReportGetSomeMsg::has_mgsid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ReportGetSomeMsg::clear_mgsid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mgsid_ = 8196;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::GSToCS::MsgID ReportGetSomeMsg::mgsid() const {
  // @@protoc_insertion_point(field_get:GSToCS.ReportGetSomeMsg.mgsid)
  return _internal_mgsid();
}
inline void ReportGetSomeMsg::set_mgsid(::GSToCS::MsgID value) {
  _internal_set_mgsid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GSToCS.ReportGetSomeMsg.mgsid)
}
inline ::GSToCS::MsgID ReportGetSomeMsg::_internal_mgsid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::GSToCS::MsgID>(_impl_.mgsid_);
}
inline void ReportGetSomeMsg::_internal_set_mgsid(::GSToCS::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::GSToCS::MsgID_IsValid(value));
  _impl_.mgsid_ = value;
}

// optional int32 gotmsgid = 2;
inline bool ReportGetSomeMsg::has_gotmsgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ReportGetSomeMsg::clear_gotmsgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gotmsgid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ReportGetSomeMsg::gotmsgid() const {
  // @@protoc_insertion_point(field_get:GSToCS.ReportGetSomeMsg.gotmsgid)
  return _internal_gotmsgid();
}
inline void ReportGetSomeMsg::set_gotmsgid(::int32_t value) {
  _internal_set_gotmsgid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GSToCS.ReportGetSomeMsg.gotmsgid)
}
inline ::int32_t ReportGetSomeMsg::_internal_gotmsgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gotmsgid_;
}
inline void ReportGetSomeMsg::_internal_set_gotmsgid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gotmsgid_ = value;
}

// optional uint64 otherval = 3;
inline bool ReportGetSomeMsg::has_otherval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReportGetSomeMsg::clear_otherval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otherval_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t ReportGetSomeMsg::otherval() const {
  // @@protoc_insertion_point(field_get:GSToCS.ReportGetSomeMsg.otherval)
  return _internal_otherval();
}
inline void ReportGetSomeMsg::set_otherval(::uint64_t value) {
  _internal_set_otherval(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GSToCS.ReportGetSomeMsg.otherval)
}
inline ::uint64_t ReportGetSomeMsg::_internal_otherval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.otherval_;
}
inline void ReportGetSomeMsg::_internal_set_otherval(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.otherval_ = value;
}

// -------------------------------------------------------------------

// AskRegiste

// optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_AskRegiste];
inline bool AskRegiste::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AskRegiste::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 8194;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::GSToCS::MsgID AskRegiste::msgid() const {
  // @@protoc_insertion_point(field_get:GSToCS.AskRegiste.msgid)
  return _internal_msgid();
}
inline void AskRegiste::set_msgid(::GSToCS::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GSToCS.AskRegiste.msgid)
}
inline ::GSToCS::MsgID AskRegiste::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::GSToCS::MsgID>(_impl_.msgid_);
}
inline void AskRegiste::_internal_set_msgid(::GSToCS::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::GSToCS::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional int32 gsid = 2;
inline bool AskRegiste::has_gsid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AskRegiste::clear_gsid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gsid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AskRegiste::gsid() const {
  // @@protoc_insertion_point(field_get:GSToCS.AskRegiste.gsid)
  return _internal_gsid();
}
inline void AskRegiste::set_gsid(::int32_t value) {
  _internal_set_gsid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GSToCS.AskRegiste.gsid)
}
inline ::int32_t AskRegiste::_internal_gsid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gsid_;
}
inline void AskRegiste::_internal_set_gsid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gsid_ = value;
}

// optional string ip = 3;
inline bool AskRegiste::has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AskRegiste::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AskRegiste::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GSToCS.AskRegiste.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AskRegiste::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GSToCS.AskRegiste.ip)
}
inline std::string* AskRegiste::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:GSToCS.AskRegiste.ip)
  return _s;
}
inline const std::string& AskRegiste::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void AskRegiste::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* AskRegiste::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* AskRegiste::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:GSToCS.AskRegiste.ip)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.ip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AskRegiste::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GSToCS.AskRegiste.ip)
}

// optional int32 port = 4;
inline bool AskRegiste::has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AskRegiste::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t AskRegiste::port() const {
  // @@protoc_insertion_point(field_get:GSToCS.AskRegiste.port)
  return _internal_port();
}
inline void AskRegiste::set_port(::int32_t value) {
  _internal_set_port(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GSToCS.AskRegiste.port)
}
inline ::int32_t AskRegiste::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void AskRegiste::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = value;
}

// optional string usepwd = 5;
inline bool AskRegiste::has_usepwd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AskRegiste::clear_usepwd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.usepwd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AskRegiste::usepwd() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GSToCS.AskRegiste.usepwd)
  return _internal_usepwd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AskRegiste::set_usepwd(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.usepwd_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GSToCS.AskRegiste.usepwd)
}
inline std::string* AskRegiste::mutable_usepwd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_usepwd();
  // @@protoc_insertion_point(field_mutable:GSToCS.AskRegiste.usepwd)
  return _s;
}
inline const std::string& AskRegiste::_internal_usepwd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.usepwd_.Get();
}
inline void AskRegiste::_internal_set_usepwd(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.usepwd_.Set(value, GetArena());
}
inline std::string* AskRegiste::_internal_mutable_usepwd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.usepwd_.Mutable( GetArena());
}
inline std::string* AskRegiste::release_usepwd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:GSToCS.AskRegiste.usepwd)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.usepwd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usepwd_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AskRegiste::set_allocated_usepwd(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.usepwd_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.usepwd_.IsDefault()) {
          _impl_.usepwd_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GSToCS.AskRegiste.usepwd)
}

// -------------------------------------------------------------------

// ReportGCMsg

// optional .GSToCS.MsgID msgid = 1 [default = eMsgToCSFromGS_ReportGCMsg];
inline bool ReportGCMsg::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ReportGCMsg::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 8195;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::GSToCS::MsgID ReportGCMsg::msgid() const {
  // @@protoc_insertion_point(field_get:GSToCS.ReportGCMsg.msgid)
  return _internal_msgid();
}
inline void ReportGCMsg::set_msgid(::GSToCS::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GSToCS.ReportGCMsg.msgid)
}
inline ::GSToCS::MsgID ReportGCMsg::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::GSToCS::MsgID>(_impl_.msgid_);
}
inline void ReportGCMsg::_internal_set_msgid(::GSToCS::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::GSToCS::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional int32 nsid = 2;
inline bool ReportGCMsg::has_nsid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ReportGCMsg::clear_nsid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nsid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ReportGCMsg::nsid() const {
  // @@protoc_insertion_point(field_get:GSToCS.ReportGCMsg.nsid)
  return _internal_nsid();
}
inline void ReportGCMsg::set_nsid(::int32_t value) {
  _internal_set_nsid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GSToCS.ReportGCMsg.nsid)
}
inline ::int32_t ReportGCMsg::_internal_nsid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nsid_;
}
inline void ReportGCMsg::_internal_set_nsid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nsid_ = value;
}

// optional int32 othermsgid = 3;
inline bool ReportGCMsg::has_othermsgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ReportGCMsg::clear_othermsgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.othermsgid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ReportGCMsg::othermsgid() const {
  // @@protoc_insertion_point(field_get:GSToCS.ReportGCMsg.othermsgid)
  return _internal_othermsgid();
}
inline void ReportGCMsg::set_othermsgid(::int32_t value) {
  _internal_set_othermsgid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GSToCS.ReportGCMsg.othermsgid)
}
inline ::int32_t ReportGCMsg::_internal_othermsgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.othermsgid_;
}
inline void ReportGCMsg::_internal_set_othermsgid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.othermsgid_ = value;
}

// optional bytes othermsg = 4;
inline bool ReportGCMsg::has_othermsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReportGCMsg::clear_othermsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.othermsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReportGCMsg::othermsg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GSToCS.ReportGCMsg.othermsg)
  return _internal_othermsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReportGCMsg::set_othermsg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.othermsg_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GSToCS.ReportGCMsg.othermsg)
}
inline std::string* ReportGCMsg::mutable_othermsg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_othermsg();
  // @@protoc_insertion_point(field_mutable:GSToCS.ReportGCMsg.othermsg)
  return _s;
}
inline const std::string& ReportGCMsg::_internal_othermsg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.othermsg_.Get();
}
inline void ReportGCMsg::_internal_set_othermsg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.othermsg_.Set(value, GetArena());
}
inline std::string* ReportGCMsg::_internal_mutable_othermsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.othermsg_.Mutable( GetArena());
}
inline std::string* ReportGCMsg::release_othermsg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:GSToCS.ReportGCMsg.othermsg)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.othermsg_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.othermsg_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ReportGCMsg::set_allocated_othermsg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.othermsg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.othermsg_.IsDefault()) {
          _impl_.othermsg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GSToCS.ReportGCMsg.othermsg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace GSToCS


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::GSToCS::MsgID> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::GSToCS::MsgID>() {
  return ::GSToCS::MsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_GSToCS_2eproto_2epb_2eh
