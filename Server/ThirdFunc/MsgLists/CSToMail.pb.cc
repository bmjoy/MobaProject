// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSToMail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSToMail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UserMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMailRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMailRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSToMail_2eproto() {
  protobuf_AddDesc_CSToMail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSToMail.proto");
  GOOGLE_CHECK(file != NULL);
  UserMailReq_descriptor_ = file->message_type(0);
  static const int UserMailReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailReq, mgsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailReq, name_),
  };
  UserMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMailReq_descriptor_,
      UserMailReq::default_instance_,
      UserMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMailReq));
  UserMailRes_descriptor_ = file->message_type(1);
  static const int UserMailRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailRes, mgsid_),
  };
  UserMailRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMailRes_descriptor_,
      UserMailRes::default_instance_,
      UserMailRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMailRes));
  MsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSToMail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMailReq_descriptor_, &UserMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMailRes_descriptor_, &UserMailRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSToMail_2eproto() {
  delete UserMailReq::default_instance_;
  delete UserMailReq_reflection_;
  delete UserMailRes::default_instance_;
  delete UserMailRes_reflection_;
}

void protobuf_AddDesc_CSToMail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CSToMail.proto\"O\n\013UserMailReq\0222\n\005mgsid"
    "\030\001 \001(\0162\006.MsgID:\033eMsg_AskNickNameMailList"
    "Req\022\014\n\004name\030\002 \001(\t\"A\n\013UserMailRes\0222\n\005mgsi"
    "d\030\001 \001(\0162\006.MsgID:\033eMsg_AskNickNameMailLis"
    "tRes*e\n\005MsgID\022!\n\033eMsg_AskNickNameMailLis"
    "tRes\020\260\352\001\022!\n\033eMsg_AskNickNameMailListReq\020"
    "\261\352\001\022\026\n\020eMsg_AskMailInfo\020\262\352\001", 267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSToMail.proto", &protobuf_RegisterTypes);
  UserMailReq::default_instance_ = new UserMailReq();
  UserMailRes::default_instance_ = new UserMailRes();
  UserMailReq::default_instance_->InitAsDefaultInstance();
  UserMailRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSToMail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSToMail_2eproto {
  StaticDescriptorInitializer_CSToMail_2eproto() {
    protobuf_AddDesc_CSToMail_2eproto();
  }
} static_descriptor_initializer_CSToMail_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgID_descriptor_;
}
bool MsgID_IsValid(int value) {
  switch(value) {
    case 30000:
    case 30001:
    case 30002:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserMailReq::kMgsidFieldNumber;
const int UserMailReq::kNameFieldNumber;
#endif  // !_MSC_VER

UserMailReq::UserMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserMailReq)
}

void UserMailReq::InitAsDefaultInstance() {
}

UserMailReq::UserMailReq(const UserMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserMailReq)
}

void UserMailReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mgsid_ = 30001;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMailReq::~UserMailReq() {
  // @@protoc_insertion_point(destructor:UserMailReq)
  SharedDtor();
}

void UserMailReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UserMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMailReq_descriptor_;
}

const UserMailReq& UserMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToMail_2eproto();
  return *default_instance_;
}

UserMailReq* UserMailReq::default_instance_ = NULL;

UserMailReq* UserMailReq::New() const {
  return new UserMailReq;
}

void UserMailReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mgsid_ = 30001;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserMailReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgID mgsid = 1 [default = eMsg_AskNickNameMailListReq];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserMailReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserMailReq)
  return false;
#undef DO_
}

void UserMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserMailReq)
  // optional .MsgID mgsid = 1 [default = eMsg_AskNickNameMailListReq];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserMailReq)
}

::google::protobuf::uint8* UserMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserMailReq)
  // optional .MsgID mgsid = 1 [default = eMsg_AskNickNameMailListReq];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserMailReq)
  return target;
}

int UserMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgID mgsid = 1 [default = eMsg_AskNickNameMailListReq];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMailReq::MergeFrom(const UserMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMailReq::CopyFrom(const UserMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMailReq::IsInitialized() const {

  return true;
}

void UserMailReq::Swap(UserMailReq* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMailReq_descriptor_;
  metadata.reflection = UserMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMailRes::kMgsidFieldNumber;
#endif  // !_MSC_VER

UserMailRes::UserMailRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserMailRes)
}

void UserMailRes::InitAsDefaultInstance() {
}

UserMailRes::UserMailRes(const UserMailRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserMailRes)
}

void UserMailRes::SharedCtor() {
  _cached_size_ = 0;
  mgsid_ = 30000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMailRes::~UserMailRes() {
  // @@protoc_insertion_point(destructor:UserMailRes)
  SharedDtor();
}

void UserMailRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMailRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMailRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMailRes_descriptor_;
}

const UserMailRes& UserMailRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSToMail_2eproto();
  return *default_instance_;
}

UserMailRes* UserMailRes::default_instance_ = NULL;

UserMailRes* UserMailRes::New() const {
  return new UserMailRes;
}

void UserMailRes::Clear() {
  mgsid_ = 30000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMailRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserMailRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgID mgsid = 1 [default = eMsg_AskNickNameMailListRes];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgID_IsValid(value)) {
            set_mgsid(static_cast< ::MsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserMailRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserMailRes)
  return false;
#undef DO_
}

void UserMailRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserMailRes)
  // optional .MsgID mgsid = 1 [default = eMsg_AskNickNameMailListRes];
  if (has_mgsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserMailRes)
}

::google::protobuf::uint8* UserMailRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserMailRes)
  // optional .MsgID mgsid = 1 [default = eMsg_AskNickNameMailListRes];
  if (has_mgsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mgsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserMailRes)
  return target;
}

int UserMailRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgID mgsid = 1 [default = eMsg_AskNickNameMailListRes];
    if (has_mgsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMailRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMailRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMailRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMailRes::MergeFrom(const UserMailRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgsid()) {
      set_mgsid(from.mgsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMailRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMailRes::CopyFrom(const UserMailRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMailRes::IsInitialized() const {

  return true;
}

void UserMailRes::Swap(UserMailRes* other) {
  if (other != this) {
    std::swap(mgsid_, other->mgsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMailRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMailRes_descriptor_;
  metadata.reflection = UserMailRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
