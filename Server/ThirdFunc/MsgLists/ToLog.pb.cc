// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ToLog.proto
// Protobuf C++ Version: 4.26.0-dev

#include "ToLog.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ToLog {

inline constexpr WriteLog::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        log_str_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        log_type_{0},
        msgid_{static_cast< ::ToLog::MsgID >(1)} {}

template <typename>
PROTOBUF_CONSTEXPR WriteLog::WriteLog(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WriteLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WriteLogDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WriteLogDefaultTypeInternal() {}
  union {
    WriteLog _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteLogDefaultTypeInternal _WriteLog_default_instance_;
}  // namespace ToLog
static ::_pb::Metadata file_level_metadata_ToLog_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ToLog_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ToLog_2eproto = nullptr;
const ::uint32_t
    TableStruct_ToLog_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::ToLog::WriteLog, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ToLog::WriteLog, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ToLog::WriteLog, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::ToLog::WriteLog, _impl_.log_type_),
        PROTOBUF_FIELD_OFFSET(::ToLog::WriteLog, _impl_.log_str_),
        2,
        1,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::ToLog::WriteLog)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ToLog::_WriteLog_default_instance_._instance,
};
const char descriptor_table_protodef_ToLog_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013ToLog.proto\022\005ToLog\"^\n\010WriteLog\022/\n\005msgi"
    "d\030\001 \001(\0162\014.ToLog.MsgID:\022eMsgToLog_WriteLo"
    "g\022\020\n\010log_type\030\002 \001(\005\022\017\n\007log_str\030\003 \001(\t*G\n\005"
    "MsgID\022\023\n\017eMsgToLog_Begin\020\000\022\026\n\022eMsgToLog_"
    "WriteLog\020\001\022\021\n\reMsgToLog_End\020d"
};
static ::absl::once_flag descriptor_table_ToLog_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ToLog_2eproto = {
    false,
    false,
    189,
    descriptor_table_protodef_ToLog_2eproto,
    "ToLog.proto",
    &descriptor_table_ToLog_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_ToLog_2eproto::offsets,
    file_level_metadata_ToLog_2eproto,
    file_level_enum_descriptors_ToLog_2eproto,
    file_level_service_descriptors_ToLog_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ToLog_2eproto_getter() {
  return &descriptor_table_ToLog_2eproto;
}
namespace ToLog {
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ToLog_2eproto);
  return file_level_enum_descriptors_ToLog_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MsgID_internal_data_[] = {
    131072u, 65536u, 100u, };
bool MsgID_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, MsgID_internal_data_);
}
// ===================================================================

class WriteLog::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteLog>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WriteLog, _impl_._has_bits_);
};

WriteLog::WriteLog(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToLog.WriteLog)
}
inline PROTOBUF_NDEBUG_INLINE WriteLog::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        log_str_(arena, from.log_str_) {}

WriteLog::WriteLog(
    ::google::protobuf::Arena* arena,
    const WriteLog& from)
    : ::google::protobuf::Message(arena) {
  WriteLog* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, log_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, log_type_),
           offsetof(Impl_, msgid_) -
               offsetof(Impl_, log_type_) +
               sizeof(Impl_::msgid_));

  // @@protoc_insertion_point(copy_constructor:ToLog.WriteLog)
}
inline PROTOBUF_NDEBUG_INLINE WriteLog::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        log_str_(arena),
        msgid_{static_cast< ::ToLog::MsgID >(1)} {}

inline void WriteLog::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.log_type_ = {};
}
WriteLog::~WriteLog() {
  // @@protoc_insertion_point(destructor:ToLog.WriteLog)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WriteLog::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.log_str_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
WriteLog::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(WriteLog, _impl_._cached_size_),
              false,
          },
          &WriteLog::MergeImpl,
          &WriteLog::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void WriteLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ToLog.WriteLog)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.log_str_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.log_type_ = 0;
    _impl_.msgid_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WriteLog::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 30, 2> WriteLog::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WriteLog, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WriteLog_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ToLog::WriteLog>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
    {::_pbi::TcParser::FastEvS1,
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(WriteLog, _impl_.msgid_)}},
    // optional int32 log_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WriteLog, _impl_.log_type_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(WriteLog, _impl_.log_type_)}},
    // optional string log_str = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(WriteLog, _impl_.log_str_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
    {PROTOBUF_FIELD_OFFSET(WriteLog, _impl_.msgid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional int32 log_type = 2;
    {PROTOBUF_FIELD_OFFSET(WriteLog, _impl_.log_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string log_str = 3;
    {PROTOBUF_FIELD_OFFSET(WriteLog, _impl_.log_str_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::ToLog::MsgID_internal_data_},
  }}, {{
    "\16\0\0\7\0\0\0\0"
    "ToLog.WriteLog"
    "log_str"
  }},
};

::uint8_t* WriteLog::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToLog.WriteLog)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional int32 log_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_log_type(), target);
  }

  // optional string log_str = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_log_str();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "ToLog.WriteLog.log_str");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToLog.WriteLog)
  return target;
}

::size_t WriteLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToLog.WriteLog)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string log_str = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_log_str());
    }

    // optional int32 log_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_log_type());
    }

    // optional .ToLog.MsgID msgid = 1 [default = eMsgToLog_WriteLog];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void WriteLog::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WriteLog*>(&to_msg);
  auto& from = static_cast<const WriteLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ToLog.WriteLog)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_log_str(from._internal_log_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.log_type_ = from._impl_.log_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WriteLog::CopyFrom(const WriteLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToLog.WriteLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WriteLog::IsInitialized() const {
  return true;
}

void WriteLog::InternalSwap(WriteLog* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_str_, &other->_impl_.log_str_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteLog, _impl_.msgid_)
      + sizeof(WriteLog::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(WriteLog, _impl_.log_type_)>(
          reinterpret_cast<char*>(&_impl_.log_type_),
          reinterpret_cast<char*>(&other->_impl_.log_type_));
}

::google::protobuf::Metadata WriteLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_ToLog_2eproto_getter,
                                   &descriptor_table_ToLog_2eproto_once,
                                   file_level_metadata_ToLog_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ToLog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_ToLog_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
