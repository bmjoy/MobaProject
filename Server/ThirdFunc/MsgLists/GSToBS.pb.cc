// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSToBS.proto
// Protobuf C++ Version: 4.26.0-dev

#include "GSToBS.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace GSToBS {

inline constexpr ReportAllClientInf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tokenlist_size_{0u},
        msgid_{static_cast< ::GSToBS::MsgID >(32770)} {}

template <typename>
PROTOBUF_CONSTEXPR ReportAllClientInf::ReportAllClientInf(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ReportAllClientInfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportAllClientInfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportAllClientInfDefaultTypeInternal() {}
  union {
    ReportAllClientInf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportAllClientInfDefaultTypeInternal _ReportAllClientInf_default_instance_;

inline constexpr AskRegister::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gsid_{0},
        listenport_{0},
        mgsid_{static_cast< ::GSToBS::MsgID >(32769)} {}

template <typename>
PROTOBUF_CONSTEXPR AskRegister::AskRegister(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AskRegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AskRegisterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AskRegisterDefaultTypeInternal() {}
  union {
    AskRegister _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AskRegisterDefaultTypeInternal _AskRegister_default_instance_;
}  // namespace GSToBS
static ::_pb::Metadata file_level_metadata_GSToBS_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_GSToBS_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_GSToBS_2eproto = nullptr;
const ::uint32_t
    TableStruct_GSToBS_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::GSToBS::AskRegister, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GSToBS::AskRegister, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GSToBS::AskRegister, _impl_.mgsid_),
        PROTOBUF_FIELD_OFFSET(::GSToBS::AskRegister, _impl_.gsid_),
        PROTOBUF_FIELD_OFFSET(::GSToBS::AskRegister, _impl_.listenport_),
        2,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::GSToBS::ReportAllClientInf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GSToBS::ReportAllClientInf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GSToBS::ReportAllClientInf, _impl_.msgid_),
        PROTOBUF_FIELD_OFFSET(::GSToBS::ReportAllClientInf, _impl_.tokenlist_size_),
        1,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::GSToBS::AskRegister)},
        {14, 24, -1, sizeof(::GSToBS::ReportAllClientInf)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::GSToBS::_AskRegister_default_instance_._instance,
    &::GSToBS::_ReportAllClientInf_default_instance_._instance,
};
const char descriptor_table_protodef_GSToBS_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014GSToBS.proto\022\006GSToBS\"i\n\013AskRegister\0228\n"
    "\005mgsid\030\001 \001(\0162\r.GSToBS.MsgID:\032eMsgToBSFro"
    "mGS_AskRegister\022\014\n\004gsid\030\002 \001(\005\022\022\n\nlistenp"
    "ort\030\003 \001(\005\"n\n\022ReportAllClientInf\022@\n\005msgid"
    "\030\001 \001(\0162\r.GSToBS.MsgID:\"eMsgToBSFromGS_Re"
    "portAllClientInfo\022\026\n\016tokenlist_size\030\002 \001("
    "\r*\264\001\n\005MsgID\022\032\n\024eMsgToBSFromGS_Begin\020\200\200\002\022"
    " \n\032eMsgToBSFromGS_AskRegister\020\201\200\002\022(\n\"eMs"
    "gToBSFromGS_ReportAllClientInfo\020\202\200\002\022)\n#e"
    "MsgToBSFromGS_OneUserLoginTokenRet\020\203\200\002\022\030"
    "\n\022eMsgToBSFromGS_End\020\240\200\002"
};
static ::absl::once_flag descriptor_table_GSToBS_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GSToBS_2eproto = {
    false,
    false,
    424,
    descriptor_table_protodef_GSToBS_2eproto,
    "GSToBS.proto",
    &descriptor_table_GSToBS_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_GSToBS_2eproto::offsets,
    file_level_metadata_GSToBS_2eproto,
    file_level_enum_descriptors_GSToBS_2eproto,
    file_level_service_descriptors_GSToBS_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GSToBS_2eproto_getter() {
  return &descriptor_table_GSToBS_2eproto;
}
namespace GSToBS {
const ::google::protobuf::EnumDescriptor* MsgID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_GSToBS_2eproto);
  return file_level_enum_descriptors_GSToBS_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MsgID_internal_data_[] = {
    0u, 327680u, 32771u, 32769u, 32800u, 32768u, 32770u, };
bool MsgID_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, MsgID_internal_data_);
}
// ===================================================================

class AskRegister::_Internal {
 public:
  using HasBits = decltype(std::declval<AskRegister>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AskRegister, _impl_._has_bits_);
};

AskRegister::AskRegister(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GSToBS.AskRegister)
}
AskRegister::AskRegister(
    ::google::protobuf::Arena* arena, const AskRegister& from)
    : AskRegister(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AskRegister::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        mgsid_{static_cast< ::GSToBS::MsgID >(32769)} {}

inline void AskRegister::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gsid_),
           0,
           offsetof(Impl_, listenport_) -
               offsetof(Impl_, gsid_) +
               sizeof(Impl_::listenport_));
}
AskRegister::~AskRegister() {
  // @@protoc_insertion_point(destructor:GSToBS.AskRegister)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AskRegister::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AskRegister::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AskRegister, _impl_._cached_size_),
              false,
          },
          &AskRegister::MergeImpl,
          &AskRegister::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AskRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:GSToBS.AskRegister)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.gsid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.listenport_) -
        reinterpret_cast<char*>(&_impl_.gsid_)) + sizeof(_impl_.listenport_));
    _impl_.mgsid_ = 32769;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AskRegister::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> AskRegister::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AskRegister, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AskRegister_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GSToBS::AskRegister>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .GSToBS.MsgID mgsid = 1 [default = eMsgToBSFromGS_AskRegister];
    {::_pbi::TcParser::FastEvS1,
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.mgsid_)}},
    // optional int32 gsid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AskRegister, _impl_.gsid_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.gsid_)}},
    // optional int32 listenport = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AskRegister, _impl_.listenport_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.listenport_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .GSToBS.MsgID mgsid = 1 [default = eMsgToBSFromGS_AskRegister];
    {PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.mgsid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional int32 gsid = 2;
    {PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.gsid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 listenport = 3;
    {PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.listenport_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::GSToBS::MsgID_internal_data_},
  }}, {{
  }},
};

::uint8_t* AskRegister::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToBS.AskRegister)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .GSToBS.MsgID mgsid = 1 [default = eMsgToBSFromGS_AskRegister];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_mgsid(), target);
  }

  // optional int32 gsid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_gsid(), target);
  }

  // optional int32 listenport = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_listenport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToBS.AskRegister)
  return target;
}

::size_t AskRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GSToBS.AskRegister)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 gsid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_gsid());
    }

    // optional int32 listenport = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_listenport());
    }

    // optional .GSToBS.MsgID mgsid = 1 [default = eMsgToBSFromGS_AskRegister];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_mgsid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AskRegister::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AskRegister*>(&to_msg);
  auto& from = static_cast<const AskRegister&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GSToBS.AskRegister)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gsid_ = from._impl_.gsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.listenport_ = from._impl_.listenport_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mgsid_ = from._impl_.mgsid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AskRegister::CopyFrom(const AskRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GSToBS.AskRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AskRegister::IsInitialized() const {
  return true;
}

void AskRegister::InternalSwap(AskRegister* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.mgsid_)
      + sizeof(AskRegister::_impl_.mgsid_)
      - PROTOBUF_FIELD_OFFSET(AskRegister, _impl_.gsid_)>(
          reinterpret_cast<char*>(&_impl_.gsid_),
          reinterpret_cast<char*>(&other->_impl_.gsid_));
}

::google::protobuf::Metadata AskRegister::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_GSToBS_2eproto_getter,
                                   &descriptor_table_GSToBS_2eproto_once,
                                   file_level_metadata_GSToBS_2eproto[0]);
}
// ===================================================================

class ReportAllClientInf::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportAllClientInf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_._has_bits_);
};

ReportAllClientInf::ReportAllClientInf(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GSToBS.ReportAllClientInf)
}
ReportAllClientInf::ReportAllClientInf(
    ::google::protobuf::Arena* arena, const ReportAllClientInf& from)
    : ReportAllClientInf(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ReportAllClientInf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        msgid_{static_cast< ::GSToBS::MsgID >(32770)} {}

inline void ReportAllClientInf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.tokenlist_size_ = {};
}
ReportAllClientInf::~ReportAllClientInf() {
  // @@protoc_insertion_point(destructor:GSToBS.ReportAllClientInf)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReportAllClientInf::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ReportAllClientInf::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_._cached_size_),
              false,
          },
          &ReportAllClientInf::MergeImpl,
          &ReportAllClientInf::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ReportAllClientInf::Clear() {
// @@protoc_insertion_point(message_clear_start:GSToBS.ReportAllClientInf)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.tokenlist_size_ = 0u;
    _impl_.msgid_ = 32770;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReportAllClientInf::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ReportAllClientInf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ReportAllClientInf_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GSToBS::ReportAllClientInf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 tokenlist_size = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReportAllClientInf, _impl_.tokenlist_size_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_.tokenlist_size_)}},
    // optional .GSToBS.MsgID msgid = 1 [default = eMsgToBSFromGS_ReportAllClientInfo];
    {::_pbi::TcParser::FastEvS1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_.msgid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .GSToBS.MsgID msgid = 1 [default = eMsgToBSFromGS_ReportAllClientInfo];
    {PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_.msgid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // optional uint32 tokenlist_size = 2;
    {PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_.tokenlist_size_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::GSToBS::MsgID_internal_data_},
  }}, {{
  }},
};

::uint8_t* ReportAllClientInf::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GSToBS.ReportAllClientInf)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .GSToBS.MsgID msgid = 1 [default = eMsgToBSFromGS_ReportAllClientInfo];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_msgid(), target);
  }

  // optional uint32 tokenlist_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_tokenlist_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GSToBS.ReportAllClientInf)
  return target;
}

::size_t ReportAllClientInf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GSToBS.ReportAllClientInf)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 tokenlist_size = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tokenlist_size());
    }

    // optional .GSToBS.MsgID msgid = 1 [default = eMsgToBSFromGS_ReportAllClientInfo];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_msgid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ReportAllClientInf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReportAllClientInf*>(&to_msg);
  auto& from = static_cast<const ReportAllClientInf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GSToBS.ReportAllClientInf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tokenlist_size_ = from._impl_.tokenlist_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgid_ = from._impl_.msgid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReportAllClientInf::CopyFrom(const ReportAllClientInf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GSToBS.ReportAllClientInf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReportAllClientInf::IsInitialized() const {
  return true;
}

void ReportAllClientInf::InternalSwap(ReportAllClientInf* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_.msgid_)
      + sizeof(ReportAllClientInf::_impl_.msgid_)
      - PROTOBUF_FIELD_OFFSET(ReportAllClientInf, _impl_.tokenlist_size_)>(
          reinterpret_cast<char*>(&_impl_.tokenlist_size_),
          reinterpret_cast<char*>(&other->_impl_.tokenlist_size_));
}

::google::protobuf::Metadata ReportAllClientInf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_GSToBS_2eproto_getter,
                                   &descriptor_table_GSToBS_2eproto_once,
                                   file_level_metadata_GSToBS_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace GSToBS
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_GSToBS_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
