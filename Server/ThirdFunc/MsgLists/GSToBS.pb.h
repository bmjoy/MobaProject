// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GSToBS.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_GSToBS_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_GSToBS_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_GSToBS_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_GSToBS_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_GSToBS_2eproto;
namespace GSToBS {
class AskRegister;
struct AskRegisterDefaultTypeInternal;
extern AskRegisterDefaultTypeInternal _AskRegister_default_instance_;
class ReportAllClientInf;
struct ReportAllClientInfDefaultTypeInternal;
extern ReportAllClientInfDefaultTypeInternal _ReportAllClientInf_default_instance_;
}  // namespace GSToBS
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace GSToBS {
enum MsgID : int {
  eMsgToBSFromGS_Begin = 32768,
  eMsgToBSFromGS_AskRegister = 32769,
  eMsgToBSFromGS_ReportAllClientInfo = 32770,
  eMsgToBSFromGS_OneUserLoginTokenRet = 32771,
  eMsgToBSFromGS_End = 32800,
};

bool MsgID_IsValid(int value);
extern const uint32_t MsgID_internal_data_[];
constexpr MsgID MsgID_MIN = static_cast<MsgID>(32768);
constexpr MsgID MsgID_MAX = static_cast<MsgID>(32800);
constexpr int MsgID_ARRAYSIZE = 32800 + 1;
const ::google::protobuf::EnumDescriptor*
MsgID_descriptor();
template <typename T>
const std::string& MsgID_Name(T value) {
  static_assert(std::is_same<T, MsgID>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgID_Name().");
  return ::google::protobuf::internal::NameOfEnum(MsgID_descriptor(), value);
}
inline bool MsgID_Parse(absl::string_view name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
      MsgID_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ReportAllClientInf final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GSToBS.ReportAllClientInf) */ {
 public:
  inline ReportAllClientInf() : ReportAllClientInf(nullptr) {}
  ~ReportAllClientInf() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReportAllClientInf(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReportAllClientInf(const ReportAllClientInf& from) : ReportAllClientInf(nullptr, from) {}
  inline ReportAllClientInf(ReportAllClientInf&& from) noexcept
      : ReportAllClientInf(nullptr, std::move(from)) {}
  inline ReportAllClientInf& operator=(const ReportAllClientInf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportAllClientInf& operator=(ReportAllClientInf&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportAllClientInf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportAllClientInf* internal_default_instance() {
    return reinterpret_cast<const ReportAllClientInf*>(
        &_ReportAllClientInf_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ReportAllClientInf& a, ReportAllClientInf& b) { a.Swap(&b); }
  inline void Swap(ReportAllClientInf* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportAllClientInf* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportAllClientInf* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ReportAllClientInf>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReportAllClientInf& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReportAllClientInf& from) { ReportAllClientInf::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReportAllClientInf* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GSToBS.ReportAllClientInf"; }

 protected:
  explicit ReportAllClientInf(::google::protobuf::Arena* arena);
  ReportAllClientInf(::google::protobuf::Arena* arena, const ReportAllClientInf& from);
  ReportAllClientInf(::google::protobuf::Arena* arena, ReportAllClientInf&& from) noexcept
      : ReportAllClientInf(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenlistSizeFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // optional uint32 tokenlist_size = 2;
  bool has_tokenlist_size() const;
  void clear_tokenlist_size() ;
  ::uint32_t tokenlist_size() const;
  void set_tokenlist_size(::uint32_t value);

  private:
  ::uint32_t _internal_tokenlist_size() const;
  void _internal_set_tokenlist_size(::uint32_t value);

  public:
  // optional .GSToBS.MsgID msgid = 1 [default = eMsgToBSFromGS_ReportAllClientInfo];
  bool has_msgid() const;
  void clear_msgid() ;
  ::GSToBS::MsgID msgid() const;
  void set_msgid(::GSToBS::MsgID value);

  private:
  ::GSToBS::MsgID _internal_msgid() const;
  void _internal_set_msgid(::GSToBS::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:GSToBS.ReportAllClientInf)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t tokenlist_size_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSToBS_2eproto;
};
// -------------------------------------------------------------------

class AskRegister final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GSToBS.AskRegister) */ {
 public:
  inline AskRegister() : AskRegister(nullptr) {}
  ~AskRegister() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AskRegister(
      ::google::protobuf::internal::ConstantInitialized);

  inline AskRegister(const AskRegister& from) : AskRegister(nullptr, from) {}
  inline AskRegister(AskRegister&& from) noexcept
      : AskRegister(nullptr, std::move(from)) {}
  inline AskRegister& operator=(const AskRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskRegister& operator=(AskRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AskRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const AskRegister* internal_default_instance() {
    return reinterpret_cast<const AskRegister*>(
        &_AskRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AskRegister& a, AskRegister& b) { a.Swap(&b); }
  inline void Swap(AskRegister* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AskRegister* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AskRegister* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AskRegister>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AskRegister& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AskRegister& from) { AskRegister::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AskRegister* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GSToBS.AskRegister"; }

 protected:
  explicit AskRegister(::google::protobuf::Arena* arena);
  AskRegister(::google::protobuf::Arena* arena, const AskRegister& from);
  AskRegister(::google::protobuf::Arena* arena, AskRegister&& from) noexcept
      : AskRegister(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGsidFieldNumber = 2,
    kListenportFieldNumber = 3,
    kMgsidFieldNumber = 1,
  };
  // optional int32 gsid = 2;
  bool has_gsid() const;
  void clear_gsid() ;
  ::int32_t gsid() const;
  void set_gsid(::int32_t value);

  private:
  ::int32_t _internal_gsid() const;
  void _internal_set_gsid(::int32_t value);

  public:
  // optional int32 listenport = 3;
  bool has_listenport() const;
  void clear_listenport() ;
  ::int32_t listenport() const;
  void set_listenport(::int32_t value);

  private:
  ::int32_t _internal_listenport() const;
  void _internal_set_listenport(::int32_t value);

  public:
  // optional .GSToBS.MsgID mgsid = 1 [default = eMsgToBSFromGS_AskRegister];
  bool has_mgsid() const;
  void clear_mgsid() ;
  ::GSToBS::MsgID mgsid() const;
  void set_mgsid(::GSToBS::MsgID value);

  private:
  ::GSToBS::MsgID _internal_mgsid() const;
  void _internal_set_mgsid(::GSToBS::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:GSToBS.AskRegister)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t gsid_;
    ::int32_t listenport_;
    int mgsid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GSToBS_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AskRegister

// optional .GSToBS.MsgID mgsid = 1 [default = eMsgToBSFromGS_AskRegister];
inline bool AskRegister::has_mgsid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AskRegister::clear_mgsid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mgsid_ = 32769;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::GSToBS::MsgID AskRegister::mgsid() const {
  // @@protoc_insertion_point(field_get:GSToBS.AskRegister.mgsid)
  return _internal_mgsid();
}
inline void AskRegister::set_mgsid(::GSToBS::MsgID value) {
  _internal_set_mgsid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GSToBS.AskRegister.mgsid)
}
inline ::GSToBS::MsgID AskRegister::_internal_mgsid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::GSToBS::MsgID>(_impl_.mgsid_);
}
inline void AskRegister::_internal_set_mgsid(::GSToBS::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::GSToBS::MsgID_IsValid(value));
  _impl_.mgsid_ = value;
}

// optional int32 gsid = 2;
inline bool AskRegister::has_gsid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AskRegister::clear_gsid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gsid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t AskRegister::gsid() const {
  // @@protoc_insertion_point(field_get:GSToBS.AskRegister.gsid)
  return _internal_gsid();
}
inline void AskRegister::set_gsid(::int32_t value) {
  _internal_set_gsid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GSToBS.AskRegister.gsid)
}
inline ::int32_t AskRegister::_internal_gsid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gsid_;
}
inline void AskRegister::_internal_set_gsid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gsid_ = value;
}

// optional int32 listenport = 3;
inline bool AskRegister::has_listenport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AskRegister::clear_listenport() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.listenport_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t AskRegister::listenport() const {
  // @@protoc_insertion_point(field_get:GSToBS.AskRegister.listenport)
  return _internal_listenport();
}
inline void AskRegister::set_listenport(::int32_t value) {
  _internal_set_listenport(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GSToBS.AskRegister.listenport)
}
inline ::int32_t AskRegister::_internal_listenport() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.listenport_;
}
inline void AskRegister::_internal_set_listenport(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.listenport_ = value;
}

// -------------------------------------------------------------------

// ReportAllClientInf

// optional .GSToBS.MsgID msgid = 1 [default = eMsgToBSFromGS_ReportAllClientInfo];
inline bool ReportAllClientInf::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ReportAllClientInf::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 32770;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::GSToBS::MsgID ReportAllClientInf::msgid() const {
  // @@protoc_insertion_point(field_get:GSToBS.ReportAllClientInf.msgid)
  return _internal_msgid();
}
inline void ReportAllClientInf::set_msgid(::GSToBS::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GSToBS.ReportAllClientInf.msgid)
}
inline ::GSToBS::MsgID ReportAllClientInf::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::GSToBS::MsgID>(_impl_.msgid_);
}
inline void ReportAllClientInf::_internal_set_msgid(::GSToBS::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::GSToBS::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional uint32 tokenlist_size = 2;
inline bool ReportAllClientInf::has_tokenlist_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReportAllClientInf::clear_tokenlist_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tokenlist_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ReportAllClientInf::tokenlist_size() const {
  // @@protoc_insertion_point(field_get:GSToBS.ReportAllClientInf.tokenlist_size)
  return _internal_tokenlist_size();
}
inline void ReportAllClientInf::set_tokenlist_size(::uint32_t value) {
  _internal_set_tokenlist_size(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GSToBS.ReportAllClientInf.tokenlist_size)
}
inline ::uint32_t ReportAllClientInf::_internal_tokenlist_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tokenlist_size_;
}
inline void ReportAllClientInf::_internal_set_tokenlist_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tokenlist_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace GSToBS


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::GSToBS::MsgID> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::GSToBS::MsgID>() {
  return ::GSToBS::MsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_GSToBS_2eproto_2epb_2eh
