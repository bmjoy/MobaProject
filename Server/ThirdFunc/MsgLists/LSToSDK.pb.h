// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LSToSDK.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_LSToSDK_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_LSToSDK_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_LSToSDK_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_LSToSDK_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_LSToSDK_2eproto;
namespace LSToSDK {
class UserLogin91;
struct UserLogin91DefaultTypeInternal;
extern UserLogin91DefaultTypeInternal _UserLogin91_default_instance_;
}  // namespace LSToSDK
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace LSToSDK {
enum MsgID : int {
  eMsgToGCFromBS_91UserLogin = 1,
};

bool MsgID_IsValid(int value);
extern const uint32_t MsgID_internal_data_[];
constexpr MsgID MsgID_MIN = static_cast<MsgID>(1);
constexpr MsgID MsgID_MAX = static_cast<MsgID>(1);
constexpr int MsgID_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
MsgID_descriptor();
template <typename T>
const std::string& MsgID_Name(T value) {
  static_assert(std::is_same<T, MsgID>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgID_Name().");
  return MsgID_Name(static_cast<MsgID>(value));
}
template <>
inline const std::string& MsgID_Name(MsgID value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgID_descriptor,
                                                 1, 1>(
      static_cast<int>(value));
}
inline bool MsgID_Parse(absl::string_view name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
      MsgID_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserLogin91 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:LSToSDK.UserLogin91) */ {
 public:
  inline UserLogin91() : UserLogin91(nullptr) {}
  ~UserLogin91() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserLogin91(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserLogin91(const UserLogin91& from) : UserLogin91(nullptr, from) {}
  inline UserLogin91(UserLogin91&& from) noexcept
      : UserLogin91(nullptr, std::move(from)) {}
  inline UserLogin91& operator=(const UserLogin91& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogin91& operator=(UserLogin91&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogin91& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogin91* internal_default_instance() {
    return reinterpret_cast<const UserLogin91*>(
        &_UserLogin91_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(UserLogin91& a, UserLogin91& b) { a.Swap(&b); }
  inline void Swap(UserLogin91* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogin91* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogin91* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UserLogin91>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserLogin91& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserLogin91& from) { UserLogin91::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserLogin91* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "LSToSDK.UserLogin91"; }

 protected:
  explicit UserLogin91(::google::protobuf::Arena* arena);
  UserLogin91(::google::protobuf::Arena* arena, const UserLogin91& from);
  UserLogin91(::google::protobuf::Arena* arena, UserLogin91&& from) noexcept
      : UserLogin91(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogininfoFieldNumber = 2,
    kGcidFieldNumber = 4,
    kMgsidFieldNumber = 1,
  };
  // optional string logininfo = 2;
  bool has_logininfo() const;
  void clear_logininfo() ;
  const std::string& logininfo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logininfo(Arg_&& arg, Args_... args);
  std::string* mutable_logininfo();
  PROTOBUF_NODISCARD std::string* release_logininfo();
  void set_allocated_logininfo(std::string* value);

  private:
  const std::string& _internal_logininfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logininfo(
      const std::string& value);
  std::string* _internal_mutable_logininfo();

  public:
  // optional int32 gcid = 4;
  bool has_gcid() const;
  void clear_gcid() ;
  ::int32_t gcid() const;
  void set_gcid(::int32_t value);

  private:
  ::int32_t _internal_gcid() const;
  void _internal_set_gcid(::int32_t value);

  public:
  // optional .LSToSDK.MsgID mgsid = 1 [default = eMsgToGCFromBS_91UserLogin];
  bool has_mgsid() const;
  void clear_mgsid() ;
  ::LSToSDK::MsgID mgsid() const;
  void set_mgsid(::LSToSDK::MsgID value);

  private:
  ::LSToSDK::MsgID _internal_mgsid() const;
  void _internal_set_mgsid(::LSToSDK::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:LSToSDK.UserLogin91)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr logininfo_;
    ::int32_t gcid_;
    int mgsid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LSToSDK_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UserLogin91

// optional .LSToSDK.MsgID mgsid = 1 [default = eMsgToGCFromBS_91UserLogin];
inline bool UserLogin91::has_mgsid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UserLogin91::clear_mgsid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mgsid_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::LSToSDK::MsgID UserLogin91::mgsid() const {
  // @@protoc_insertion_point(field_get:LSToSDK.UserLogin91.mgsid)
  return _internal_mgsid();
}
inline void UserLogin91::set_mgsid(::LSToSDK::MsgID value) {
  _internal_set_mgsid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:LSToSDK.UserLogin91.mgsid)
}
inline ::LSToSDK::MsgID UserLogin91::_internal_mgsid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::LSToSDK::MsgID>(_impl_.mgsid_);
}
inline void UserLogin91::_internal_set_mgsid(::LSToSDK::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::LSToSDK::MsgID_IsValid(value));
  _impl_.mgsid_ = value;
}

// optional string logininfo = 2;
inline bool UserLogin91::has_logininfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UserLogin91::clear_logininfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logininfo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserLogin91::logininfo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:LSToSDK.UserLogin91.logininfo)
  return _internal_logininfo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserLogin91::set_logininfo(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.logininfo_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:LSToSDK.UserLogin91.logininfo)
}
inline std::string* UserLogin91::mutable_logininfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logininfo();
  // @@protoc_insertion_point(field_mutable:LSToSDK.UserLogin91.logininfo)
  return _s;
}
inline const std::string& UserLogin91::_internal_logininfo() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.logininfo_.Get();
}
inline void UserLogin91::_internal_set_logininfo(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.logininfo_.Set(value, GetArena());
}
inline std::string* UserLogin91::_internal_mutable_logininfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.logininfo_.Mutable( GetArena());
}
inline std::string* UserLogin91::release_logininfo() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:LSToSDK.UserLogin91.logininfo)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.logininfo_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logininfo_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UserLogin91::set_allocated_logininfo(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.logininfo_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logininfo_.IsDefault()) {
          _impl_.logininfo_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LSToSDK.UserLogin91.logininfo)
}

// optional int32 gcid = 4;
inline bool UserLogin91::has_gcid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UserLogin91::clear_gcid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gcid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t UserLogin91::gcid() const {
  // @@protoc_insertion_point(field_get:LSToSDK.UserLogin91.gcid)
  return _internal_gcid();
}
inline void UserLogin91::set_gcid(::int32_t value) {
  _internal_set_gcid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:LSToSDK.UserLogin91.gcid)
}
inline ::int32_t UserLogin91::_internal_gcid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gcid_;
}
inline void UserLogin91::_internal_set_gcid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gcid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace LSToSDK


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::LSToSDK::MsgID> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::LSToSDK::MsgID>() {
  return ::LSToSDK::MsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_LSToSDK_2eproto_2epb_2eh
