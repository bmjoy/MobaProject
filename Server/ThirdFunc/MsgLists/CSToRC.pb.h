// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSToRC.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_CSToRC_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_CSToRC_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_CSToRC_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_CSToRC_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_CSToRC_2eproto;
namespace CSToRC {
class AddMailResp;
struct AddMailRespDefaultTypeInternal;
extern AddMailRespDefaultTypeInternal _AddMailResp_default_instance_;
class AddNoticeResp;
struct AddNoticeRespDefaultTypeInternal;
extern AddNoticeRespDefaultTypeInternal _AddNoticeResp_default_instance_;
class AllNoticeInfo;
struct AllNoticeInfoDefaultTypeInternal;
extern AllNoticeInfoDefaultTypeInternal _AllNoticeInfo_default_instance_;
class AllServerInfo;
struct AllServerInfoDefaultTypeInternal;
extern AllServerInfoDefaultTypeInternal _AllServerInfo_default_instance_;
class AskRegistRsp;
struct AskRegistRspDefaultTypeInternal;
extern AskRegistRspDefaultTypeInternal _AskRegistRsp_default_instance_;
class DeleteNoticeResp;
struct DeleteNoticeRespDefaultTypeInternal;
extern DeleteNoticeRespDefaultTypeInternal _DeleteNoticeResp_default_instance_;
class NoticeInfo;
struct NoticeInfoDefaultTypeInternal;
extern NoticeInfoDefaultTypeInternal _NoticeInfo_default_instance_;
class QueryCDkeyInfoResp;
struct QueryCDkeyInfoRespDefaultTypeInternal;
extern QueryCDkeyInfoRespDefaultTypeInternal _QueryCDkeyInfoResp_default_instance_;
class QueryCDkeyInfoResp_CDKey_Info;
struct QueryCDkeyInfoResp_CDKey_InfoDefaultTypeInternal;
extern QueryCDkeyInfoResp_CDKey_InfoDefaultTypeInternal _QueryCDkeyInfoResp_CDKey_Info_default_instance_;
class ServerUserInfo;
struct ServerUserInfoDefaultTypeInternal;
extern ServerUserInfoDefaultTypeInternal _ServerUserInfo_default_instance_;
}  // namespace CSToRC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace CSToRC {
enum MsgID : int {
  eMsgCS2RC_Begin = 33500,
  eMsgCS2RC_AskRegistRsp = 33501,
  eMsgCS2RC_AllServerInfo = 33502,
  eMsgCS2RC_ServerUserInfo = 33503,
  eMsgCS2RC_AllNoticeInfo = 33504,
  eMsgCS2RC_AddNoticeResp = 33505,
  eMsgCS2RC_DeleteNoticeResp = 33506,
  eMsgCS2RC_AskAddOneMailResp = 33507,
  eMsgCS2RC_AskQueryCDkeyResp = 33508,
  eMsgCS2RC_End = 33999,
};

bool MsgID_IsValid(int value);
extern const uint32_t MsgID_internal_data_[];
constexpr MsgID MsgID_MIN = static_cast<MsgID>(33500);
constexpr MsgID MsgID_MAX = static_cast<MsgID>(33999);
constexpr int MsgID_ARRAYSIZE = 33999 + 1;
const ::google::protobuf::EnumDescriptor*
MsgID_descriptor();
template <typename T>
const std::string& MsgID_Name(T value) {
  static_assert(std::is_same<T, MsgID>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgID_Name().");
  return ::google::protobuf::internal::NameOfEnum(MsgID_descriptor(), value);
}
inline bool MsgID_Parse(absl::string_view name, MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgID>(
      MsgID_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ServerUserInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.ServerUserInfo) */ {
 public:
  inline ServerUserInfo() : ServerUserInfo(nullptr) {}
  ~ServerUserInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerUserInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerUserInfo(const ServerUserInfo& from) : ServerUserInfo(nullptr, from) {}
  inline ServerUserInfo(ServerUserInfo&& from) noexcept
      : ServerUserInfo(nullptr, std::move(from)) {}
  inline ServerUserInfo& operator=(const ServerUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUserInfo& operator=(ServerUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerUserInfo* internal_default_instance() {
    return reinterpret_cast<const ServerUserInfo*>(
        &_ServerUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ServerUserInfo& a, ServerUserInfo& b) { a.Swap(&b); }
  inline void Swap(ServerUserInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUserInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerUserInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ServerUserInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerUserInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerUserInfo& from) { ServerUserInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerUserInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.ServerUserInfo"; }

 protected:
  explicit ServerUserInfo(::google::protobuf::Arena* arena);
  ServerUserInfo(::google::protobuf::Arena* arena, const ServerUserInfo& from);
  ServerUserInfo(::google::protobuf::Arena* arena, ServerUserInfo&& from) noexcept
      : ServerUserInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAllUserNumFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // optional int32 allUserNum = 2;
  bool has_allusernum() const;
  void clear_allusernum() ;
  ::int32_t allusernum() const;
  void set_allusernum(::int32_t value);

  private:
  ::int32_t _internal_allusernum() const;
  void _internal_set_allusernum(::int32_t value);

  public:
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
  bool has_msgid() const;
  void clear_msgid() ;
  ::CSToRC::MsgID msgid() const;
  void set_msgid(::CSToRC::MsgID value);

  private:
  ::CSToRC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::CSToRC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.ServerUserInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t allusernum_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class QueryCDkeyInfoResp_CDKey_Info final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.QueryCDkeyInfoResp.CDKey_Info) */ {
 public:
  inline QueryCDkeyInfoResp_CDKey_Info() : QueryCDkeyInfoResp_CDKey_Info(nullptr) {}
  ~QueryCDkeyInfoResp_CDKey_Info() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCDkeyInfoResp_CDKey_Info(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryCDkeyInfoResp_CDKey_Info(const QueryCDkeyInfoResp_CDKey_Info& from) : QueryCDkeyInfoResp_CDKey_Info(nullptr, from) {}
  inline QueryCDkeyInfoResp_CDKey_Info(QueryCDkeyInfoResp_CDKey_Info&& from) noexcept
      : QueryCDkeyInfoResp_CDKey_Info(nullptr, std::move(from)) {}
  inline QueryCDkeyInfoResp_CDKey_Info& operator=(const QueryCDkeyInfoResp_CDKey_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCDkeyInfoResp_CDKey_Info& operator=(QueryCDkeyInfoResp_CDKey_Info&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCDkeyInfoResp_CDKey_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCDkeyInfoResp_CDKey_Info* internal_default_instance() {
    return reinterpret_cast<const QueryCDkeyInfoResp_CDKey_Info*>(
        &_QueryCDkeyInfoResp_CDKey_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(QueryCDkeyInfoResp_CDKey_Info& a, QueryCDkeyInfoResp_CDKey_Info& b) { a.Swap(&b); }
  inline void Swap(QueryCDkeyInfoResp_CDKey_Info* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCDkeyInfoResp_CDKey_Info* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCDkeyInfoResp_CDKey_Info* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QueryCDkeyInfoResp_CDKey_Info>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryCDkeyInfoResp_CDKey_Info& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryCDkeyInfoResp_CDKey_Info& from) { QueryCDkeyInfoResp_CDKey_Info::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QueryCDkeyInfoResp_CDKey_Info* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.QueryCDkeyInfoResp.CDKey_Info"; }

 protected:
  explicit QueryCDkeyInfoResp_CDKey_Info(::google::protobuf::Arena* arena);
  QueryCDkeyInfoResp_CDKey_Info(::google::protobuf::Arena* arena, const QueryCDkeyInfoResp_CDKey_Info& from);
  QueryCDkeyInfoResp_CDKey_Info(::google::protobuf::Arena* arena, QueryCDkeyInfoResp_CDKey_Info&& from) noexcept
      : QueryCDkeyInfoResp_CDKey_Info(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 2,
    kIdFieldNumber = 1,
    kPlatformFieldNumber = 3,
    kEndTiemFieldNumber = 4,
    kCodeNumFieldNumber = 5,
    kCodeLenFieldNumber = 6,
    kTypeFieldNumber = 7,
  };
  // optional string title = 2;
  bool has_title() const;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // optional int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional int32 platform = 3;
  bool has_platform() const;
  void clear_platform() ;
  ::int32_t platform() const;
  void set_platform(::int32_t value);

  private:
  ::int32_t _internal_platform() const;
  void _internal_set_platform(::int32_t value);

  public:
  // optional int64 end_tiem = 4;
  bool has_end_tiem() const;
  void clear_end_tiem() ;
  ::int64_t end_tiem() const;
  void set_end_tiem(::int64_t value);

  private:
  ::int64_t _internal_end_tiem() const;
  void _internal_set_end_tiem(::int64_t value);

  public:
  // optional int32 code_num = 5;
  bool has_code_num() const;
  void clear_code_num() ;
  ::int32_t code_num() const;
  void set_code_num(::int32_t value);

  private:
  ::int32_t _internal_code_num() const;
  void _internal_set_code_num(::int32_t value);

  public:
  // optional int32 code_len = 6;
  bool has_code_len() const;
  void clear_code_len() ;
  ::int32_t code_len() const;
  void set_code_len(::int32_t value);

  private:
  ::int32_t _internal_code_len() const;
  void _internal_set_code_len(::int32_t value);

  public:
  // optional int32 type = 7;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.QueryCDkeyInfoResp.CDKey_Info)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::int32_t id_;
    ::int32_t platform_;
    ::int64_t end_tiem_;
    ::int32_t code_num_;
    ::int32_t code_len_;
    ::int32_t type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class NoticeInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.NoticeInfo) */ {
 public:
  inline NoticeInfo() : NoticeInfo(nullptr) {}
  ~NoticeInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NoticeInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline NoticeInfo(const NoticeInfo& from) : NoticeInfo(nullptr, from) {}
  inline NoticeInfo(NoticeInfo&& from) noexcept
      : NoticeInfo(nullptr, std::move(from)) {}
  inline NoticeInfo& operator=(const NoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoticeInfo& operator=(NoticeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoticeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoticeInfo* internal_default_instance() {
    return reinterpret_cast<const NoticeInfo*>(
        &_NoticeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(NoticeInfo& a, NoticeInfo& b) { a.Swap(&b); }
  inline void Swap(NoticeInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoticeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoticeInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NoticeInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NoticeInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NoticeInfo& from) { NoticeInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NoticeInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.NoticeInfo"; }

 protected:
  explicit NoticeInfo(::google::protobuf::Arena* arena);
  NoticeInfo(::google::protobuf::Arena* arena, const NoticeInfo& from);
  NoticeInfo(::google::protobuf::Arena* arena, NoticeInfo&& from) noexcept
      : NoticeInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNoticeFieldNumber = 1,
  };
  // optional bytes notice = 1;
  bool has_notice() const;
  void clear_notice() ;
  const std::string& notice() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_notice(Arg_&& arg, Args_... args);
  std::string* mutable_notice();
  PROTOBUF_NODISCARD std::string* release_notice();
  void set_allocated_notice(std::string* value);

  private:
  const std::string& _internal_notice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notice(
      const std::string& value);
  std::string* _internal_mutable_notice();

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.NoticeInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr notice_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class DeleteNoticeResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.DeleteNoticeResp) */ {
 public:
  inline DeleteNoticeResp() : DeleteNoticeResp(nullptr) {}
  ~DeleteNoticeResp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteNoticeResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteNoticeResp(const DeleteNoticeResp& from) : DeleteNoticeResp(nullptr, from) {}
  inline DeleteNoticeResp(DeleteNoticeResp&& from) noexcept
      : DeleteNoticeResp(nullptr, std::move(from)) {}
  inline DeleteNoticeResp& operator=(const DeleteNoticeResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNoticeResp& operator=(DeleteNoticeResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNoticeResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNoticeResp* internal_default_instance() {
    return reinterpret_cast<const DeleteNoticeResp*>(
        &_DeleteNoticeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(DeleteNoticeResp& a, DeleteNoticeResp& b) { a.Swap(&b); }
  inline void Swap(DeleteNoticeResp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNoticeResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNoticeResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeleteNoticeResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteNoticeResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteNoticeResp& from) { DeleteNoticeResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteNoticeResp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.DeleteNoticeResp"; }

 protected:
  explicit DeleteNoticeResp(::google::protobuf::Arena* arena);
  DeleteNoticeResp(::google::protobuf::Arena* arena, const DeleteNoticeResp& from);
  DeleteNoticeResp(::google::protobuf::Arena* arena, DeleteNoticeResp&& from) noexcept
      : DeleteNoticeResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRstFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // optional bool rst = 2;
  bool has_rst() const;
  void clear_rst() ;
  bool rst() const;
  void set_rst(bool value);

  private:
  bool _internal_rst() const;
  void _internal_set_rst(bool value);

  public:
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
  bool has_msgid() const;
  void clear_msgid() ;
  ::CSToRC::MsgID msgid() const;
  void set_msgid(::CSToRC::MsgID value);

  private:
  ::CSToRC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::CSToRC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.DeleteNoticeResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool rst_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class AskRegistRsp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.AskRegistRsp) */ {
 public:
  inline AskRegistRsp() : AskRegistRsp(nullptr) {}
  ~AskRegistRsp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AskRegistRsp(
      ::google::protobuf::internal::ConstantInitialized);

  inline AskRegistRsp(const AskRegistRsp& from) : AskRegistRsp(nullptr, from) {}
  inline AskRegistRsp(AskRegistRsp&& from) noexcept
      : AskRegistRsp(nullptr, std::move(from)) {}
  inline AskRegistRsp& operator=(const AskRegistRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskRegistRsp& operator=(AskRegistRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AskRegistRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AskRegistRsp* internal_default_instance() {
    return reinterpret_cast<const AskRegistRsp*>(
        &_AskRegistRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AskRegistRsp& a, AskRegistRsp& b) { a.Swap(&b); }
  inline void Swap(AskRegistRsp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AskRegistRsp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AskRegistRsp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AskRegistRsp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AskRegistRsp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AskRegistRsp& from) { AskRegistRsp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AskRegistRsp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.AskRegistRsp"; }

 protected:
  explicit AskRegistRsp(::google::protobuf::Arena* arena);
  AskRegistRsp(::google::protobuf::Arena* arena, const AskRegistRsp& from);
  AskRegistRsp(::google::protobuf::Arena* arena, AskRegistRsp&& from) noexcept
      : AskRegistRsp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRstFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // optional bool rst = 2;
  bool has_rst() const;
  void clear_rst() ;
  bool rst() const;
  void set_rst(bool value);

  private:
  bool _internal_rst() const;
  void _internal_set_rst(bool value);

  public:
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
  bool has_msgid() const;
  void clear_msgid() ;
  ::CSToRC::MsgID msgid() const;
  void set_msgid(::CSToRC::MsgID value);

  private:
  ::CSToRC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::CSToRC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.AskRegistRsp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool rst_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class AllServerInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.AllServerInfo) */ {
 public:
  inline AllServerInfo() : AllServerInfo(nullptr) {}
  ~AllServerInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllServerInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllServerInfo(const AllServerInfo& from) : AllServerInfo(nullptr, from) {}
  inline AllServerInfo(AllServerInfo&& from) noexcept
      : AllServerInfo(nullptr, std::move(from)) {}
  inline AllServerInfo& operator=(const AllServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllServerInfo& operator=(AllServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllServerInfo* internal_default_instance() {
    return reinterpret_cast<const AllServerInfo*>(
        &_AllServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AllServerInfo& a, AllServerInfo& b) { a.Swap(&b); }
  inline void Swap(AllServerInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllServerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllServerInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AllServerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllServerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllServerInfo& from) { AllServerInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AllServerInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.AllServerInfo"; }

 protected:
  explicit AllServerInfo(::google::protobuf::Arena* arena);
  AllServerInfo(::google::protobuf::Arena* arena, const AllServerInfo& from);
  AllServerInfo(::google::protobuf::Arena* arena, AllServerInfo&& from) noexcept
      : AllServerInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServernameFieldNumber = 2,
    kCurttimeFieldNumber = 7,
    kRoomUserNumFieldNumber = 3,
    kBattleUserNumFieldNumber = 4,
    kLoadFactoryFieldNumber = 5,
    kAllUserNumFieldNumber = 6,
    kMsgidFieldNumber = 1,
  };
  // optional bytes servername = 2;
  bool has_servername() const;
  void clear_servername() ;
  const std::string& servername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_servername(Arg_&& arg, Args_... args);
  std::string* mutable_servername();
  PROTOBUF_NODISCARD std::string* release_servername();
  void set_allocated_servername(std::string* value);

  private:
  const std::string& _internal_servername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servername(
      const std::string& value);
  std::string* _internal_mutable_servername();

  public:
  // optional string curttime = 7;
  bool has_curttime() const;
  void clear_curttime() ;
  const std::string& curttime() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_curttime(Arg_&& arg, Args_... args);
  std::string* mutable_curttime();
  PROTOBUF_NODISCARD std::string* release_curttime();
  void set_allocated_curttime(std::string* value);

  private:
  const std::string& _internal_curttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_curttime(
      const std::string& value);
  std::string* _internal_mutable_curttime();

  public:
  // optional int32 roomUserNum = 3;
  bool has_roomusernum() const;
  void clear_roomusernum() ;
  ::int32_t roomusernum() const;
  void set_roomusernum(::int32_t value);

  private:
  ::int32_t _internal_roomusernum() const;
  void _internal_set_roomusernum(::int32_t value);

  public:
  // optional int32 battleUserNum = 4;
  bool has_battleusernum() const;
  void clear_battleusernum() ;
  ::int32_t battleusernum() const;
  void set_battleusernum(::int32_t value);

  private:
  ::int32_t _internal_battleusernum() const;
  void _internal_set_battleusernum(::int32_t value);

  public:
  // optional float loadFactory = 5;
  bool has_loadfactory() const;
  void clear_loadfactory() ;
  float loadfactory() const;
  void set_loadfactory(float value);

  private:
  float _internal_loadfactory() const;
  void _internal_set_loadfactory(float value);

  public:
  // optional int32 allUserNum = 6;
  bool has_allusernum() const;
  void clear_allusernum() ;
  ::int32_t allusernum() const;
  void set_allusernum(::int32_t value);

  private:
  ::int32_t _internal_allusernum() const;
  void _internal_set_allusernum(::int32_t value);

  public:
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
  bool has_msgid() const;
  void clear_msgid() ;
  ::CSToRC::MsgID msgid() const;
  void set_msgid(::CSToRC::MsgID value);

  private:
  ::CSToRC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::CSToRC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.AllServerInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr servername_;
    ::google::protobuf::internal::ArenaStringPtr curttime_;
    ::int32_t roomusernum_;
    ::int32_t battleusernum_;
    float loadfactory_;
    ::int32_t allusernum_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class AddNoticeResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.AddNoticeResp) */ {
 public:
  inline AddNoticeResp() : AddNoticeResp(nullptr) {}
  ~AddNoticeResp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddNoticeResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddNoticeResp(const AddNoticeResp& from) : AddNoticeResp(nullptr, from) {}
  inline AddNoticeResp(AddNoticeResp&& from) noexcept
      : AddNoticeResp(nullptr, std::move(from)) {}
  inline AddNoticeResp& operator=(const AddNoticeResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNoticeResp& operator=(AddNoticeResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddNoticeResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddNoticeResp* internal_default_instance() {
    return reinterpret_cast<const AddNoticeResp*>(
        &_AddNoticeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(AddNoticeResp& a, AddNoticeResp& b) { a.Swap(&b); }
  inline void Swap(AddNoticeResp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddNoticeResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddNoticeResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AddNoticeResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddNoticeResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddNoticeResp& from) { AddNoticeResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddNoticeResp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.AddNoticeResp"; }

 protected:
  explicit AddNoticeResp(::google::protobuf::Arena* arena);
  AddNoticeResp(::google::protobuf::Arena* arena, const AddNoticeResp& from);
  AddNoticeResp(::google::protobuf::Arena* arena, AddNoticeResp&& from) noexcept
      : AddNoticeResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRstFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // optional bool rst = 2;
  bool has_rst() const;
  void clear_rst() ;
  bool rst() const;
  void set_rst(bool value);

  private:
  bool _internal_rst() const;
  void _internal_set_rst(bool value);

  public:
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
  bool has_msgid() const;
  void clear_msgid() ;
  ::CSToRC::MsgID msgid() const;
  void set_msgid(::CSToRC::MsgID value);

  private:
  ::CSToRC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::CSToRC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.AddNoticeResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool rst_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class AddMailResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.AddMailResp) */ {
 public:
  inline AddMailResp() : AddMailResp(nullptr) {}
  ~AddMailResp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddMailResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddMailResp(const AddMailResp& from) : AddMailResp(nullptr, from) {}
  inline AddMailResp(AddMailResp&& from) noexcept
      : AddMailResp(nullptr, std::move(from)) {}
  inline AddMailResp& operator=(const AddMailResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddMailResp& operator=(AddMailResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddMailResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddMailResp* internal_default_instance() {
    return reinterpret_cast<const AddMailResp*>(
        &_AddMailResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AddMailResp& a, AddMailResp& b) { a.Swap(&b); }
  inline void Swap(AddMailResp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddMailResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddMailResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AddMailResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddMailResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddMailResp& from) { AddMailResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddMailResp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.AddMailResp"; }

 protected:
  explicit AddMailResp(::google::protobuf::Arena* arena);
  AddMailResp(::google::protobuf::Arena* arena, const AddMailResp& from);
  AddMailResp(::google::protobuf::Arena* arena, AddMailResp&& from) noexcept
      : AddMailResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRstFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // optional bool rst = 2;
  bool has_rst() const;
  void clear_rst() ;
  bool rst() const;
  void set_rst(bool value);

  private:
  bool _internal_rst() const;
  void _internal_set_rst(bool value);

  public:
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
  bool has_msgid() const;
  void clear_msgid() ;
  ::CSToRC::MsgID msgid() const;
  void set_msgid(::CSToRC::MsgID value);

  private:
  ::CSToRC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::CSToRC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.AddMailResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool rst_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class QueryCDkeyInfoResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.QueryCDkeyInfoResp) */ {
 public:
  inline QueryCDkeyInfoResp() : QueryCDkeyInfoResp(nullptr) {}
  ~QueryCDkeyInfoResp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCDkeyInfoResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryCDkeyInfoResp(const QueryCDkeyInfoResp& from) : QueryCDkeyInfoResp(nullptr, from) {}
  inline QueryCDkeyInfoResp(QueryCDkeyInfoResp&& from) noexcept
      : QueryCDkeyInfoResp(nullptr, std::move(from)) {}
  inline QueryCDkeyInfoResp& operator=(const QueryCDkeyInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCDkeyInfoResp& operator=(QueryCDkeyInfoResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCDkeyInfoResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCDkeyInfoResp* internal_default_instance() {
    return reinterpret_cast<const QueryCDkeyInfoResp*>(
        &_QueryCDkeyInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(QueryCDkeyInfoResp& a, QueryCDkeyInfoResp& b) { a.Swap(&b); }
  inline void Swap(QueryCDkeyInfoResp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCDkeyInfoResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCDkeyInfoResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QueryCDkeyInfoResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryCDkeyInfoResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryCDkeyInfoResp& from) { QueryCDkeyInfoResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QueryCDkeyInfoResp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.QueryCDkeyInfoResp"; }

 protected:
  explicit QueryCDkeyInfoResp(::google::protobuf::Arena* arena);
  QueryCDkeyInfoResp(::google::protobuf::Arena* arena, const QueryCDkeyInfoResp& from);
  QueryCDkeyInfoResp(::google::protobuf::Arena* arena, QueryCDkeyInfoResp&& from) noexcept
      : QueryCDkeyInfoResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using CDKey_Info = QueryCDkeyInfoResp_CDKey_Info;

  // accessors -------------------------------------------------------
  enum : int {
    kInfoFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
  int info_size() const;
  private:
  int _internal_info_size() const;

  public:
  void clear_info() ;
  ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* mutable_info(int index);
  ::google::protobuf::RepeatedPtrField<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>* mutable_info();

  private:
  const ::google::protobuf::RepeatedPtrField<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>& _internal_info() const;
  ::google::protobuf::RepeatedPtrField<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>* _internal_mutable_info();
  public:
  const ::CSToRC::QueryCDkeyInfoResp_CDKey_Info& info(int index) const;
  ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* add_info();
  const ::google::protobuf::RepeatedPtrField<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>& info() const;
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
  bool has_msgid() const;
  void clear_msgid() ;
  ::CSToRC::MsgID msgid() const;
  void set_msgid(::CSToRC::MsgID value);

  private:
  ::CSToRC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::CSToRC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.QueryCDkeyInfoResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::CSToRC::QueryCDkeyInfoResp_CDKey_Info > info_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};
// -------------------------------------------------------------------

class AllNoticeInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSToRC.AllNoticeInfo) */ {
 public:
  inline AllNoticeInfo() : AllNoticeInfo(nullptr) {}
  ~AllNoticeInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AllNoticeInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline AllNoticeInfo(const AllNoticeInfo& from) : AllNoticeInfo(nullptr, from) {}
  inline AllNoticeInfo(AllNoticeInfo&& from) noexcept
      : AllNoticeInfo(nullptr, std::move(from)) {}
  inline AllNoticeInfo& operator=(const AllNoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllNoticeInfo& operator=(AllNoticeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllNoticeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllNoticeInfo* internal_default_instance() {
    return reinterpret_cast<const AllNoticeInfo*>(
        &_AllNoticeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(AllNoticeInfo& a, AllNoticeInfo& b) { a.Swap(&b); }
  inline void Swap(AllNoticeInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllNoticeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllNoticeInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AllNoticeInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllNoticeInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AllNoticeInfo& from) { AllNoticeInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AllNoticeInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSToRC.AllNoticeInfo"; }

 protected:
  explicit AllNoticeInfo(::google::protobuf::Arena* arena);
  AllNoticeInfo(::google::protobuf::Arena* arena, const AllNoticeInfo& from);
  AllNoticeInfo(::google::protobuf::Arena* arena, AllNoticeInfo&& from) noexcept
      : AllNoticeInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNoticesFieldNumber = 2,
    kMsgidFieldNumber = 1,
  };
  // repeated .CSToRC.NoticeInfo notices = 2;
  int notices_size() const;
  private:
  int _internal_notices_size() const;

  public:
  void clear_notices() ;
  ::CSToRC::NoticeInfo* mutable_notices(int index);
  ::google::protobuf::RepeatedPtrField<::CSToRC::NoticeInfo>* mutable_notices();

  private:
  const ::google::protobuf::RepeatedPtrField<::CSToRC::NoticeInfo>& _internal_notices() const;
  ::google::protobuf::RepeatedPtrField<::CSToRC::NoticeInfo>* _internal_mutable_notices();
  public:
  const ::CSToRC::NoticeInfo& notices(int index) const;
  ::CSToRC::NoticeInfo* add_notices();
  const ::google::protobuf::RepeatedPtrField<::CSToRC::NoticeInfo>& notices() const;
  // optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
  bool has_msgid() const;
  void clear_msgid() ;
  ::CSToRC::MsgID msgid() const;
  void set_msgid(::CSToRC::MsgID value);

  private:
  ::CSToRC::MsgID _internal_msgid() const;
  void _internal_set_msgid(::CSToRC::MsgID value);

  public:
  // @@protoc_insertion_point(class_scope:CSToRC.AllNoticeInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::CSToRC::NoticeInfo > notices_;
    int msgid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CSToRC_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryCDkeyInfoResp_CDKey_Info

// optional int32 id = 1;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::id() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.id)
  return _internal_id();
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_id(::int32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.id)
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// optional string title = 2;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryCDkeyInfoResp_CDKey_Info::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryCDkeyInfoResp_CDKey_Info::set_title(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
}
inline std::string* QueryCDkeyInfoResp_CDKey_Info::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
  return _s;
}
inline const std::string& QueryCDkeyInfoResp_CDKey_Info::_internal_title() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.title_.Get();
}
inline void QueryCDkeyInfoResp_CDKey_Info::_internal_set_title(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.title_.Set(value, GetArena());
}
inline std::string* QueryCDkeyInfoResp_CDKey_Info::_internal_mutable_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* QueryCDkeyInfoResp_CDKey_Info::release_title() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.title_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_allocated_title(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.title_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSToRC.QueryCDkeyInfoResp.CDKey_Info.title)
}

// optional int32 platform = 3;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_platform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_platform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.platform_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::platform() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.platform)
  return _internal_platform();
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_platform(::int32_t value) {
  _internal_set_platform(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.platform)
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::_internal_platform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.platform_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::_internal_set_platform(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.platform_ = value;
}

// optional int64 end_tiem = 4;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_end_tiem() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_end_tiem() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_tiem_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t QueryCDkeyInfoResp_CDKey_Info::end_tiem() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.end_tiem)
  return _internal_end_tiem();
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_end_tiem(::int64_t value) {
  _internal_set_end_tiem(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.end_tiem)
}
inline ::int64_t QueryCDkeyInfoResp_CDKey_Info::_internal_end_tiem() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_tiem_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::_internal_set_end_tiem(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_tiem_ = value;
}

// optional int32 code_num = 5;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_code_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_code_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::code_num() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.code_num)
  return _internal_code_num();
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_code_num(::int32_t value) {
  _internal_set_code_num(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.code_num)
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::_internal_code_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_num_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::_internal_set_code_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_num_ = value;
}

// optional int32 code_len = 6;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_code_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_code_len() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_len_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::code_len() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.code_len)
  return _internal_code_len();
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_code_len(::int32_t value) {
  _internal_set_code_len(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.code_len)
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::_internal_code_len() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_len_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::_internal_set_code_len(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_len_ = value;
}

// optional int32 type = 7;
inline bool QueryCDkeyInfoResp_CDKey_Info::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void QueryCDkeyInfoResp_CDKey_Info::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::type() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.CDKey_Info.type)
  return _internal_type();
}
inline void QueryCDkeyInfoResp_CDKey_Info::set_type(::int32_t value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.CDKey_Info.type)
}
inline ::int32_t QueryCDkeyInfoResp_CDKey_Info::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void QueryCDkeyInfoResp_CDKey_Info::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// QueryCDkeyInfoResp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskQueryCDkeyResp];
inline bool QueryCDkeyInfoResp::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void QueryCDkeyInfoResp::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 33508;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CSToRC::MsgID QueryCDkeyInfoResp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.msgid)
  return _internal_msgid();
}
inline void QueryCDkeyInfoResp::set_msgid(::CSToRC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSToRC.QueryCDkeyInfoResp.msgid)
}
inline ::CSToRC::MsgID QueryCDkeyInfoResp::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CSToRC::MsgID>(_impl_.msgid_);
}
inline void QueryCDkeyInfoResp::_internal_set_msgid(::CSToRC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::CSToRC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// repeated .CSToRC.QueryCDkeyInfoResp.CDKey_Info info = 2;
inline int QueryCDkeyInfoResp::_internal_info_size() const {
  return _internal_info().size();
}
inline int QueryCDkeyInfoResp::info_size() const {
  return _internal_info_size();
}
inline void QueryCDkeyInfoResp::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.info_.Clear();
}
inline ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* QueryCDkeyInfoResp::mutable_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CSToRC.QueryCDkeyInfoResp.info)
  return _internal_mutable_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>* QueryCDkeyInfoResp::mutable_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CSToRC.QueryCDkeyInfoResp.info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_info();
}
inline const ::CSToRC::QueryCDkeyInfoResp_CDKey_Info& QueryCDkeyInfoResp::info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSToRC.QueryCDkeyInfoResp.info)
  return _internal_info().Get(index);
}
inline ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* QueryCDkeyInfoResp::add_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::CSToRC::QueryCDkeyInfoResp_CDKey_Info* _add = _internal_mutable_info()->Add();
  // @@protoc_insertion_point(field_add:CSToRC.QueryCDkeyInfoResp.info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>& QueryCDkeyInfoResp::info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CSToRC.QueryCDkeyInfoResp.info)
  return _internal_info();
}
inline const ::google::protobuf::RepeatedPtrField<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>&
QueryCDkeyInfoResp::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.info_;
}
inline ::google::protobuf::RepeatedPtrField<::CSToRC::QueryCDkeyInfoResp_CDKey_Info>*
QueryCDkeyInfoResp::_internal_mutable_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.info_;
}

// -------------------------------------------------------------------

// AddMailResp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskAddOneMailResp];
inline bool AddMailResp::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AddMailResp::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 33507;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CSToRC::MsgID AddMailResp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AddMailResp.msgid)
  return _internal_msgid();
}
inline void AddMailResp::set_msgid(::CSToRC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSToRC.AddMailResp.msgid)
}
inline ::CSToRC::MsgID AddMailResp::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CSToRC::MsgID>(_impl_.msgid_);
}
inline void AddMailResp::_internal_set_msgid(::CSToRC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::CSToRC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional bool rst = 2;
inline bool AddMailResp::has_rst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AddMailResp::clear_rst() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rst_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool AddMailResp::rst() const {
  // @@protoc_insertion_point(field_get:CSToRC.AddMailResp.rst)
  return _internal_rst();
}
inline void AddMailResp::set_rst(bool value) {
  _internal_set_rst(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSToRC.AddMailResp.rst)
}
inline bool AddMailResp::_internal_rst() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rst_;
}
inline void AddMailResp::_internal_set_rst(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rst_ = value;
}

// -------------------------------------------------------------------

// AskRegistRsp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AskRegistRsp];
inline bool AskRegistRsp::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AskRegistRsp::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 33501;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CSToRC::MsgID AskRegistRsp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AskRegistRsp.msgid)
  return _internal_msgid();
}
inline void AskRegistRsp::set_msgid(::CSToRC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSToRC.AskRegistRsp.msgid)
}
inline ::CSToRC::MsgID AskRegistRsp::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CSToRC::MsgID>(_impl_.msgid_);
}
inline void AskRegistRsp::_internal_set_msgid(::CSToRC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::CSToRC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional bool rst = 2;
inline bool AskRegistRsp::has_rst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AskRegistRsp::clear_rst() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rst_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool AskRegistRsp::rst() const {
  // @@protoc_insertion_point(field_get:CSToRC.AskRegistRsp.rst)
  return _internal_rst();
}
inline void AskRegistRsp::set_rst(bool value) {
  _internal_set_rst(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSToRC.AskRegistRsp.rst)
}
inline bool AskRegistRsp::_internal_rst() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rst_;
}
inline void AskRegistRsp::_internal_set_rst(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rst_ = value;
}

// -------------------------------------------------------------------

// AllServerInfo

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllServerInfo];
inline bool AllServerInfo::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void AllServerInfo::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 33502;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::CSToRC::MsgID AllServerInfo::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.msgid)
  return _internal_msgid();
}
inline void AllServerInfo::set_msgid(::CSToRC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.msgid)
}
inline ::CSToRC::MsgID AllServerInfo::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CSToRC::MsgID>(_impl_.msgid_);
}
inline void AllServerInfo::_internal_set_msgid(::CSToRC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::CSToRC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional bytes servername = 2;
inline bool AllServerInfo::has_servername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AllServerInfo::clear_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.servername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AllServerInfo::servername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.servername)
  return _internal_servername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AllServerInfo::set_servername(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servername_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.servername)
}
inline std::string* AllServerInfo::mutable_servername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_servername();
  // @@protoc_insertion_point(field_mutable:CSToRC.AllServerInfo.servername)
  return _s;
}
inline const std::string& AllServerInfo::_internal_servername() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.servername_.Get();
}
inline void AllServerInfo::_internal_set_servername(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servername_.Set(value, GetArena());
}
inline std::string* AllServerInfo::_internal_mutable_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.servername_.Mutable( GetArena());
}
inline std::string* AllServerInfo::release_servername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CSToRC.AllServerInfo.servername)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.servername_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.servername_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AllServerInfo::set_allocated_servername(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.servername_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.servername_.IsDefault()) {
          _impl_.servername_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSToRC.AllServerInfo.servername)
}

// optional int32 roomUserNum = 3;
inline bool AllServerInfo::has_roomusernum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AllServerInfo::clear_roomusernum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roomusernum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AllServerInfo::roomusernum() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.roomUserNum)
  return _internal_roomusernum();
}
inline void AllServerInfo::set_roomusernum(::int32_t value) {
  _internal_set_roomusernum(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.roomUserNum)
}
inline ::int32_t AllServerInfo::_internal_roomusernum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roomusernum_;
}
inline void AllServerInfo::_internal_set_roomusernum(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roomusernum_ = value;
}

// optional int32 battleUserNum = 4;
inline bool AllServerInfo::has_battleusernum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AllServerInfo::clear_battleusernum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.battleusernum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t AllServerInfo::battleusernum() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.battleUserNum)
  return _internal_battleusernum();
}
inline void AllServerInfo::set_battleusernum(::int32_t value) {
  _internal_set_battleusernum(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.battleUserNum)
}
inline ::int32_t AllServerInfo::_internal_battleusernum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.battleusernum_;
}
inline void AllServerInfo::_internal_set_battleusernum(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.battleusernum_ = value;
}

// optional float loadFactory = 5;
inline bool AllServerInfo::has_loadfactory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AllServerInfo::clear_loadfactory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.loadfactory_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float AllServerInfo::loadfactory() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.loadFactory)
  return _internal_loadfactory();
}
inline void AllServerInfo::set_loadfactory(float value) {
  _internal_set_loadfactory(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.loadFactory)
}
inline float AllServerInfo::_internal_loadfactory() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.loadfactory_;
}
inline void AllServerInfo::_internal_set_loadfactory(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.loadfactory_ = value;
}

// optional int32 allUserNum = 6;
inline bool AllServerInfo::has_allusernum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void AllServerInfo::clear_allusernum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allusernum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t AllServerInfo::allusernum() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.allUserNum)
  return _internal_allusernum();
}
inline void AllServerInfo::set_allusernum(::int32_t value) {
  _internal_set_allusernum(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.allUserNum)
}
inline ::int32_t AllServerInfo::_internal_allusernum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allusernum_;
}
inline void AllServerInfo::_internal_set_allusernum(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allusernum_ = value;
}

// optional string curttime = 7;
inline bool AllServerInfo::has_curttime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AllServerInfo::clear_curttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.curttime_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AllServerInfo::curttime() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSToRC.AllServerInfo.curttime)
  return _internal_curttime();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AllServerInfo::set_curttime(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.curttime_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CSToRC.AllServerInfo.curttime)
}
inline std::string* AllServerInfo::mutable_curttime() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_curttime();
  // @@protoc_insertion_point(field_mutable:CSToRC.AllServerInfo.curttime)
  return _s;
}
inline const std::string& AllServerInfo::_internal_curttime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.curttime_.Get();
}
inline void AllServerInfo::_internal_set_curttime(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.curttime_.Set(value, GetArena());
}
inline std::string* AllServerInfo::_internal_mutable_curttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.curttime_.Mutable( GetArena());
}
inline std::string* AllServerInfo::release_curttime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CSToRC.AllServerInfo.curttime)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.curttime_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.curttime_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AllServerInfo::set_allocated_curttime(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.curttime_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.curttime_.IsDefault()) {
          _impl_.curttime_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSToRC.AllServerInfo.curttime)
}

// -------------------------------------------------------------------

// ServerUserInfo

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_ServerUserInfo];
inline bool ServerUserInfo::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ServerUserInfo::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 33503;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CSToRC::MsgID ServerUserInfo::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.ServerUserInfo.msgid)
  return _internal_msgid();
}
inline void ServerUserInfo::set_msgid(::CSToRC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSToRC.ServerUserInfo.msgid)
}
inline ::CSToRC::MsgID ServerUserInfo::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CSToRC::MsgID>(_impl_.msgid_);
}
inline void ServerUserInfo::_internal_set_msgid(::CSToRC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::CSToRC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional int32 allUserNum = 2;
inline bool ServerUserInfo::has_allusernum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ServerUserInfo::clear_allusernum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allusernum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ServerUserInfo::allusernum() const {
  // @@protoc_insertion_point(field_get:CSToRC.ServerUserInfo.allUserNum)
  return _internal_allusernum();
}
inline void ServerUserInfo::set_allusernum(::int32_t value) {
  _internal_set_allusernum(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSToRC.ServerUserInfo.allUserNum)
}
inline ::int32_t ServerUserInfo::_internal_allusernum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allusernum_;
}
inline void ServerUserInfo::_internal_set_allusernum(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allusernum_ = value;
}

// -------------------------------------------------------------------

// NoticeInfo

// optional bytes notice = 1;
inline bool NoticeInfo::has_notice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NoticeInfo::clear_notice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.notice_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NoticeInfo::notice() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSToRC.NoticeInfo.notice)
  return _internal_notice();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NoticeInfo::set_notice(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.notice_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CSToRC.NoticeInfo.notice)
}
inline std::string* NoticeInfo::mutable_notice() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_notice();
  // @@protoc_insertion_point(field_mutable:CSToRC.NoticeInfo.notice)
  return _s;
}
inline const std::string& NoticeInfo::_internal_notice() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.notice_.Get();
}
inline void NoticeInfo::_internal_set_notice(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.notice_.Set(value, GetArena());
}
inline std::string* NoticeInfo::_internal_mutable_notice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.notice_.Mutable( GetArena());
}
inline std::string* NoticeInfo::release_notice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CSToRC.NoticeInfo.notice)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.notice_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notice_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NoticeInfo::set_allocated_notice(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.notice_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.notice_.IsDefault()) {
          _impl_.notice_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSToRC.NoticeInfo.notice)
}

// -------------------------------------------------------------------

// AllNoticeInfo

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AllNoticeInfo];
inline bool AllNoticeInfo::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AllNoticeInfo::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 33504;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CSToRC::MsgID AllNoticeInfo::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AllNoticeInfo.msgid)
  return _internal_msgid();
}
inline void AllNoticeInfo::set_msgid(::CSToRC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSToRC.AllNoticeInfo.msgid)
}
inline ::CSToRC::MsgID AllNoticeInfo::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CSToRC::MsgID>(_impl_.msgid_);
}
inline void AllNoticeInfo::_internal_set_msgid(::CSToRC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::CSToRC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// repeated .CSToRC.NoticeInfo notices = 2;
inline int AllNoticeInfo::_internal_notices_size() const {
  return _internal_notices().size();
}
inline int AllNoticeInfo::notices_size() const {
  return _internal_notices_size();
}
inline void AllNoticeInfo::clear_notices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.notices_.Clear();
}
inline ::CSToRC::NoticeInfo* AllNoticeInfo::mutable_notices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CSToRC.AllNoticeInfo.notices)
  return _internal_mutable_notices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CSToRC::NoticeInfo>* AllNoticeInfo::mutable_notices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CSToRC.AllNoticeInfo.notices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_notices();
}
inline const ::CSToRC::NoticeInfo& AllNoticeInfo::notices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSToRC.AllNoticeInfo.notices)
  return _internal_notices().Get(index);
}
inline ::CSToRC::NoticeInfo* AllNoticeInfo::add_notices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::CSToRC::NoticeInfo* _add = _internal_mutable_notices()->Add();
  // @@protoc_insertion_point(field_add:CSToRC.AllNoticeInfo.notices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CSToRC::NoticeInfo>& AllNoticeInfo::notices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CSToRC.AllNoticeInfo.notices)
  return _internal_notices();
}
inline const ::google::protobuf::RepeatedPtrField<::CSToRC::NoticeInfo>&
AllNoticeInfo::_internal_notices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.notices_;
}
inline ::google::protobuf::RepeatedPtrField<::CSToRC::NoticeInfo>*
AllNoticeInfo::_internal_mutable_notices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.notices_;
}

// -------------------------------------------------------------------

// AddNoticeResp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_AddNoticeResp];
inline bool AddNoticeResp::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AddNoticeResp::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 33505;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CSToRC::MsgID AddNoticeResp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.AddNoticeResp.msgid)
  return _internal_msgid();
}
inline void AddNoticeResp::set_msgid(::CSToRC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSToRC.AddNoticeResp.msgid)
}
inline ::CSToRC::MsgID AddNoticeResp::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CSToRC::MsgID>(_impl_.msgid_);
}
inline void AddNoticeResp::_internal_set_msgid(::CSToRC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::CSToRC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional bool rst = 2;
inline bool AddNoticeResp::has_rst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AddNoticeResp::clear_rst() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rst_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool AddNoticeResp::rst() const {
  // @@protoc_insertion_point(field_get:CSToRC.AddNoticeResp.rst)
  return _internal_rst();
}
inline void AddNoticeResp::set_rst(bool value) {
  _internal_set_rst(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSToRC.AddNoticeResp.rst)
}
inline bool AddNoticeResp::_internal_rst() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rst_;
}
inline void AddNoticeResp::_internal_set_rst(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rst_ = value;
}

// -------------------------------------------------------------------

// DeleteNoticeResp

// optional .CSToRC.MsgID msgid = 1 [default = eMsgCS2RC_DeleteNoticeResp];
inline bool DeleteNoticeResp::has_msgid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DeleteNoticeResp::clear_msgid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msgid_ = 33506;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CSToRC::MsgID DeleteNoticeResp::msgid() const {
  // @@protoc_insertion_point(field_get:CSToRC.DeleteNoticeResp.msgid)
  return _internal_msgid();
}
inline void DeleteNoticeResp::set_msgid(::CSToRC::MsgID value) {
  _internal_set_msgid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSToRC.DeleteNoticeResp.msgid)
}
inline ::CSToRC::MsgID DeleteNoticeResp::_internal_msgid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CSToRC::MsgID>(_impl_.msgid_);
}
inline void DeleteNoticeResp::_internal_set_msgid(::CSToRC::MsgID value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::CSToRC::MsgID_IsValid(value));
  _impl_.msgid_ = value;
}

// optional bool rst = 2;
inline bool DeleteNoticeResp::has_rst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DeleteNoticeResp::clear_rst() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rst_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool DeleteNoticeResp::rst() const {
  // @@protoc_insertion_point(field_get:CSToRC.DeleteNoticeResp.rst)
  return _internal_rst();
}
inline void DeleteNoticeResp::set_rst(bool value) {
  _internal_set_rst(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSToRC.DeleteNoticeResp.rst)
}
inline bool DeleteNoticeResp::_internal_rst() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rst_;
}
inline void DeleteNoticeResp::_internal_set_rst(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rst_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace CSToRC


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::CSToRC::MsgID> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CSToRC::MsgID>() {
  return ::CSToRC::MsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_CSToRC_2eproto_2epb_2eh
