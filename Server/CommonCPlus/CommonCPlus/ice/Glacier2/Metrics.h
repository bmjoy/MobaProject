// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Glacier2_Metrics_h__
#define __Glacier2_Metrics_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Metrics.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef GLACIER2_API
#   ifdef GLACIER2_API_EXPORTS
#       define GLACIER2_API ICE_DECLSPEC_EXPORT
#   else
#       define GLACIER2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace IceMX
{

class SessionMetrics;
GLACIER2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceMX::SessionMetrics>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceMX::SessionMetrics*);

}

}

namespace IceMX
{

class SessionMetrics;
bool operator==(const SessionMetrics&, const SessionMetrics&);
bool operator<(const SessionMetrics&, const SessionMetrics&);
GLACIER2_API ::Ice::Object* upCast(::IceMX::SessionMetrics*);
typedef ::IceInternal::Handle< ::IceMX::SessionMetrics> SessionMetricsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceMX::SessionMetrics> SessionMetricsPrx;
GLACIER2_API void __patch(SessionMetricsPtr&, const ::Ice::ObjectPtr&);

}

namespace IceMX
{

}

namespace IceProxy
{

namespace IceMX
{

class SessionMetrics : virtual public ::IceProxy::IceMX::Metrics
{
public:
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_secure(bool __secure) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_twoway() const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_oneway() const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_batchOneway() const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_datagram() const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_batchDatagram() const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_compress(bool __compress) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SessionMetrics> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SessionMetrics*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace IceMX
{

class GLACIER2_API SessionMetrics : virtual public ::IceDelegate::IceMX::Metrics
{
public:
};

}

}

namespace IceDelegateM
{

namespace IceMX
{

class GLACIER2_API SessionMetrics : virtual public ::IceDelegate::IceMX::SessionMetrics,
                                    virtual public ::IceDelegateM::IceMX::Metrics
{
public:
};

}

}

namespace IceDelegateD
{

namespace IceMX
{

class GLACIER2_API SessionMetrics : virtual public ::IceDelegate::IceMX::SessionMetrics,
                                    virtual public ::IceDelegateD::IceMX::Metrics
{
public:
};

}

}

namespace IceMX
{

class GLACIER2_API SessionMetrics : public ::IceMX::Metrics
{
public:

    typedef SessionMetricsPrx ProxyType;
    typedef SessionMetricsPtr PointerType;

    SessionMetrics() :
        forwardedClient(0),
        forwardedServer(0),
        routingTableSize(0),
        queuedClient(0),
        queuedServer(0),
        overriddenClient(0),
        overriddenServer(0)
    {
    }

    SessionMetrics(const ::std::string& __ice_id, ::Ice::Long __ice_total, ::Ice::Int __ice_current, ::Ice::Long __ice_totalLifetime, ::Ice::Int __ice_failures, ::Ice::Int __ice_forwardedClient, ::Ice::Int __ice_forwardedServer, ::Ice::Int __ice_routingTableSize, ::Ice::Int __ice_queuedClient, ::Ice::Int __ice_queuedServer, ::Ice::Int __ice_overriddenClient, ::Ice::Int __ice_overriddenServer) :
        ::IceMX::Metrics(__ice_id, __ice_total, __ice_current, __ice_totalLifetime, __ice_failures)
        ,
        forwardedClient(__ice_forwardedClient),
        forwardedServer(__ice_forwardedServer),
        routingTableSize(__ice_routingTableSize),
        queuedClient(__ice_queuedClient),
        queuedServer(__ice_queuedServer),
        overriddenClient(__ice_overriddenClient),
        overriddenServer(__ice_overriddenServer)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::IceMX::Metrics::__writeImpl;
    using ::IceMX::Metrics::__readImpl;
    #endif

public:

    ::Ice::Int forwardedClient;

    ::Ice::Int forwardedServer;

    ::Ice::Int routingTableSize;

    ::Ice::Int queuedClient;

    ::Ice::Int queuedServer;

    ::Ice::Int overriddenClient;

    ::Ice::Int overriddenServer;

protected:

    virtual ~SessionMetrics() {}

    friend class SessionMetrics__staticInit;
};

class SessionMetrics__staticInit
{
public:

    ::IceMX::SessionMetrics _init;
};

static SessionMetrics__staticInit _SessionMetrics_init;

inline bool operator==(const SessionMetrics& l, const SessionMetrics& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SessionMetrics& l, const SessionMetrics& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace IceMX
{

}

#endif
