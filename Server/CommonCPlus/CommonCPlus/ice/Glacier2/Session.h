// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Glacier2_Session_h__
#define __Glacier2_Session_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/Identity.h>
#include <Glacier2/SSLInfo.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef GLACIER2_API
#   ifdef GLACIER2_API_EXPORTS
#       define GLACIER2_API ICE_DECLSPEC_EXPORT
#   else
#       define GLACIER2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace Glacier2
{

class Session;
GLACIER2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::Session>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::Session*);

class StringSet;
GLACIER2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::StringSet>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::StringSet*);

class IdentitySet;
GLACIER2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::IdentitySet>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::IdentitySet*);

class SessionControl;
GLACIER2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SessionControl>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::SessionControl*);

class SessionManager;
GLACIER2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SessionManager>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::SessionManager*);

class SSLSessionManager;
GLACIER2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SSLSessionManager>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::SSLSessionManager*);

}

}

namespace Glacier2
{

class Session;
bool operator==(const Session&, const Session&);
bool operator<(const Session&, const Session&);
GLACIER2_API ::Ice::Object* upCast(::Glacier2::Session*);
typedef ::IceInternal::Handle< ::Glacier2::Session> SessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::Session> SessionPrx;
GLACIER2_API void __patch(SessionPtr&, const ::Ice::ObjectPtr&);

class StringSet;
bool operator==(const StringSet&, const StringSet&);
bool operator<(const StringSet&, const StringSet&);
GLACIER2_API ::Ice::Object* upCast(::Glacier2::StringSet*);
typedef ::IceInternal::Handle< ::Glacier2::StringSet> StringSetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::StringSet> StringSetPrx;
GLACIER2_API void __patch(StringSetPtr&, const ::Ice::ObjectPtr&);

class IdentitySet;
bool operator==(const IdentitySet&, const IdentitySet&);
bool operator<(const IdentitySet&, const IdentitySet&);
GLACIER2_API ::Ice::Object* upCast(::Glacier2::IdentitySet*);
typedef ::IceInternal::Handle< ::Glacier2::IdentitySet> IdentitySetPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::IdentitySet> IdentitySetPrx;
GLACIER2_API void __patch(IdentitySetPtr&, const ::Ice::ObjectPtr&);

class SessionControl;
bool operator==(const SessionControl&, const SessionControl&);
bool operator<(const SessionControl&, const SessionControl&);
GLACIER2_API ::Ice::Object* upCast(::Glacier2::SessionControl*);
typedef ::IceInternal::Handle< ::Glacier2::SessionControl> SessionControlPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SessionControl> SessionControlPrx;
GLACIER2_API void __patch(SessionControlPtr&, const ::Ice::ObjectPtr&);

class SessionManager;
bool operator==(const SessionManager&, const SessionManager&);
bool operator<(const SessionManager&, const SessionManager&);
GLACIER2_API ::Ice::Object* upCast(::Glacier2::SessionManager*);
typedef ::IceInternal::Handle< ::Glacier2::SessionManager> SessionManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SessionManager> SessionManagerPrx;
GLACIER2_API void __patch(SessionManagerPtr&, const ::Ice::ObjectPtr&);

class SSLSessionManager;
bool operator==(const SSLSessionManager&, const SSLSessionManager&);
bool operator<(const SSLSessionManager&, const SSLSessionManager&);
GLACIER2_API ::Ice::Object* upCast(::Glacier2::SSLSessionManager*);
typedef ::IceInternal::Handle< ::Glacier2::SSLSessionManager> SSLSessionManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SSLSessionManager> SSLSessionManagerPrx;
GLACIER2_API void __patch(SSLSessionManagerPtr&, const ::Ice::ObjectPtr&);

}

namespace Glacier2
{

class GLACIER2_API CannotCreateSessionException : public ::Ice::UserException
{
public:

    CannotCreateSessionException() {}
    explicit CannotCreateSessionException(const ::std::string&);
    virtual ~CannotCreateSessionException() throw();

    virtual ::std::string ice_name() const;
    virtual CannotCreateSessionException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string reason;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__write;
    using ::Ice::UserException::__read;
    #endif

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif

    ::Ice::SlicedDataPtr __slicedData;
};

static CannotCreateSessionException __CannotCreateSessionException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Glacier2::CannotCreateSessionException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Glacier2
{

class Callback_Session_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Session_destroy_Base> Callback_Session_destroyPtr;

class Callback_StringSet_add_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StringSet_add_Base> Callback_StringSet_addPtr;

class Callback_StringSet_remove_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StringSet_remove_Base> Callback_StringSet_removePtr;

class Callback_StringSet_get_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StringSet_get_Base> Callback_StringSet_getPtr;

class Callback_IdentitySet_add_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IdentitySet_add_Base> Callback_IdentitySet_addPtr;

class Callback_IdentitySet_remove_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IdentitySet_remove_Base> Callback_IdentitySet_removePtr;

class Callback_IdentitySet_get_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IdentitySet_get_Base> Callback_IdentitySet_getPtr;

class Callback_SessionControl_categories_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionControl_categories_Base> Callback_SessionControl_categoriesPtr;

class Callback_SessionControl_adapterIds_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionControl_adapterIds_Base> Callback_SessionControl_adapterIdsPtr;

class Callback_SessionControl_identities_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionControl_identities_Base> Callback_SessionControl_identitiesPtr;

class Callback_SessionControl_getSessionTimeout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionControl_getSessionTimeout_Base> Callback_SessionControl_getSessionTimeoutPtr;

class Callback_SessionControl_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionControl_destroy_Base> Callback_SessionControl_destroyPtr;

class Callback_SessionManager_create_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SessionManager_create_Base> Callback_SessionManager_createPtr;

class Callback_SSLSessionManager_create_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SSLSessionManager_create_Base> Callback_SSLSessionManager_createPtr;

}

namespace IceProxy
{

namespace Glacier2
{

class Session : virtual public ::IceProxy::Ice::Object
{
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Glacier2::Callback_Session_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Glacier2::Callback_Session_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    GLACIER2_API void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API void destroy(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Session> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_secure(bool __secure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_twoway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_oneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchOneway() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_datagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_batchDatagram() const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_compress(bool __compress) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Session> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Session*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class StringSet : virtual public ::IceProxy::Ice::Object
{
public:

    void add(const ::Ice::StringSeq& additions)
    {
        add(additions, 0);
    }
    void add(const ::Ice::StringSeq& additions, const ::Ice::Context& __ctx)
    {
        add(additions, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_add(const ::Ice::StringSeq& additions, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_add(additions, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_add(const ::Ice::StringSeq& additions, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_add(additions, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_add(const ::Ice::StringSeq& additions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_add(additions, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_add(const ::Ice::StringSeq& additions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_add(additions, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_add(const ::Ice::StringSeq& additions)
    {
        return begin_add(additions, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::StringSeq& additions, const ::Ice::Context& __ctx)
    {
        return begin_add(additions, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::StringSeq& additions, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(additions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::StringSeq& additions, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(additions, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::StringSeq& additions, const ::Glacier2::Callback_StringSet_addPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(additions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::StringSeq& additions, const ::Ice::Context& __ctx, const ::Glacier2::Callback_StringSet_addPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(additions, &__ctx, __del, __cookie);
    }

    GLACIER2_API void end_add(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API void add(const ::Ice::StringSeq&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_add(const ::Ice::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void remove(const ::Ice::StringSeq& deletions)
    {
        remove(deletions, 0);
    }
    void remove(const ::Ice::StringSeq& deletions, const ::Ice::Context& __ctx)
    {
        remove(deletions, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_remove(const ::Ice::StringSeq& deletions, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_remove(deletions, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_remove(const ::Ice::StringSeq& deletions, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_remove(deletions, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_remove(const ::Ice::StringSeq& deletions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_remove(deletions, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_remove(const ::Ice::StringSeq& deletions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_remove(deletions, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::StringSeq& deletions)
    {
        return begin_remove(deletions, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::StringSeq& deletions, const ::Ice::Context& __ctx)
    {
        return begin_remove(deletions, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::StringSeq& deletions, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_remove(deletions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::StringSeq& deletions, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_remove(deletions, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::StringSeq& deletions, const ::Glacier2::Callback_StringSet_removePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_remove(deletions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::StringSeq& deletions, const ::Ice::Context& __ctx, const ::Glacier2::Callback_StringSet_removePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_remove(deletions, &__ctx, __del, __cookie);
    }

    GLACIER2_API void end_remove(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API void remove(const ::Ice::StringSeq&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_remove(const ::Ice::StringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::StringSeq get()
    {
        return get(0);
    }
    ::Ice::StringSeq get(const ::Ice::Context& __ctx)
    {
        return get(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_get(const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_get(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_get(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_get(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_get(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_get(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::StringSetPrx __proxy = ::Glacier2::StringSetPrx::uncheckedCast(__result->getProxy());
                ::Ice::StringSeq __ret;
                try
                {
                    __ret = __proxy->end_get(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::StringSeq&)> _response;
        };
        return begin_get(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_get()
    {
        return begin_get(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx)
    {
        return begin_get(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Glacier2::Callback_StringSet_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx, const ::Glacier2::Callback_StringSet_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::Ice::StringSeq end_get(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Ice::StringSeq get(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_get(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<StringSet> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_secure(bool __secure) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_twoway() const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_oneway() const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_batchOneway() const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_datagram() const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_batchDatagram() const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_compress(bool __compress) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_timeout(int __timeout) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<StringSet> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<StringSet*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class IdentitySet : virtual public ::IceProxy::Ice::Object
{
public:

    void add(const ::Ice::IdentitySeq& additions)
    {
        add(additions, 0);
    }
    void add(const ::Ice::IdentitySeq& additions, const ::Ice::Context& __ctx)
    {
        add(additions, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_add(const ::Ice::IdentitySeq& additions, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_add(additions, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_add(const ::Ice::IdentitySeq& additions, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_add(additions, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_add(const ::Ice::IdentitySeq& additions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_add(additions, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_add(const ::Ice::IdentitySeq& additions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_add(additions, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_add(const ::Ice::IdentitySeq& additions)
    {
        return begin_add(additions, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::IdentitySeq& additions, const ::Ice::Context& __ctx)
    {
        return begin_add(additions, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::IdentitySeq& additions, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(additions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::IdentitySeq& additions, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(additions, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::IdentitySeq& additions, const ::Glacier2::Callback_IdentitySet_addPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(additions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_add(const ::Ice::IdentitySeq& additions, const ::Ice::Context& __ctx, const ::Glacier2::Callback_IdentitySet_addPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_add(additions, &__ctx, __del, __cookie);
    }

    GLACIER2_API void end_add(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API void add(const ::Ice::IdentitySeq&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_add(const ::Ice::IdentitySeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void remove(const ::Ice::IdentitySeq& deletions)
    {
        remove(deletions, 0);
    }
    void remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context& __ctx)
    {
        remove(deletions, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_remove(const ::Ice::IdentitySeq& deletions, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_remove(deletions, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_remove(const ::Ice::IdentitySeq& deletions, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_remove(deletions, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_remove(deletions, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_remove(deletions, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::IdentitySeq& deletions)
    {
        return begin_remove(deletions, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context& __ctx)
    {
        return begin_remove(deletions, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::IdentitySeq& deletions, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_remove(deletions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_remove(deletions, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::IdentitySeq& deletions, const ::Glacier2::Callback_IdentitySet_removePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_remove(deletions, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context& __ctx, const ::Glacier2::Callback_IdentitySet_removePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_remove(deletions, &__ctx, __del, __cookie);
    }

    GLACIER2_API void end_remove(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API void remove(const ::Ice::IdentitySeq&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_remove(const ::Ice::IdentitySeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::IdentitySeq get()
    {
        return get(0);
    }
    ::Ice::IdentitySeq get(const ::Ice::Context& __ctx)
    {
        return get(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_get(const ::IceInternal::Function<void (const ::Ice::IdentitySeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_get(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_get(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::IdentitySeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_get(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_get(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_get(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_get(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::IdentitySeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::IdentitySeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::IdentitySetPrx __proxy = ::Glacier2::IdentitySetPrx::uncheckedCast(__result->getProxy());
                ::Ice::IdentitySeq __ret;
                try
                {
                    __ret = __proxy->end_get(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::IdentitySeq&)> _response;
        };
        return begin_get(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_get()
    {
        return begin_get(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx)
    {
        return begin_get(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Glacier2::Callback_IdentitySet_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx, const ::Glacier2::Callback_IdentitySet_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_get(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::Ice::IdentitySeq end_get(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Ice::IdentitySeq get(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_get(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_secure(bool __secure) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_twoway() const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_oneway() const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_batchOneway() const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_datagram() const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_batchDatagram() const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_compress(bool __compress) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_timeout(int __timeout) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<IdentitySet> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<IdentitySet*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SessionControl : virtual public ::IceProxy::Ice::Object
{
public:

    ::Glacier2::StringSetPrx categories()
    {
        return categories(0);
    }
    ::Glacier2::StringSetPrx categories(const ::Ice::Context& __ctx)
    {
        return categories(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_categories(const ::IceInternal::Function<void (const ::Glacier2::StringSetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_categories(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_categories(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_categories(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_categories(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Glacier2::StringSetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_categories(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_categories(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_categories(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_categories(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Glacier2::StringSetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Glacier2::StringSetPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
                ::Glacier2::StringSetPrx __ret;
                try
                {
                    __ret = __proxy->end_categories(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Glacier2::StringSetPrx&)> _response;
        };
        return begin_categories(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_categories()
    {
        return begin_categories(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_categories(const ::Ice::Context& __ctx)
    {
        return begin_categories(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_categories(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_categories(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_categories(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_categories(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_categories(const ::Glacier2::Callback_SessionControl_categoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_categories(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_categories(const ::Ice::Context& __ctx, const ::Glacier2::Callback_SessionControl_categoriesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_categories(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::Glacier2::StringSetPrx end_categories(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Glacier2::StringSetPrx categories(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_categories(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Glacier2::StringSetPrx adapterIds()
    {
        return adapterIds(0);
    }
    ::Glacier2::StringSetPrx adapterIds(const ::Ice::Context& __ctx)
    {
        return adapterIds(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_adapterIds(const ::IceInternal::Function<void (const ::Glacier2::StringSetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_adapterIds(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_adapterIds(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterIds(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterIds(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Glacier2::StringSetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_adapterIds(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_adapterIds(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterIds(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_adapterIds(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Glacier2::StringSetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Glacier2::StringSetPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
                ::Glacier2::StringSetPrx __ret;
                try
                {
                    __ret = __proxy->end_adapterIds(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Glacier2::StringSetPrx&)> _response;
        };
        return begin_adapterIds(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_adapterIds()
    {
        return begin_adapterIds(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterIds(const ::Ice::Context& __ctx)
    {
        return begin_adapterIds(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterIds(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterIds(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterIds(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterIds(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterIds(const ::Glacier2::Callback_SessionControl_adapterIdsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterIds(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterIds(const ::Ice::Context& __ctx, const ::Glacier2::Callback_SessionControl_adapterIdsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterIds(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::Glacier2::StringSetPrx end_adapterIds(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Glacier2::StringSetPrx adapterIds(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_adapterIds(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Glacier2::IdentitySetPrx identities()
    {
        return identities(0);
    }
    ::Glacier2::IdentitySetPrx identities(const ::Ice::Context& __ctx)
    {
        return identities(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_identities(const ::IceInternal::Function<void (const ::Glacier2::IdentitySetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_identities(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_identities(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_identities(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_identities(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Glacier2::IdentitySetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_identities(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_identities(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_identities(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_identities(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Glacier2::IdentitySetPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Glacier2::IdentitySetPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
                ::Glacier2::IdentitySetPrx __ret;
                try
                {
                    __ret = __proxy->end_identities(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Glacier2::IdentitySetPrx&)> _response;
        };
        return begin_identities(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_identities()
    {
        return begin_identities(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_identities(const ::Ice::Context& __ctx)
    {
        return begin_identities(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_identities(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_identities(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_identities(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_identities(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_identities(const ::Glacier2::Callback_SessionControl_identitiesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_identities(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_identities(const ::Ice::Context& __ctx, const ::Glacier2::Callback_SessionControl_identitiesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_identities(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::Glacier2::IdentitySetPrx end_identities(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Glacier2::IdentitySetPrx identities(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_identities(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getSessionTimeout()
    {
        return getSessionTimeout(0);
    }
    ::Ice::Int getSessionTimeout(const ::Ice::Context& __ctx)
    {
        return getSessionTimeout(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSessionTimeout(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSessionTimeout(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSessionTimeout(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSessionTimeout(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSessionTimeout(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getSessionTimeout(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getSessionTimeout(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSessionTimeout()
    {
        return begin_getSessionTimeout(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx)
    {
        return begin_getSessionTimeout(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Glacier2::Callback_SessionControl_getSessionTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::Glacier2::Callback_SessionControl_getSessionTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::Ice::Int end_getSessionTimeout(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Ice::Int getSessionTimeout(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Glacier2::Callback_SessionControl_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Glacier2::Callback_SessionControl_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    GLACIER2_API void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API void destroy(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SessionControl> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_secure(bool __secure) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_twoway() const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_oneway() const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_batchOneway() const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_datagram() const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_batchDatagram() const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_compress(bool __compress) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SessionControl> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SessionControl*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SessionManager : virtual public ::IceProxy::Ice::Object
{
public:

    ::Glacier2::SessionPrx create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control)
    {
        return create(userId, control, 0);
    }
    ::Glacier2::SessionPrx create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx)
    {
        return create(userId, control, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(userId, control, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(userId, control, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(userId, control, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(userId, control, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Glacier2::SessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::SessionManagerPrx __proxy = ::Glacier2::SessionManagerPrx::uncheckedCast(__result->getProxy());
                ::Glacier2::SessionPrx __ret;
                try
                {
                    __ret = __proxy->end_create(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Glacier2::SessionPrx&)> _response;
        };
        return begin_create(userId, control, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control)
    {
        return begin_create(userId, control, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx)
    {
        return begin_create(userId, control, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(userId, control, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(userId, control, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Glacier2::Callback_SessionManager_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(userId, control, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx, const ::Glacier2::Callback_SessionManager_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(userId, control, &__ctx, __del, __cookie);
    }

    GLACIER2_API ::Glacier2::SessionPrx end_create(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Glacier2::SessionPrx create(const ::std::string&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_create(const ::std::string&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SessionManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_twoway() const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_oneway() const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_batchOneway() const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_datagram() const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_batchDatagram() const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SessionManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SessionManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SSLSessionManager : virtual public ::IceProxy::Ice::Object
{
public:

    ::Glacier2::SessionPrx create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control)
    {
        return create(info, control, 0);
    }
    ::Glacier2::SessionPrx create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx)
    {
        return create(info, control, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(info, control, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(info, control, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_create(info, control, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_create(info, control, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Glacier2::SessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::SSLSessionManagerPrx __proxy = ::Glacier2::SSLSessionManagerPrx::uncheckedCast(__result->getProxy());
                ::Glacier2::SessionPrx __ret;
                try
                {
                    __ret = __proxy->end_create(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Glacier2::SessionPrx&)> _response;
        };
        return begin_create(info, control, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control)
    {
        return begin_create(info, control, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx)
    {
        return begin_create(info, control, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(info, control, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(info, control, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Glacier2::Callback_SSLSessionManager_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(info, control, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context& __ctx, const ::Glacier2::Callback_SSLSessionManager_createPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_create(info, control, &__ctx, __del, __cookie);
    }

    GLACIER2_API ::Glacier2::SessionPrx end_create(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Glacier2::SessionPrx create(const ::Glacier2::SSLInfo&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_create(const ::Glacier2::SSLInfo&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_twoway() const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_oneway() const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_batchOneway() const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_datagram() const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_batchDatagram() const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SSLSessionManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SSLSessionManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Glacier2
{

class GLACIER2_API Session : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class GLACIER2_API StringSet : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void add(const ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void remove(const ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::StringSeq get(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class GLACIER2_API IdentitySet : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void add(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void remove(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::IdentitySeq get(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class GLACIER2_API SessionControl : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Glacier2::StringSetPrx categories(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Glacier2::StringSetPrx adapterIds(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Glacier2::IdentitySetPrx identities(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getSessionTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class GLACIER2_API SessionManager : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Glacier2::SessionPrx create(const ::std::string&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class GLACIER2_API SSLSessionManager : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Glacier2::SessionPrx create(const ::Glacier2::SSLInfo&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Glacier2
{

class GLACIER2_API Session : virtual public ::IceDelegate::Glacier2::Session,
                             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API StringSet : virtual public ::IceDelegate::Glacier2::StringSet,
                               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void add(const ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void remove(const ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::StringSeq get(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API IdentitySet : virtual public ::IceDelegate::Glacier2::IdentitySet,
                                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void add(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void remove(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::IdentitySeq get(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API SessionControl : virtual public ::IceDelegate::Glacier2::SessionControl,
                                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Glacier2::StringSetPrx categories(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Glacier2::StringSetPrx adapterIds(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Glacier2::IdentitySetPrx identities(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getSessionTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API SessionManager : virtual public ::IceDelegate::Glacier2::SessionManager,
                                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Glacier2::SessionPrx create(const ::std::string&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API SSLSessionManager : virtual public ::IceDelegate::Glacier2::SSLSessionManager,
                                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Glacier2::SessionPrx create(const ::Glacier2::SSLInfo&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Glacier2
{

class GLACIER2_API Session : virtual public ::IceDelegate::Glacier2::Session,
                             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API StringSet : virtual public ::IceDelegate::Glacier2::StringSet,
                               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void add(const ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void remove(const ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::StringSeq get(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API IdentitySet : virtual public ::IceDelegate::Glacier2::IdentitySet,
                                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void add(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void remove(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::IdentitySeq get(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API SessionControl : virtual public ::IceDelegate::Glacier2::SessionControl,
                                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Glacier2::StringSetPrx categories(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Glacier2::StringSetPrx adapterIds(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Glacier2::IdentitySetPrx identities(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getSessionTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API SessionManager : virtual public ::IceDelegate::Glacier2::SessionManager,
                                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Glacier2::SessionPrx create(const ::std::string&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class GLACIER2_API SSLSessionManager : virtual public ::IceDelegate::Glacier2::SSLSessionManager,
                                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Glacier2::SessionPrx create(const ::Glacier2::SSLInfo&, const ::Glacier2::SessionControlPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Glacier2
{

class GLACIER2_API Session : virtual public ::Ice::Object
{
public:

    typedef SessionPrx ProxyType;
    typedef SessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Session& l, const Session& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GLACIER2_API StringSet : virtual public ::Ice::Object
{
public:

    typedef StringSetPrx ProxyType;
    typedef StringSetPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void add(const ::Ice::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___add(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void remove(const ::Ice::StringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___remove(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::StringSeq get(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const StringSet& l, const StringSet& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const StringSet& l, const StringSet& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GLACIER2_API IdentitySet : virtual public ::Ice::Object
{
public:

    typedef IdentitySetPrx ProxyType;
    typedef IdentitySetPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void add(const ::Ice::IdentitySeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___add(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void remove(const ::Ice::IdentitySeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___remove(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::IdentitySeq get(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const IdentitySet& l, const IdentitySet& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const IdentitySet& l, const IdentitySet& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GLACIER2_API SessionControl : virtual public ::Ice::Object
{
public:

    typedef SessionControlPrx ProxyType;
    typedef SessionControlPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Glacier2::StringSetPrx categories(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___categories(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Glacier2::StringSetPrx adapterIds(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___adapterIds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Glacier2::IdentitySetPrx identities(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___identities(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getSessionTimeout(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSessionTimeout(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const SessionControl& l, const SessionControl& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SessionControl& l, const SessionControl& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GLACIER2_API SessionManager : virtual public ::Ice::Object
{
public:

    typedef SessionManagerPrx ProxyType;
    typedef SessionManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Glacier2::SessionPrx create(const ::std::string&, const ::Glacier2::SessionControlPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___create(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const SessionManager& l, const SessionManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SessionManager& l, const SessionManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GLACIER2_API SSLSessionManager : virtual public ::Ice::Object
{
public:

    typedef SSLSessionManagerPrx ProxyType;
    typedef SSLSessionManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Glacier2::SessionPrx create(const ::Glacier2::SSLInfo&, const ::Glacier2::SessionControlPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___create(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const SSLSessionManager& l, const SSLSessionManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SSLSessionManager& l, const SSLSessionManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Glacier2
{

template<class T>
class CallbackNC_Session_destroy : public Callback_Session_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Session_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Session_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Session_destroy : public Callback_Session_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Session_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Session_destroyPtr
newCallback_Session_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Session_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_StringSet_add : public Callback_StringSet_add_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_StringSet_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_StringSet_addPtr
newCallback_StringSet_add(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_add<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StringSet_addPtr
newCallback_StringSet_add(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_add<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_StringSet_addPtr
newCallback_StringSet_add(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_add<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StringSet_addPtr
newCallback_StringSet_add(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_add<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_StringSet_add : public Callback_StringSet_add_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_StringSet_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_StringSet_addPtr
newCallback_StringSet_add(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_add<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StringSet_addPtr
newCallback_StringSet_add(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_add<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_StringSet_addPtr
newCallback_StringSet_add(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_add<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StringSet_addPtr
newCallback_StringSet_add(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_add<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_StringSet_remove : public Callback_StringSet_remove_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_StringSet_remove(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_StringSet_removePtr
newCallback_StringSet_remove(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_remove<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StringSet_removePtr
newCallback_StringSet_remove(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_remove<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_StringSet_removePtr
newCallback_StringSet_remove(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_remove<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StringSet_removePtr
newCallback_StringSet_remove(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_remove<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_StringSet_remove : public Callback_StringSet_remove_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_StringSet_remove(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_StringSet_removePtr
newCallback_StringSet_remove(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_remove<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StringSet_removePtr
newCallback_StringSet_remove(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_remove<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_StringSet_removePtr
newCallback_StringSet_remove(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_remove<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StringSet_removePtr
newCallback_StringSet_remove(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_remove<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_StringSet_get : public Callback_StringSet_get_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::StringSeq&);

    CallbackNC_StringSet_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::StringSetPrx __proxy = ::Glacier2::StringSetPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_get(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_StringSet_getPtr
newCallback_StringSet_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StringSet_getPtr
newCallback_StringSet_get(T* instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StringSet_get<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_StringSet_get : public Callback_StringSet_get_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::StringSeq&, const CT&);

    Callback_StringSet_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::StringSetPrx __proxy = ::Glacier2::StringSetPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_get(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_StringSet_getPtr
newCallback_StringSet_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StringSet_getPtr
newCallback_StringSet_get(T* instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StringSet_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_IdentitySet_add : public Callback_IdentitySet_add_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IdentitySet_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IdentitySet_addPtr
newCallback_IdentitySet_add(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_add<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IdentitySet_addPtr
newCallback_IdentitySet_add(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_add<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IdentitySet_addPtr
newCallback_IdentitySet_add(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_add<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IdentitySet_addPtr
newCallback_IdentitySet_add(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_add<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IdentitySet_add : public Callback_IdentitySet_add_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IdentitySet_add(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IdentitySet_addPtr
newCallback_IdentitySet_add(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_add<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IdentitySet_addPtr
newCallback_IdentitySet_add(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_add<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IdentitySet_addPtr
newCallback_IdentitySet_add(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_add<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IdentitySet_addPtr
newCallback_IdentitySet_add(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_add<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IdentitySet_remove : public Callback_IdentitySet_remove_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IdentitySet_remove(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_IdentitySet_removePtr
newCallback_IdentitySet_remove(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_remove<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IdentitySet_removePtr
newCallback_IdentitySet_remove(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_remove<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_IdentitySet_removePtr
newCallback_IdentitySet_remove(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_remove<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IdentitySet_removePtr
newCallback_IdentitySet_remove(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_remove<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_IdentitySet_remove : public Callback_IdentitySet_remove_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IdentitySet_remove(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_IdentitySet_removePtr
newCallback_IdentitySet_remove(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_remove<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IdentitySet_removePtr
newCallback_IdentitySet_remove(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_remove<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_IdentitySet_removePtr
newCallback_IdentitySet_remove(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_remove<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IdentitySet_removePtr
newCallback_IdentitySet_remove(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_remove<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_IdentitySet_get : public Callback_IdentitySet_get_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::IdentitySeq&);

    CallbackNC_IdentitySet_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::IdentitySetPrx __proxy = ::Glacier2::IdentitySetPrx::uncheckedCast(__result->getProxy());
        ::Ice::IdentitySeq __ret;
        try
        {
            __ret = __proxy->end_get(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_IdentitySet_getPtr
newCallback_IdentitySet_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::IdentitySeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_IdentitySet_getPtr
newCallback_IdentitySet_get(T* instance, void (T::*cb)(const ::Ice::IdentitySeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IdentitySet_get<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_IdentitySet_get : public Callback_IdentitySet_get_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::IdentitySeq&, const CT&);

    Callback_IdentitySet_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::IdentitySetPrx __proxy = ::Glacier2::IdentitySetPrx::uncheckedCast(__result->getProxy());
        ::Ice::IdentitySeq __ret;
        try
        {
            __ret = __proxy->end_get(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_IdentitySet_getPtr
newCallback_IdentitySet_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::IdentitySeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_IdentitySet_getPtr
newCallback_IdentitySet_get(T* instance, void (T::*cb)(const ::Ice::IdentitySeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IdentitySet_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SessionControl_categories : public Callback_SessionControl_categories_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Glacier2::StringSetPrx&);

    CallbackNC_SessionControl_categories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::StringSetPrx __ret;
        try
        {
            __ret = __proxy->end_categories(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SessionControl_categoriesPtr
newCallback_SessionControl_categories(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::StringSetPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_categories<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionControl_categoriesPtr
newCallback_SessionControl_categories(T* instance, void (T::*cb)(const ::Glacier2::StringSetPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_categories<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionControl_categories : public Callback_SessionControl_categories_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Glacier2::StringSetPrx&, const CT&);

    Callback_SessionControl_categories(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::StringSetPrx __ret;
        try
        {
            __ret = __proxy->end_categories(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SessionControl_categoriesPtr
newCallback_SessionControl_categories(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::StringSetPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_categories<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionControl_categoriesPtr
newCallback_SessionControl_categories(T* instance, void (T::*cb)(const ::Glacier2::StringSetPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_categories<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SessionControl_adapterIds : public Callback_SessionControl_adapterIds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Glacier2::StringSetPrx&);

    CallbackNC_SessionControl_adapterIds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::StringSetPrx __ret;
        try
        {
            __ret = __proxy->end_adapterIds(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SessionControl_adapterIdsPtr
newCallback_SessionControl_adapterIds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::StringSetPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_adapterIds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionControl_adapterIdsPtr
newCallback_SessionControl_adapterIds(T* instance, void (T::*cb)(const ::Glacier2::StringSetPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_adapterIds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionControl_adapterIds : public Callback_SessionControl_adapterIds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Glacier2::StringSetPrx&, const CT&);

    Callback_SessionControl_adapterIds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::StringSetPrx __ret;
        try
        {
            __ret = __proxy->end_adapterIds(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SessionControl_adapterIdsPtr
newCallback_SessionControl_adapterIds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::StringSetPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_adapterIds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionControl_adapterIdsPtr
newCallback_SessionControl_adapterIds(T* instance, void (T::*cb)(const ::Glacier2::StringSetPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_adapterIds<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SessionControl_identities : public Callback_SessionControl_identities_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Glacier2::IdentitySetPrx&);

    CallbackNC_SessionControl_identities(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::IdentitySetPrx __ret;
        try
        {
            __ret = __proxy->end_identities(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SessionControl_identitiesPtr
newCallback_SessionControl_identities(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::IdentitySetPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_identities<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionControl_identitiesPtr
newCallback_SessionControl_identities(T* instance, void (T::*cb)(const ::Glacier2::IdentitySetPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_identities<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionControl_identities : public Callback_SessionControl_identities_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Glacier2::IdentitySetPrx&, const CT&);

    Callback_SessionControl_identities(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::IdentitySetPrx __ret;
        try
        {
            __ret = __proxy->end_identities(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SessionControl_identitiesPtr
newCallback_SessionControl_identities(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::IdentitySetPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_identities<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionControl_identitiesPtr
newCallback_SessionControl_identities(T* instance, void (T::*cb)(const ::Glacier2::IdentitySetPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_identities<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SessionControl_getSessionTimeout : public Callback_SessionControl_getSessionTimeout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SessionControl_getSessionTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getSessionTimeout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SessionControl_getSessionTimeoutPtr
newCallback_SessionControl_getSessionTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_getSessionTimeout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionControl_getSessionTimeoutPtr
newCallback_SessionControl_getSessionTimeout(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_getSessionTimeout<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionControl_getSessionTimeout : public Callback_SessionControl_getSessionTimeout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SessionControl_getSessionTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionControlPrx __proxy = ::Glacier2::SessionControlPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getSessionTimeout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SessionControl_getSessionTimeoutPtr
newCallback_SessionControl_getSessionTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_getSessionTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionControl_getSessionTimeoutPtr
newCallback_SessionControl_getSessionTimeout(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_getSessionTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SessionControl_destroy : public Callback_SessionControl_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SessionControl_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SessionControl_destroyPtr
newCallback_SessionControl_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionControl_destroyPtr
newCallback_SessionControl_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SessionControl_destroyPtr
newCallback_SessionControl_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionControl_destroyPtr
newCallback_SessionControl_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionControl_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionControl_destroy : public Callback_SessionControl_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SessionControl_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SessionControl_destroyPtr
newCallback_SessionControl_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionControl_destroyPtr
newCallback_SessionControl_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SessionControl_destroyPtr
newCallback_SessionControl_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionControl_destroyPtr
newCallback_SessionControl_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionControl_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SessionManager_create : public Callback_SessionManager_create_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Glacier2::SessionPrx&);

    CallbackNC_SessionManager_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionManagerPrx __proxy = ::Glacier2::SessionManagerPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SessionManager_createPtr
newCallback_SessionManager_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionManager_create<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SessionManager_createPtr
newCallback_SessionManager_create(T* instance, void (T::*cb)(const ::Glacier2::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SessionManager_create<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SessionManager_create : public Callback_SessionManager_create_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Glacier2::SessionPrx&, const CT&);

    Callback_SessionManager_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SessionManagerPrx __proxy = ::Glacier2::SessionManagerPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SessionManager_createPtr
newCallback_SessionManager_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionManager_create<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SessionManager_createPtr
newCallback_SessionManager_create(T* instance, void (T::*cb)(const ::Glacier2::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SessionManager_create<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SSLSessionManager_create : public Callback_SSLSessionManager_create_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Glacier2::SessionPrx&);

    CallbackNC_SSLSessionManager_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SSLSessionManagerPrx __proxy = ::Glacier2::SSLSessionManagerPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SSLSessionManager_createPtr
newCallback_SSLSessionManager_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SSLSessionManager_create<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SSLSessionManager_createPtr
newCallback_SSLSessionManager_create(T* instance, void (T::*cb)(const ::Glacier2::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SSLSessionManager_create<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SSLSessionManager_create : public Callback_SSLSessionManager_create_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Glacier2::SessionPrx&, const CT&);

    Callback_SSLSessionManager_create(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::SSLSessionManagerPrx __proxy = ::Glacier2::SSLSessionManagerPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_create(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SSLSessionManager_createPtr
newCallback_SSLSessionManager_create(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SSLSessionManager_create<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SSLSessionManager_createPtr
newCallback_SSLSessionManager_create(T* instance, void (T::*cb)(const ::Glacier2::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SSLSessionManager_create<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
