// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Glacier2_Router_h__
#define __Glacier2_Router_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/Router.h>
#include <Glacier2/Session.h>
#include <Glacier2/PermissionsVerifier.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef GLACIER2_API
#   ifdef GLACIER2_API_EXPORTS
#       define GLACIER2_API ICE_DECLSPEC_EXPORT
#   else
#       define GLACIER2_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace Glacier2
{

class Router;
GLACIER2_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::Router>&);
GLACIER2_API ::IceProxy::Ice::Object* upCast(::IceProxy::Glacier2::Router*);

}

}

namespace Glacier2
{

class Router;
bool operator==(const Router&, const Router&);
bool operator<(const Router&, const Router&);
GLACIER2_API ::Ice::Object* upCast(::Glacier2::Router*);
typedef ::IceInternal::Handle< ::Glacier2::Router> RouterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::Router> RouterPrx;
GLACIER2_API void __patch(RouterPtr&, const ::Ice::ObjectPtr&);

}

namespace Glacier2
{

class GLACIER2_API SessionNotExistException : public ::Ice::UserException
{
public:

    SessionNotExistException() {}
    virtual ~SessionNotExistException() throw();

    virtual ::std::string ice_name() const;
    virtual SessionNotExistException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static SessionNotExistException __SessionNotExistException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Glacier2::SessionNotExistException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Glacier2
{

class GLACIER2_API AMD_Router_createSession : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Glacier2::SessionPrx&) = 0;
};

typedef ::IceUtil::Handle< ::Glacier2::AMD_Router_createSession> AMD_Router_createSessionPtr;

class GLACIER2_API AMD_Router_createSessionFromSecureConnection : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Glacier2::SessionPrx&) = 0;
};

typedef ::IceUtil::Handle< ::Glacier2::AMD_Router_createSessionFromSecureConnection> AMD_Router_createSessionFromSecureConnectionPtr;

}

namespace IceAsync
{

namespace Glacier2
{

class GLACIER2_API AMD_Router_createSession : public ::Glacier2::AMD_Router_createSession, public ::IceInternal::IncomingAsync
{
public:

    AMD_Router_createSession(::IceInternal::Incoming&);

    virtual void ice_response(const ::Glacier2::SessionPrx&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class GLACIER2_API AMD_Router_createSessionFromSecureConnection : public ::Glacier2::AMD_Router_createSessionFromSecureConnection, public ::IceInternal::IncomingAsync
{
public:

    AMD_Router_createSessionFromSecureConnection(::IceInternal::Incoming&);

    virtual void ice_response(const ::Glacier2::SessionPrx&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace Glacier2
{

class Callback_Router_getCategoryForClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Router_getCategoryForClient_Base> Callback_Router_getCategoryForClientPtr;

class Callback_Router_createSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Router_createSession_Base> Callback_Router_createSessionPtr;

class Callback_Router_createSessionFromSecureConnection_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Router_createSessionFromSecureConnection_Base> Callback_Router_createSessionFromSecureConnectionPtr;

class Callback_Router_refreshSession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Router_refreshSession_Base> Callback_Router_refreshSessionPtr;

class Callback_Router_destroySession_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Router_destroySession_Base> Callback_Router_destroySessionPtr;

class Callback_Router_getSessionTimeout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Router_getSessionTimeout_Base> Callback_Router_getSessionTimeoutPtr;

}

namespace IceProxy
{

namespace Glacier2
{

class Router : virtual public ::IceProxy::Ice::Router
{
public:

    ::std::string getCategoryForClient()
    {
        return getCategoryForClient(0);
    }
    ::std::string getCategoryForClient(const ::Ice::Context& __ctx)
    {
        return getCategoryForClient(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCategoryForClient(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCategoryForClient(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCategoryForClient(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCategoryForClient(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCategoryForClient(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCategoryForClient(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCategoryForClient(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCategoryForClient(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCategoryForClient(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getCategoryForClient(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getCategoryForClient(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCategoryForClient()
    {
        return begin_getCategoryForClient(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCategoryForClient(const ::Ice::Context& __ctx)
    {
        return begin_getCategoryForClient(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCategoryForClient(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCategoryForClient(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCategoryForClient(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCategoryForClient(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCategoryForClient(const ::Glacier2::Callback_Router_getCategoryForClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCategoryForClient(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCategoryForClient(const ::Ice::Context& __ctx, const ::Glacier2::Callback_Router_getCategoryForClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCategoryForClient(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::std::string end_getCategoryForClient(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::std::string getCategoryForClient(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_getCategoryForClient(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Glacier2::SessionPrx createSession(const ::std::string& userId, const ::std::string& password)
    {
        return createSession(userId, password, 0);
    }
    ::Glacier2::SessionPrx createSession(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return createSession(userId, password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createSession(const ::std::string& userId, const ::std::string& password, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSession(userId, password, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSession(const ::std::string& userId, const ::std::string& password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSession(userId, password, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createSession(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSession(userId, password, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSession(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSession(userId, password, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createSession(const ::std::string& userId, const ::std::string& password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Glacier2::SessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
                ::Glacier2::SessionPrx __ret;
                try
                {
                    __ret = __proxy->end_createSession(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Glacier2::SessionPrx&)> _response;
        };
        return begin_createSession(userId, password, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& userId, const ::std::string& password)
    {
        return begin_createSession(userId, password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return begin_createSession(userId, password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& userId, const ::std::string& password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(userId, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(userId, password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& userId, const ::std::string& password, const ::Glacier2::Callback_Router_createSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(userId, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSession(const ::std::string& userId, const ::std::string& password, const ::Ice::Context& __ctx, const ::Glacier2::Callback_Router_createSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSession(userId, password, &__ctx, __del, __cookie);
    }

    GLACIER2_API ::Glacier2::SessionPrx end_createSession(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Glacier2::SessionPrx createSession(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_createSession(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Glacier2::SessionPrx createSessionFromSecureConnection()
    {
        return createSessionFromSecureConnection(0);
    }
    ::Glacier2::SessionPrx createSessionFromSecureConnection(const ::Ice::Context& __ctx)
    {
        return createSessionFromSecureConnection(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createSessionFromSecureConnection(const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSessionFromSecureConnection(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSessionFromSecureConnection(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSessionFromSecureConnection(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createSessionFromSecureConnection(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createSessionFromSecureConnection(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createSessionFromSecureConnection(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Glacier2::SessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Glacier2::SessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
                ::Glacier2::SessionPrx __ret;
                try
                {
                    __ret = __proxy->end_createSessionFromSecureConnection(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Glacier2::SessionPrx&)> _response;
        };
        return begin_createSessionFromSecureConnection(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection()
    {
        return begin_createSessionFromSecureConnection(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx)
    {
        return begin_createSessionFromSecureConnection(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSessionFromSecureConnection(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSessionFromSecureConnection(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Glacier2::Callback_Router_createSessionFromSecureConnectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSessionFromSecureConnection(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::Context& __ctx, const ::Glacier2::Callback_Router_createSessionFromSecureConnectionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createSessionFromSecureConnection(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::Glacier2::SessionPrx end_createSessionFromSecureConnection(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Glacier2::SessionPrx createSessionFromSecureConnection(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_createSessionFromSecureConnection(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void refreshSession()
    {
        refreshSession(0);
    }
    void refreshSession(const ::Ice::Context& __ctx)
    {
        refreshSession(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_refreshSession(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_refreshSession(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_refreshSession(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refreshSession(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_refreshSession(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_refreshSession(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_refreshSession(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_refreshSession(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_refreshSession(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_refreshSession(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_refreshSession(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_refreshSession()
    {
        return begin_refreshSession(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshSession(const ::Ice::Context& __ctx)
    {
        return begin_refreshSession(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshSession(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshSession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshSession(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshSession(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshSession(const ::Glacier2::Callback_Router_refreshSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshSession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshSession(const ::Ice::Context& __ctx, const ::Glacier2::Callback_Router_refreshSessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshSession(&__ctx, __del, __cookie);
    }

    GLACIER2_API void end_refreshSession(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API void refreshSession(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_refreshSession(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroySession()
    {
        destroySession(0);
    }
    void destroySession(const ::Ice::Context& __ctx)
    {
        destroySession(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroySession(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroySession(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroySession(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroySession(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroySession(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroySession(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroySession(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroySession(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_destroySession(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_destroySession(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_destroySession(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_destroySession()
    {
        return begin_destroySession(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroySession(const ::Ice::Context& __ctx)
    {
        return begin_destroySession(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroySession(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroySession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroySession(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroySession(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroySession(const ::Glacier2::Callback_Router_destroySessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroySession(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroySession(const ::Ice::Context& __ctx, const ::Glacier2::Callback_Router_destroySessionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroySession(&__ctx, __del, __cookie);
    }

    GLACIER2_API void end_destroySession(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API void destroySession(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_destroySession(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long getSessionTimeout()
    {
        return getSessionTimeout(0);
    }
    ::Ice::Long getSessionTimeout(const ::Ice::Context& __ctx)
    {
        return getSessionTimeout(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSessionTimeout(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSessionTimeout(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSessionTimeout(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSessionTimeout(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSessionTimeout(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_getSessionTimeout(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_getSessionTimeout(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSessionTimeout()
    {
        return begin_getSessionTimeout(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx)
    {
        return begin_getSessionTimeout(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Glacier2::Callback_Router_getSessionTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context& __ctx, const ::Glacier2::Callback_Router_getSessionTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSessionTimeout(&__ctx, __del, __cookie);
    }

    GLACIER2_API ::Ice::Long end_getSessionTimeout(const ::Ice::AsyncResultPtr&);
    
private:

    GLACIER2_API ::Ice::Long getSessionTimeout(const ::Ice::Context*);
    GLACIER2_API ::Ice::AsyncResultPtr begin_getSessionTimeout(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Router> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_secure(bool __secure) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_twoway() const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_oneway() const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_batchOneway() const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_datagram() const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_batchDatagram() const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_compress(bool __compress) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Router> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Router*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    GLACIER2_API static const ::std::string& ice_staticId();

private: 

    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    GLACIER2_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    GLACIER2_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Glacier2
{

class GLACIER2_API Router : virtual public ::IceDelegate::Ice::Router
{
public:

    virtual ::std::string getCategoryForClient(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Glacier2::SessionPrx createSession(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Glacier2::SessionPrx createSessionFromSecureConnection(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void refreshSession(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroySession(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Long getSessionTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Glacier2
{

class GLACIER2_API Router : virtual public ::IceDelegate::Glacier2::Router,
                            virtual public ::IceDelegateM::Ice::Router
{
public:

    virtual ::std::string getCategoryForClient(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Glacier2::SessionPrx createSession(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Glacier2::SessionPrx createSessionFromSecureConnection(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void refreshSession(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroySession(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long getSessionTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Glacier2
{

class GLACIER2_API Router : virtual public ::IceDelegate::Glacier2::Router,
                            virtual public ::IceDelegateD::Ice::Router
{
public:

    virtual ::std::string getCategoryForClient(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Glacier2::SessionPrx createSession(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Glacier2::SessionPrx createSessionFromSecureConnection(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void refreshSession(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroySession(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Long getSessionTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Glacier2
{

class GLACIER2_API Router : virtual public ::Ice::Router
{
public:

    typedef RouterPrx ProxyType;
    typedef RouterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string getCategoryForClient(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getCategoryForClient(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void createSession_async(const ::Glacier2::AMD_Router_createSessionPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createSessionFromSecureConnection_async(const ::Glacier2::AMD_Router_createSessionFromSecureConnectionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createSessionFromSecureConnection(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void refreshSession(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refreshSession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroySession(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroySession(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long getSessionTimeout(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getSessionTimeout(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Router& l, const Router& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Router& l, const Router& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Glacier2
{

template<class T>
class CallbackNC_Router_getCategoryForClient : public Callback_Router_getCategoryForClient_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Router_getCategoryForClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getCategoryForClient(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Router_getCategoryForClientPtr
newCallback_Router_getCategoryForClient(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_getCategoryForClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Router_getCategoryForClientPtr
newCallback_Router_getCategoryForClient(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_getCategoryForClient<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Router_getCategoryForClient : public Callback_Router_getCategoryForClient_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Router_getCategoryForClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getCategoryForClient(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Router_getCategoryForClientPtr
newCallback_Router_getCategoryForClient(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_getCategoryForClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Router_getCategoryForClientPtr
newCallback_Router_getCategoryForClient(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_getCategoryForClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Router_createSession : public Callback_Router_createSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Glacier2::SessionPrx&);

    CallbackNC_Router_createSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Router_createSessionPtr
newCallback_Router_createSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_createSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Router_createSessionPtr
newCallback_Router_createSession(T* instance, void (T::*cb)(const ::Glacier2::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_createSession<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Router_createSession : public Callback_Router_createSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Glacier2::SessionPrx&, const CT&);

    Callback_Router_createSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Router_createSessionPtr
newCallback_Router_createSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_createSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Router_createSessionPtr
newCallback_Router_createSession(T* instance, void (T::*cb)(const ::Glacier2::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_createSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Router_createSessionFromSecureConnection : public Callback_Router_createSessionFromSecureConnection_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Glacier2::SessionPrx&);

    CallbackNC_Router_createSessionFromSecureConnection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSessionFromSecureConnection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Router_createSessionFromSecureConnectionPtr
newCallback_Router_createSessionFromSecureConnection(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_createSessionFromSecureConnection<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Router_createSessionFromSecureConnectionPtr
newCallback_Router_createSessionFromSecureConnection(T* instance, void (T::*cb)(const ::Glacier2::SessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_createSessionFromSecureConnection<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Router_createSessionFromSecureConnection : public Callback_Router_createSessionFromSecureConnection_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Glacier2::SessionPrx&, const CT&);

    Callback_Router_createSessionFromSecureConnection(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        ::Glacier2::SessionPrx __ret;
        try
        {
            __ret = __proxy->end_createSessionFromSecureConnection(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Router_createSessionFromSecureConnectionPtr
newCallback_Router_createSessionFromSecureConnection(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Glacier2::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_createSessionFromSecureConnection<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Router_createSessionFromSecureConnectionPtr
newCallback_Router_createSessionFromSecureConnection(T* instance, void (T::*cb)(const ::Glacier2::SessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_createSessionFromSecureConnection<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Router_refreshSession : public Callback_Router_refreshSession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Router_refreshSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_refreshSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Router_refreshSessionPtr
newCallback_Router_refreshSession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_refreshSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Router_refreshSessionPtr
newCallback_Router_refreshSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_refreshSession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Router_refreshSessionPtr
newCallback_Router_refreshSession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_refreshSession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Router_refreshSessionPtr
newCallback_Router_refreshSession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_refreshSession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Router_refreshSession : public Callback_Router_refreshSession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Router_refreshSession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_refreshSession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Router_refreshSessionPtr
newCallback_Router_refreshSession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_refreshSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Router_refreshSessionPtr
newCallback_Router_refreshSession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_refreshSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Router_refreshSessionPtr
newCallback_Router_refreshSession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_refreshSession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Router_refreshSessionPtr
newCallback_Router_refreshSession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_refreshSession<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Router_destroySession : public Callback_Router_destroySession_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Router_destroySession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroySession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Router_destroySessionPtr
newCallback_Router_destroySession(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_destroySession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Router_destroySessionPtr
newCallback_Router_destroySession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_destroySession<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Router_destroySessionPtr
newCallback_Router_destroySession(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_destroySession<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Router_destroySessionPtr
newCallback_Router_destroySession(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_destroySession<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Router_destroySession : public Callback_Router_destroySession_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Router_destroySession(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroySession(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Router_destroySessionPtr
newCallback_Router_destroySession(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_destroySession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Router_destroySessionPtr
newCallback_Router_destroySession(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_destroySession<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Router_destroySessionPtr
newCallback_Router_destroySession(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_destroySession<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Router_destroySessionPtr
newCallback_Router_destroySession(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_destroySession<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Router_getSessionTimeout : public Callback_Router_getSessionTimeout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_Router_getSessionTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getSessionTimeout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Router_getSessionTimeoutPtr
newCallback_Router_getSessionTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_getSessionTimeout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Router_getSessionTimeoutPtr
newCallback_Router_getSessionTimeout(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Router_getSessionTimeout<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Router_getSessionTimeout : public Callback_Router_getSessionTimeout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_Router_getSessionTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Glacier2::RouterPrx __proxy = ::Glacier2::RouterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getSessionTimeout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Router_getSessionTimeoutPtr
newCallback_Router_getSessionTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_getSessionTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Router_getSessionTimeoutPtr
newCallback_Router_getSessionTimeout(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Router_getSessionTimeout<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
