// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceStorm_Metrics_h__
#define __IceStorm_Metrics_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Metrics.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_STORM_LIB_API
#   ifdef ICE_STORM_LIB_API_EXPORTS
#       define ICE_STORM_LIB_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_STORM_LIB_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace IceMX
{

class TopicMetrics;
ICE_STORM_LIB_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceMX::TopicMetrics>&);
ICE_STORM_LIB_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceMX::TopicMetrics*);

class SubscriberMetrics;
ICE_STORM_LIB_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceMX::SubscriberMetrics>&);
ICE_STORM_LIB_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceMX::SubscriberMetrics*);

}

}

namespace IceMX
{

class TopicMetrics;
bool operator==(const TopicMetrics&, const TopicMetrics&);
bool operator<(const TopicMetrics&, const TopicMetrics&);
ICE_STORM_LIB_API ::Ice::Object* upCast(::IceMX::TopicMetrics*);
typedef ::IceInternal::Handle< ::IceMX::TopicMetrics> TopicMetricsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceMX::TopicMetrics> TopicMetricsPrx;
ICE_STORM_LIB_API void __patch(TopicMetricsPtr&, const ::Ice::ObjectPtr&);

class SubscriberMetrics;
bool operator==(const SubscriberMetrics&, const SubscriberMetrics&);
bool operator<(const SubscriberMetrics&, const SubscriberMetrics&);
ICE_STORM_LIB_API ::Ice::Object* upCast(::IceMX::SubscriberMetrics*);
typedef ::IceInternal::Handle< ::IceMX::SubscriberMetrics> SubscriberMetricsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceMX::SubscriberMetrics> SubscriberMetricsPrx;
ICE_STORM_LIB_API void __patch(SubscriberMetricsPtr&, const ::Ice::ObjectPtr&);

}

namespace IceMX
{

}

namespace IceProxy
{

namespace IceMX
{

class TopicMetrics : virtual public ::IceProxy::IceMX::Metrics
{
public:
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_secure(bool __secure) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_twoway() const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_oneway() const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_batchOneway() const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_datagram() const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_batchDatagram() const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_compress(bool __compress) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TopicMetrics> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TopicMetrics*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_STORM_LIB_API static const ::std::string& ice_staticId();

private: 

    ICE_STORM_LIB_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_STORM_LIB_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_STORM_LIB_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SubscriberMetrics : virtual public ::IceProxy::IceMX::Metrics
{
public:
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_secure(bool __secure) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_twoway() const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_oneway() const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_batchOneway() const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_datagram() const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_batchDatagram() const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_compress(bool __compress) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SubscriberMetrics> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SubscriberMetrics*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_STORM_LIB_API static const ::std::string& ice_staticId();

private: 

    ICE_STORM_LIB_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_STORM_LIB_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_STORM_LIB_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace IceMX
{

class ICE_STORM_LIB_API TopicMetrics : virtual public ::IceDelegate::IceMX::Metrics
{
public:
};

class ICE_STORM_LIB_API SubscriberMetrics : virtual public ::IceDelegate::IceMX::Metrics
{
public:
};

}

}

namespace IceDelegateM
{

namespace IceMX
{

class ICE_STORM_LIB_API TopicMetrics : virtual public ::IceDelegate::IceMX::TopicMetrics,
                                       virtual public ::IceDelegateM::IceMX::Metrics
{
public:
};

class ICE_STORM_LIB_API SubscriberMetrics : virtual public ::IceDelegate::IceMX::SubscriberMetrics,
                                            virtual public ::IceDelegateM::IceMX::Metrics
{
public:
};

}

}

namespace IceDelegateD
{

namespace IceMX
{

class ICE_STORM_LIB_API TopicMetrics : virtual public ::IceDelegate::IceMX::TopicMetrics,
                                       virtual public ::IceDelegateD::IceMX::Metrics
{
public:
};

class ICE_STORM_LIB_API SubscriberMetrics : virtual public ::IceDelegate::IceMX::SubscriberMetrics,
                                            virtual public ::IceDelegateD::IceMX::Metrics
{
public:
};

}

}

namespace IceMX
{

class ICE_STORM_LIB_API TopicMetrics : public ::IceMX::Metrics
{
public:

    typedef TopicMetricsPrx ProxyType;
    typedef TopicMetricsPtr PointerType;

    TopicMetrics() :
        published(ICE_INT64(0)),
        forwarded(ICE_INT64(0))
    {
    }

    TopicMetrics(const ::std::string& __ice_id, ::Ice::Long __ice_total, ::Ice::Int __ice_current, ::Ice::Long __ice_totalLifetime, ::Ice::Int __ice_failures, ::Ice::Long __ice_published, ::Ice::Long __ice_forwarded) :
        ::IceMX::Metrics(__ice_id, __ice_total, __ice_current, __ice_totalLifetime, __ice_failures)
        ,
        published(__ice_published),
        forwarded(__ice_forwarded)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::IceMX::Metrics::__writeImpl;
    using ::IceMX::Metrics::__readImpl;
    #endif

public:

    ::Ice::Long published;

    ::Ice::Long forwarded;

protected:

    virtual ~TopicMetrics() {}

    friend class TopicMetrics__staticInit;
};

class TopicMetrics__staticInit
{
public:

    ::IceMX::TopicMetrics _init;
};

static TopicMetrics__staticInit _TopicMetrics_init;

inline bool operator==(const TopicMetrics& l, const TopicMetrics& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TopicMetrics& l, const TopicMetrics& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ICE_STORM_LIB_API SubscriberMetrics : public ::IceMX::Metrics
{
public:

    typedef SubscriberMetricsPrx ProxyType;
    typedef SubscriberMetricsPtr PointerType;

    SubscriberMetrics() :
        queued(0),
        outstanding(0),
        delivered(ICE_INT64(0))
    {
    }

    SubscriberMetrics(const ::std::string& __ice_id, ::Ice::Long __ice_total, ::Ice::Int __ice_current, ::Ice::Long __ice_totalLifetime, ::Ice::Int __ice_failures, ::Ice::Int __ice_queued, ::Ice::Int __ice_outstanding, ::Ice::Long __ice_delivered) :
        ::IceMX::Metrics(__ice_id, __ice_total, __ice_current, __ice_totalLifetime, __ice_failures)
        ,
        queued(__ice_queued),
        outstanding(__ice_outstanding),
        delivered(__ice_delivered)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::IceMX::Metrics::__writeImpl;
    using ::IceMX::Metrics::__readImpl;
    #endif

public:

    ::Ice::Int queued;

    ::Ice::Int outstanding;

    ::Ice::Long delivered;

protected:

    virtual ~SubscriberMetrics() {}
};

inline bool operator==(const SubscriberMetrics& l, const SubscriberMetrics& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SubscriberMetrics& l, const SubscriberMetrics& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace IceMX
{

}

#endif
