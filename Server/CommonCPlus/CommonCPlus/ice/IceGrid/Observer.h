// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Observer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceGrid_Observer_h__
#define __IceGrid_Observer_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Glacier2/Session.h>
#include <IceGrid/Exception.h>
#include <IceGrid/Descriptor.h>
#include <IceGrid/Admin.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_GRID_API
#   ifdef ICE_GRID_API_EXPORTS
#       define ICE_GRID_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_GRID_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace IceGrid
{

class NodeObserver;
ICE_GRID_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::NodeObserver>&);
ICE_GRID_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::NodeObserver*);

class ApplicationObserver;
ICE_GRID_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::ApplicationObserver>&);
ICE_GRID_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::ApplicationObserver*);

class AdapterObserver;
ICE_GRID_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::AdapterObserver>&);
ICE_GRID_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::AdapterObserver*);

class ObjectObserver;
ICE_GRID_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::ObjectObserver>&);
ICE_GRID_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::ObjectObserver*);

class RegistryObserver;
ICE_GRID_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::RegistryObserver>&);
ICE_GRID_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::RegistryObserver*);

}

}

namespace IceGrid
{

class NodeObserver;
bool operator==(const NodeObserver&, const NodeObserver&);
bool operator<(const NodeObserver&, const NodeObserver&);
ICE_GRID_API ::Ice::Object* upCast(::IceGrid::NodeObserver*);
typedef ::IceInternal::Handle< ::IceGrid::NodeObserver> NodeObserverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::NodeObserver> NodeObserverPrx;
ICE_GRID_API void __patch(NodeObserverPtr&, const ::Ice::ObjectPtr&);

class ApplicationObserver;
bool operator==(const ApplicationObserver&, const ApplicationObserver&);
bool operator<(const ApplicationObserver&, const ApplicationObserver&);
ICE_GRID_API ::Ice::Object* upCast(::IceGrid::ApplicationObserver*);
typedef ::IceInternal::Handle< ::IceGrid::ApplicationObserver> ApplicationObserverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::ApplicationObserver> ApplicationObserverPrx;
ICE_GRID_API void __patch(ApplicationObserverPtr&, const ::Ice::ObjectPtr&);

class AdapterObserver;
bool operator==(const AdapterObserver&, const AdapterObserver&);
bool operator<(const AdapterObserver&, const AdapterObserver&);
ICE_GRID_API ::Ice::Object* upCast(::IceGrid::AdapterObserver*);
typedef ::IceInternal::Handle< ::IceGrid::AdapterObserver> AdapterObserverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::AdapterObserver> AdapterObserverPrx;
ICE_GRID_API void __patch(AdapterObserverPtr&, const ::Ice::ObjectPtr&);

class ObjectObserver;
bool operator==(const ObjectObserver&, const ObjectObserver&);
bool operator<(const ObjectObserver&, const ObjectObserver&);
ICE_GRID_API ::Ice::Object* upCast(::IceGrid::ObjectObserver*);
typedef ::IceInternal::Handle< ::IceGrid::ObjectObserver> ObjectObserverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::ObjectObserver> ObjectObserverPrx;
ICE_GRID_API void __patch(ObjectObserverPtr&, const ::Ice::ObjectPtr&);

class RegistryObserver;
bool operator==(const RegistryObserver&, const RegistryObserver&);
bool operator<(const RegistryObserver&, const RegistryObserver&);
ICE_GRID_API ::Ice::Object* upCast(::IceGrid::RegistryObserver*);
typedef ::IceInternal::Handle< ::IceGrid::RegistryObserver> RegistryObserverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::RegistryObserver> RegistryObserverPrx;
ICE_GRID_API void __patch(RegistryObserverPtr&, const ::Ice::ObjectPtr&);

}

namespace IceGrid
{

struct ServerDynamicInfo
{
    ::std::string id;
    ::IceGrid::ServerState state;
    ::Ice::Int pid;
    bool enabled;

    bool operator==(const ServerDynamicInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(state != __rhs.state)
        {
            return false;
        }
        if(pid != __rhs.pid)
        {
            return false;
        }
        if(enabled != __rhs.enabled)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ServerDynamicInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(state < __rhs.state)
        {
            return true;
        }
        else if(__rhs.state < state)
        {
            return false;
        }
        if(pid < __rhs.pid)
        {
            return true;
        }
        else if(__rhs.pid < pid)
        {
            return false;
        }
        if(enabled < __rhs.enabled)
        {
            return true;
        }
        else if(__rhs.enabled < enabled)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ServerDynamicInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ServerDynamicInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ServerDynamicInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ServerDynamicInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::IceGrid::ServerDynamicInfo> ServerDynamicInfoSeq;

struct AdapterDynamicInfo
{
    ::std::string id;
    ::Ice::ObjectPrx proxy;
};

typedef ::std::vector< ::IceGrid::AdapterDynamicInfo> AdapterDynamicInfoSeq;

struct NodeDynamicInfo
{
    ::IceGrid::NodeInfo info;
    ::IceGrid::ServerDynamicInfoSeq servers;
    ::IceGrid::AdapterDynamicInfoSeq adapters;
};

typedef ::std::vector< ::IceGrid::NodeDynamicInfo> NodeDynamicInfoSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::IceGrid::ServerDynamicInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::IceGrid::ServerDynamicInfo, S>
{
    static void write(S* __os, const ::IceGrid::ServerDynamicInfo& v)
    {
        __os->write(v.id);
        __os->write(v.state);
        __os->write(v.pid);
        __os->write(v.enabled);
    }
};

template<class S>
struct StreamReader< ::IceGrid::ServerDynamicInfo, S>
{
    static void read(S* __is, ::IceGrid::ServerDynamicInfo& v)
    {
        __is->read(v.id);
        __is->read(v.state);
        __is->read(v.pid);
        __is->read(v.enabled);
    }
};

#if defined(ICE_HAS_DECLSPEC_IMPORT_EXPORT) && !defined(ICE_GRID_API_EXPORTS)
template struct ICE_GRID_API StreamWriter< ::IceGrid::ServerDynamicInfo, ::IceInternal::BasicStream>;
template struct ICE_GRID_API StreamReader< ::IceGrid::ServerDynamicInfo, ::IceInternal::BasicStream>;
#endif

template<>
struct StreamableTraits< ::IceGrid::AdapterDynamicInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::IceGrid::AdapterDynamicInfo, S>
{
    static void write(S* __os, const ::IceGrid::AdapterDynamicInfo& v)
    {
        __os->write(v.id);
        __os->write(v.proxy);
    }
};

template<class S>
struct StreamReader< ::IceGrid::AdapterDynamicInfo, S>
{
    static void read(S* __is, ::IceGrid::AdapterDynamicInfo& v)
    {
        __is->read(v.id);
        __is->read(v.proxy);
    }
};

#if defined(ICE_HAS_DECLSPEC_IMPORT_EXPORT) && !defined(ICE_GRID_API_EXPORTS)
template struct ICE_GRID_API StreamWriter< ::IceGrid::AdapterDynamicInfo, ::IceInternal::BasicStream>;
template struct ICE_GRID_API StreamReader< ::IceGrid::AdapterDynamicInfo, ::IceInternal::BasicStream>;
#endif

template<>
struct StreamableTraits< ::IceGrid::NodeDynamicInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::IceGrid::NodeDynamicInfo, S>
{
    static void write(S* __os, const ::IceGrid::NodeDynamicInfo& v)
    {
        __os->write(v.info);
        __os->write(v.servers);
        __os->write(v.adapters);
    }
};

template<class S>
struct StreamReader< ::IceGrid::NodeDynamicInfo, S>
{
    static void read(S* __is, ::IceGrid::NodeDynamicInfo& v)
    {
        __is->read(v.info);
        __is->read(v.servers);
        __is->read(v.adapters);
    }
};

#if defined(ICE_HAS_DECLSPEC_IMPORT_EXPORT) && !defined(ICE_GRID_API_EXPORTS)
template struct ICE_GRID_API StreamWriter< ::IceGrid::NodeDynamicInfo, ::IceInternal::BasicStream>;
template struct ICE_GRID_API StreamReader< ::IceGrid::NodeDynamicInfo, ::IceInternal::BasicStream>;
#endif

}

namespace IceAsync
{

}

namespace IceGrid
{

class Callback_NodeObserver_nodeInit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeObserver_nodeInit_Base> Callback_NodeObserver_nodeInitPtr;

class Callback_NodeObserver_nodeUp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeObserver_nodeUp_Base> Callback_NodeObserver_nodeUpPtr;

class Callback_NodeObserver_nodeDown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeObserver_nodeDown_Base> Callback_NodeObserver_nodeDownPtr;

class Callback_NodeObserver_updateServer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeObserver_updateServer_Base> Callback_NodeObserver_updateServerPtr;

class Callback_NodeObserver_updateAdapter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeObserver_updateAdapter_Base> Callback_NodeObserver_updateAdapterPtr;

class Callback_ApplicationObserver_applicationInit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ApplicationObserver_applicationInit_Base> Callback_ApplicationObserver_applicationInitPtr;

class Callback_ApplicationObserver_applicationAdded_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ApplicationObserver_applicationAdded_Base> Callback_ApplicationObserver_applicationAddedPtr;

class Callback_ApplicationObserver_applicationRemoved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ApplicationObserver_applicationRemoved_Base> Callback_ApplicationObserver_applicationRemovedPtr;

class Callback_ApplicationObserver_applicationUpdated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ApplicationObserver_applicationUpdated_Base> Callback_ApplicationObserver_applicationUpdatedPtr;

class Callback_AdapterObserver_adapterInit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterObserver_adapterInit_Base> Callback_AdapterObserver_adapterInitPtr;

class Callback_AdapterObserver_adapterAdded_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterObserver_adapterAdded_Base> Callback_AdapterObserver_adapterAddedPtr;

class Callback_AdapterObserver_adapterUpdated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterObserver_adapterUpdated_Base> Callback_AdapterObserver_adapterUpdatedPtr;

class Callback_AdapterObserver_adapterRemoved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterObserver_adapterRemoved_Base> Callback_AdapterObserver_adapterRemovedPtr;

class Callback_ObjectObserver_objectInit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ObjectObserver_objectInit_Base> Callback_ObjectObserver_objectInitPtr;

class Callback_ObjectObserver_objectAdded_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ObjectObserver_objectAdded_Base> Callback_ObjectObserver_objectAddedPtr;

class Callback_ObjectObserver_objectUpdated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ObjectObserver_objectUpdated_Base> Callback_ObjectObserver_objectUpdatedPtr;

class Callback_ObjectObserver_objectRemoved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ObjectObserver_objectRemoved_Base> Callback_ObjectObserver_objectRemovedPtr;

class Callback_RegistryObserver_registryInit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RegistryObserver_registryInit_Base> Callback_RegistryObserver_registryInitPtr;

class Callback_RegistryObserver_registryUp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RegistryObserver_registryUp_Base> Callback_RegistryObserver_registryUpPtr;

class Callback_RegistryObserver_registryDown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RegistryObserver_registryDown_Base> Callback_RegistryObserver_registryDownPtr;

}

namespace IceProxy
{

namespace IceGrid
{

class NodeObserver : virtual public ::IceProxy::Ice::Object
{
public:

    void nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes)
    {
        nodeInit(nodes, 0);
    }
    void nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::Ice::Context& __ctx)
    {
        nodeInit(nodes, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_nodeInit(nodes, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_nodeInit(nodes, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_nodeInit(nodes, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_nodeInit(nodes, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes)
    {
        return begin_nodeInit(nodes, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::Ice::Context& __ctx)
    {
        return begin_nodeInit(nodes, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeInit(nodes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeInit(nodes, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::IceGrid::Callback_NodeObserver_nodeInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeInit(nodes, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq& nodes, const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeObserver_nodeInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeInit(nodes, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_nodeInit(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void nodeInit(const ::IceGrid::NodeDynamicInfoSeq&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_nodeInit(const ::IceGrid::NodeDynamicInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void nodeUp(const ::IceGrid::NodeDynamicInfo& node)
    {
        nodeUp(node, 0);
    }
    void nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::Ice::Context& __ctx)
    {
        nodeUp(node, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_nodeUp(node, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_nodeUp(node, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_nodeUp(node, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_nodeUp(node, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node)
    {
        return begin_nodeUp(node, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::Ice::Context& __ctx)
    {
        return begin_nodeUp(node, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeUp(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeUp(node, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::IceGrid::Callback_NodeObserver_nodeUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeUp(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeUp(const ::IceGrid::NodeDynamicInfo& node, const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeObserver_nodeUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeUp(node, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_nodeUp(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void nodeUp(const ::IceGrid::NodeDynamicInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_nodeUp(const ::IceGrid::NodeDynamicInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void nodeDown(const ::std::string& name)
    {
        nodeDown(name, 0);
    }
    void nodeDown(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        nodeDown(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_nodeDown(const ::std::string& name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_nodeDown(name, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_nodeDown(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_nodeDown(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_nodeDown(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_nodeDown(name, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_nodeDown(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_nodeDown(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_nodeDown(const ::std::string& name)
    {
        return begin_nodeDown(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_nodeDown(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_nodeDown(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_nodeDown(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeDown(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeDown(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeDown(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeDown(const ::std::string& name, const ::IceGrid::Callback_NodeObserver_nodeDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeDown(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_nodeDown(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeObserver_nodeDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_nodeDown(name, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_nodeDown(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void nodeDown(const ::std::string&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_nodeDown(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo)
    {
        updateServer(node, updatedInfo, 0);
    }
    void updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::Ice::Context& __ctx)
    {
        updateServer(node, updatedInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateServer(node, updatedInfo, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateServer(node, updatedInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateServer(node, updatedInfo, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateServer(node, updatedInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo)
    {
        return begin_updateServer(node, updatedInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::Ice::Context& __ctx)
    {
        return begin_updateServer(node, updatedInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateServer(node, updatedInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateServer(node, updatedInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::IceGrid::Callback_NodeObserver_updateServerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateServer(node, updatedInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateServer(const ::std::string& node, const ::IceGrid::ServerDynamicInfo& updatedInfo, const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeObserver_updateServerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateServer(node, updatedInfo, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_updateServer(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void updateServer(const ::std::string&, const ::IceGrid::ServerDynamicInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_updateServer(const ::std::string&, const ::IceGrid::ServerDynamicInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo)
    {
        updateAdapter(node, updatedInfo, 0);
    }
    void updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::Ice::Context& __ctx)
    {
        updateAdapter(node, updatedInfo, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateAdapter(node, updatedInfo, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateAdapter(node, updatedInfo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateAdapter(node, updatedInfo, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateAdapter(node, updatedInfo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo)
    {
        return begin_updateAdapter(node, updatedInfo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::Ice::Context& __ctx)
    {
        return begin_updateAdapter(node, updatedInfo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAdapter(node, updatedInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAdapter(node, updatedInfo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::IceGrid::Callback_NodeObserver_updateAdapterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAdapter(node, updatedInfo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateAdapter(const ::std::string& node, const ::IceGrid::AdapterDynamicInfo& updatedInfo, const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeObserver_updateAdapterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateAdapter(node, updatedInfo, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_updateAdapter(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void updateAdapter(const ::std::string&, const ::IceGrid::AdapterDynamicInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_updateAdapter(const ::std::string&, const ::IceGrid::AdapterDynamicInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_secure(bool __secure) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_twoway() const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_oneway() const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_batchOneway() const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_datagram() const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_batchDatagram() const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_compress(bool __compress) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeObserver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NodeObserver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_GRID_API static const ::std::string& ice_staticId();

private: 

    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_GRID_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ApplicationObserver : virtual public ::IceProxy::Ice::Object
{
public:

    void applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications)
    {
        applicationInit(serial, applications, 0);
    }
    void applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::Ice::Context& __ctx)
    {
        applicationInit(serial, applications, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_applicationInit(serial, applications, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_applicationInit(serial, applications, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_applicationInit(serial, applications, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_applicationInit(serial, applications, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications)
    {
        return begin_applicationInit(serial, applications, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::Ice::Context& __ctx)
    {
        return begin_applicationInit(serial, applications, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationInit(serial, applications, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationInit(serial, applications, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::IceGrid::Callback_ApplicationObserver_applicationInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationInit(serial, applications, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationInit(::Ice::Int serial, const ::IceGrid::ApplicationInfoSeq& applications, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ApplicationObserver_applicationInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationInit(serial, applications, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_applicationInit(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void applicationInit(::Ice::Int, const ::IceGrid::ApplicationInfoSeq&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_applicationInit(::Ice::Int, const ::IceGrid::ApplicationInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc)
    {
        applicationAdded(serial, desc, 0);
    }
    void applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::Ice::Context& __ctx)
    {
        applicationAdded(serial, desc, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_applicationAdded(serial, desc, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_applicationAdded(serial, desc, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_applicationAdded(serial, desc, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_applicationAdded(serial, desc, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc)
    {
        return begin_applicationAdded(serial, desc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::Ice::Context& __ctx)
    {
        return begin_applicationAdded(serial, desc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationAdded(serial, desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationAdded(serial, desc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::IceGrid::Callback_ApplicationObserver_applicationAddedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationAdded(serial, desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationAdded(::Ice::Int serial, const ::IceGrid::ApplicationInfo& desc, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ApplicationObserver_applicationAddedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationAdded(serial, desc, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_applicationAdded(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void applicationAdded(::Ice::Int, const ::IceGrid::ApplicationInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_applicationAdded(::Ice::Int, const ::IceGrid::ApplicationInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void applicationRemoved(::Ice::Int serial, const ::std::string& name)
    {
        applicationRemoved(serial, name, 0);
    }
    void applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        applicationRemoved(serial, name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_applicationRemoved(serial, name, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_applicationRemoved(serial, name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_applicationRemoved(serial, name, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_applicationRemoved(serial, name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_applicationRemoved(::Ice::Int serial, const ::std::string& name)
    {
        return begin_applicationRemoved(serial, name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_applicationRemoved(serial, name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationRemoved(serial, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationRemoved(serial, name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::IceGrid::Callback_ApplicationObserver_applicationRemovedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationRemoved(serial, name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationRemoved(::Ice::Int serial, const ::std::string& name, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ApplicationObserver_applicationRemovedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationRemoved(serial, name, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_applicationRemoved(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void applicationRemoved(::Ice::Int, const ::std::string&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_applicationRemoved(::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc)
    {
        applicationUpdated(serial, desc, 0);
    }
    void applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::Ice::Context& __ctx)
    {
        applicationUpdated(serial, desc, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_applicationUpdated(serial, desc, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_applicationUpdated(serial, desc, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_applicationUpdated(serial, desc, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_applicationUpdated(serial, desc, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc)
    {
        return begin_applicationUpdated(serial, desc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::Ice::Context& __ctx)
    {
        return begin_applicationUpdated(serial, desc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationUpdated(serial, desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationUpdated(serial, desc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::IceGrid::Callback_ApplicationObserver_applicationUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationUpdated(serial, desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_applicationUpdated(::Ice::Int serial, const ::IceGrid::ApplicationUpdateInfo& desc, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ApplicationObserver_applicationUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_applicationUpdated(serial, desc, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_applicationUpdated(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void applicationUpdated(::Ice::Int, const ::IceGrid::ApplicationUpdateInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_applicationUpdated(::Ice::Int, const ::IceGrid::ApplicationUpdateInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_secure(bool __secure) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_twoway() const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_oneway() const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_batchOneway() const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_datagram() const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_batchDatagram() const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_compress(bool __compress) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ApplicationObserver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ApplicationObserver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_GRID_API static const ::std::string& ice_staticId();

private: 

    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_GRID_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class AdapterObserver : virtual public ::IceProxy::Ice::Object
{
public:

    void adapterInit(const ::IceGrid::AdapterInfoSeq& adpts)
    {
        adapterInit(adpts, 0);
    }
    void adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::Ice::Context& __ctx)
    {
        adapterInit(adpts, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_adapterInit(adpts, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterInit(adpts, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_adapterInit(adpts, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterInit(adpts, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts)
    {
        return begin_adapterInit(adpts, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::Ice::Context& __ctx)
    {
        return begin_adapterInit(adpts, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterInit(adpts, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterInit(adpts, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::IceGrid::Callback_AdapterObserver_adapterInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterInit(adpts, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterInit(const ::IceGrid::AdapterInfoSeq& adpts, const ::Ice::Context& __ctx, const ::IceGrid::Callback_AdapterObserver_adapterInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterInit(adpts, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_adapterInit(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void adapterInit(const ::IceGrid::AdapterInfoSeq&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_adapterInit(const ::IceGrid::AdapterInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void adapterAdded(const ::IceGrid::AdapterInfo& info)
    {
        adapterAdded(info, 0);
    }
    void adapterAdded(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx)
    {
        adapterAdded(info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_adapterAdded(info, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterAdded(info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_adapterAdded(info, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterAdded(info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_adapterAdded(const ::IceGrid::AdapterInfo& info)
    {
        return begin_adapterAdded(info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx)
    {
        return begin_adapterAdded(info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterAdded(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterAdded(info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::IceGrid::Callback_AdapterObserver_adapterAddedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterAdded(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterAdded(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx, const ::IceGrid::Callback_AdapterObserver_adapterAddedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterAdded(info, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_adapterAdded(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void adapterAdded(const ::IceGrid::AdapterInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_adapterAdded(const ::IceGrid::AdapterInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void adapterUpdated(const ::IceGrid::AdapterInfo& info)
    {
        adapterUpdated(info, 0);
    }
    void adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx)
    {
        adapterUpdated(info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_adapterUpdated(info, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterUpdated(info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_adapterUpdated(info, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterUpdated(info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_adapterUpdated(const ::IceGrid::AdapterInfo& info)
    {
        return begin_adapterUpdated(info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx)
    {
        return begin_adapterUpdated(info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterUpdated(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterUpdated(info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::IceGrid::Callback_AdapterObserver_adapterUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterUpdated(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterUpdated(const ::IceGrid::AdapterInfo& info, const ::Ice::Context& __ctx, const ::IceGrid::Callback_AdapterObserver_adapterUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterUpdated(info, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_adapterUpdated(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void adapterUpdated(const ::IceGrid::AdapterInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_adapterUpdated(const ::IceGrid::AdapterInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void adapterRemoved(const ::std::string& id)
    {
        adapterRemoved(id, 0);
    }
    void adapterRemoved(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        adapterRemoved(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_adapterRemoved(const ::std::string& id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_adapterRemoved(id, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_adapterRemoved(const ::std::string& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterRemoved(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterRemoved(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_adapterRemoved(id, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_adapterRemoved(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_adapterRemoved(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_adapterRemoved(const ::std::string& id)
    {
        return begin_adapterRemoved(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterRemoved(const ::std::string& id, const ::Ice::Context& __ctx)
    {
        return begin_adapterRemoved(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_adapterRemoved(const ::std::string& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterRemoved(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterRemoved(const ::std::string& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterRemoved(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterRemoved(const ::std::string& id, const ::IceGrid::Callback_AdapterObserver_adapterRemovedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterRemoved(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_adapterRemoved(const ::std::string& id, const ::Ice::Context& __ctx, const ::IceGrid::Callback_AdapterObserver_adapterRemovedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_adapterRemoved(id, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_adapterRemoved(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void adapterRemoved(const ::std::string&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_adapterRemoved(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_secure(bool __secure) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_twoway() const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_oneway() const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_batchOneway() const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_datagram() const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_batchDatagram() const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_compress(bool __compress) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AdapterObserver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AdapterObserver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_GRID_API static const ::std::string& ice_staticId();

private: 

    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_GRID_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ObjectObserver : virtual public ::IceProxy::Ice::Object
{
public:

    void objectInit(const ::IceGrid::ObjectInfoSeq& objects)
    {
        objectInit(objects, 0);
    }
    void objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx)
    {
        objectInit(objects, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_objectInit(objects, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_objectInit(objects, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_objectInit(objects, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_objectInit(objects, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects)
    {
        return begin_objectInit(objects, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx)
    {
        return begin_objectInit(objects, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectInit(objects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectInit(objects, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::IceGrid::Callback_ObjectObserver_objectInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectInit(objects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectInit(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ObjectObserver_objectInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectInit(objects, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_objectInit(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void objectInit(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_objectInit(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void objectAdded(const ::IceGrid::ObjectInfo& info)
    {
        objectAdded(info, 0);
    }
    void objectAdded(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx)
    {
        objectAdded(info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_objectAdded(info, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_objectAdded(info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_objectAdded(info, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_objectAdded(info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_objectAdded(const ::IceGrid::ObjectInfo& info)
    {
        return begin_objectAdded(info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx)
    {
        return begin_objectAdded(info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectAdded(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectAdded(info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::IceGrid::Callback_ObjectObserver_objectAddedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectAdded(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectAdded(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ObjectObserver_objectAddedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectAdded(info, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_objectAdded(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void objectAdded(const ::IceGrid::ObjectInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_objectAdded(const ::IceGrid::ObjectInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void objectUpdated(const ::IceGrid::ObjectInfo& info)
    {
        objectUpdated(info, 0);
    }
    void objectUpdated(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx)
    {
        objectUpdated(info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_objectUpdated(info, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_objectUpdated(info, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_objectUpdated(info, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_objectUpdated(info, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_objectUpdated(const ::IceGrid::ObjectInfo& info)
    {
        return begin_objectUpdated(info, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx)
    {
        return begin_objectUpdated(info, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectUpdated(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectUpdated(info, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::IceGrid::Callback_ObjectObserver_objectUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectUpdated(info, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectUpdated(const ::IceGrid::ObjectInfo& info, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ObjectObserver_objectUpdatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectUpdated(info, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_objectUpdated(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void objectUpdated(const ::IceGrid::ObjectInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_objectUpdated(const ::IceGrid::ObjectInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void objectRemoved(const ::Ice::Identity& id)
    {
        objectRemoved(id, 0);
    }
    void objectRemoved(const ::Ice::Identity& id, const ::Ice::Context& __ctx)
    {
        objectRemoved(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_objectRemoved(const ::Ice::Identity& id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_objectRemoved(id, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_objectRemoved(const ::Ice::Identity& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_objectRemoved(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_objectRemoved(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_objectRemoved(id, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_objectRemoved(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_objectRemoved(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_objectRemoved(const ::Ice::Identity& id)
    {
        return begin_objectRemoved(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objectRemoved(const ::Ice::Identity& id, const ::Ice::Context& __ctx)
    {
        return begin_objectRemoved(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_objectRemoved(const ::Ice::Identity& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectRemoved(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectRemoved(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectRemoved(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectRemoved(const ::Ice::Identity& id, const ::IceGrid::Callback_ObjectObserver_objectRemovedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectRemoved(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_objectRemoved(const ::Ice::Identity& id, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ObjectObserver_objectRemovedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_objectRemoved(id, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_objectRemoved(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void objectRemoved(const ::Ice::Identity&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_objectRemoved(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_secure(bool __secure) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_twoway() const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_oneway() const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_batchOneway() const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_datagram() const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_batchDatagram() const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_compress(bool __compress) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ObjectObserver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ObjectObserver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_GRID_API static const ::std::string& ice_staticId();

private: 

    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_GRID_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RegistryObserver : virtual public ::IceProxy::Ice::Object
{
public:

    void registryInit(const ::IceGrid::RegistryInfoSeq& registries)
    {
        registryInit(registries, 0);
    }
    void registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::Ice::Context& __ctx)
    {
        registryInit(registries, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registryInit(registries, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registryInit(registries, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registryInit(registries, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registryInit(registries, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries)
    {
        return begin_registryInit(registries, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::Ice::Context& __ctx)
    {
        return begin_registryInit(registries, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryInit(registries, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryInit(registries, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::IceGrid::Callback_RegistryObserver_registryInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryInit(registries, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryInit(const ::IceGrid::RegistryInfoSeq& registries, const ::Ice::Context& __ctx, const ::IceGrid::Callback_RegistryObserver_registryInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryInit(registries, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_registryInit(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void registryInit(const ::IceGrid::RegistryInfoSeq&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_registryInit(const ::IceGrid::RegistryInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void registryUp(const ::IceGrid::RegistryInfo& node)
    {
        registryUp(node, 0);
    }
    void registryUp(const ::IceGrid::RegistryInfo& node, const ::Ice::Context& __ctx)
    {
        registryUp(node, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registryUp(node, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registryUp(node, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registryUp(node, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registryUp(node, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_registryUp(const ::IceGrid::RegistryInfo& node)
    {
        return begin_registryUp(node, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::Ice::Context& __ctx)
    {
        return begin_registryUp(node, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryUp(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryUp(node, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::IceGrid::Callback_RegistryObserver_registryUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryUp(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryUp(const ::IceGrid::RegistryInfo& node, const ::Ice::Context& __ctx, const ::IceGrid::Callback_RegistryObserver_registryUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryUp(node, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_registryUp(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void registryUp(const ::IceGrid::RegistryInfo&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_registryUp(const ::IceGrid::RegistryInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void registryDown(const ::std::string& name)
    {
        registryDown(name, 0);
    }
    void registryDown(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        registryDown(name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registryDown(const ::std::string& name, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registryDown(name, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_registryDown(const ::std::string& name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registryDown(name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registryDown(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registryDown(name, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registryDown(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registryDown(name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_registryDown(const ::std::string& name)
    {
        return begin_registryDown(name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registryDown(const ::std::string& name, const ::Ice::Context& __ctx)
    {
        return begin_registryDown(name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registryDown(const ::std::string& name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryDown(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryDown(const ::std::string& name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryDown(name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryDown(const ::std::string& name, const ::IceGrid::Callback_RegistryObserver_registryDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryDown(name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registryDown(const ::std::string& name, const ::Ice::Context& __ctx, const ::IceGrid::Callback_RegistryObserver_registryDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registryDown(name, &__ctx, __del, __cookie);
    }

    ICE_GRID_API void end_registryDown(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_GRID_API void registryDown(const ::std::string&, const ::Ice::Context*);
    ICE_GRID_API ::Ice::AsyncResultPtr begin_registryDown(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_secure(bool __secure) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_twoway() const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_oneway() const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_batchOneway() const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_datagram() const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_batchDatagram() const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_compress(bool __compress) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RegistryObserver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RegistryObserver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_GRID_API static const ::std::string& ice_staticId();

private: 

    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_GRID_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_GRID_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace IceGrid
{

class ICE_GRID_API NodeObserver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void nodeInit(const ::IceGrid::NodeDynamicInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void nodeUp(const ::IceGrid::NodeDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void nodeDown(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateServer(const ::std::string&, const ::IceGrid::ServerDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateAdapter(const ::std::string&, const ::IceGrid::AdapterDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ICE_GRID_API ApplicationObserver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void applicationInit(::Ice::Int, const ::IceGrid::ApplicationInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void applicationAdded(::Ice::Int, const ::IceGrid::ApplicationInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void applicationRemoved(::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void applicationUpdated(::Ice::Int, const ::IceGrid::ApplicationUpdateInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ICE_GRID_API AdapterObserver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void adapterInit(const ::IceGrid::AdapterInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void adapterAdded(const ::IceGrid::AdapterInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void adapterUpdated(const ::IceGrid::AdapterInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void adapterRemoved(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ICE_GRID_API ObjectObserver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void objectInit(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void objectAdded(const ::IceGrid::ObjectInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void objectUpdated(const ::IceGrid::ObjectInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void objectRemoved(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ICE_GRID_API RegistryObserver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void registryInit(const ::IceGrid::RegistryInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void registryUp(const ::IceGrid::RegistryInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void registryDown(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace IceGrid
{

class ICE_GRID_API NodeObserver : virtual public ::IceDelegate::IceGrid::NodeObserver,
                                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void nodeInit(const ::IceGrid::NodeDynamicInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void nodeUp(const ::IceGrid::NodeDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void nodeDown(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateServer(const ::std::string&, const ::IceGrid::ServerDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateAdapter(const ::std::string&, const ::IceGrid::AdapterDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_GRID_API ApplicationObserver : virtual public ::IceDelegate::IceGrid::ApplicationObserver,
                                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void applicationInit(::Ice::Int, const ::IceGrid::ApplicationInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void applicationAdded(::Ice::Int, const ::IceGrid::ApplicationInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void applicationRemoved(::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void applicationUpdated(::Ice::Int, const ::IceGrid::ApplicationUpdateInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_GRID_API AdapterObserver : virtual public ::IceDelegate::IceGrid::AdapterObserver,
                                     virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void adapterInit(const ::IceGrid::AdapterInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void adapterAdded(const ::IceGrid::AdapterInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void adapterUpdated(const ::IceGrid::AdapterInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void adapterRemoved(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_GRID_API ObjectObserver : virtual public ::IceDelegate::IceGrid::ObjectObserver,
                                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void objectInit(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void objectAdded(const ::IceGrid::ObjectInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void objectUpdated(const ::IceGrid::ObjectInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void objectRemoved(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_GRID_API RegistryObserver : virtual public ::IceDelegate::IceGrid::RegistryObserver,
                                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void registryInit(const ::IceGrid::RegistryInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registryUp(const ::IceGrid::RegistryInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registryDown(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace IceGrid
{

class ICE_GRID_API NodeObserver : virtual public ::IceDelegate::IceGrid::NodeObserver,
                                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void nodeInit(const ::IceGrid::NodeDynamicInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void nodeUp(const ::IceGrid::NodeDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void nodeDown(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateServer(const ::std::string&, const ::IceGrid::ServerDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateAdapter(const ::std::string&, const ::IceGrid::AdapterDynamicInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_GRID_API ApplicationObserver : virtual public ::IceDelegate::IceGrid::ApplicationObserver,
                                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void applicationInit(::Ice::Int, const ::IceGrid::ApplicationInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void applicationAdded(::Ice::Int, const ::IceGrid::ApplicationInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void applicationRemoved(::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void applicationUpdated(::Ice::Int, const ::IceGrid::ApplicationUpdateInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_GRID_API AdapterObserver : virtual public ::IceDelegate::IceGrid::AdapterObserver,
                                     virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void adapterInit(const ::IceGrid::AdapterInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void adapterAdded(const ::IceGrid::AdapterInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void adapterUpdated(const ::IceGrid::AdapterInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void adapterRemoved(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_GRID_API ObjectObserver : virtual public ::IceDelegate::IceGrid::ObjectObserver,
                                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void objectInit(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void objectAdded(const ::IceGrid::ObjectInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void objectUpdated(const ::IceGrid::ObjectInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void objectRemoved(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_GRID_API RegistryObserver : virtual public ::IceDelegate::IceGrid::RegistryObserver,
                                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void registryInit(const ::IceGrid::RegistryInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registryUp(const ::IceGrid::RegistryInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registryDown(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceGrid
{

class ICE_GRID_API NodeObserver : virtual public ::Ice::Object
{
public:

    typedef NodeObserverPrx ProxyType;
    typedef NodeObserverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void nodeInit(const ::IceGrid::NodeDynamicInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___nodeInit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void nodeUp(const ::IceGrid::NodeDynamicInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___nodeUp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void nodeDown(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___nodeDown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateServer(const ::std::string&, const ::IceGrid::ServerDynamicInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateServer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateAdapter(const ::std::string&, const ::IceGrid::AdapterDynamicInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateAdapter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const NodeObserver& l, const NodeObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NodeObserver& l, const NodeObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ICE_GRID_API ApplicationObserver : virtual public ::Ice::Object
{
public:

    typedef ApplicationObserverPrx ProxyType;
    typedef ApplicationObserverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void applicationInit(::Ice::Int, const ::IceGrid::ApplicationInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___applicationInit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void applicationAdded(::Ice::Int, const ::IceGrid::ApplicationInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___applicationAdded(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void applicationRemoved(::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___applicationRemoved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void applicationUpdated(::Ice::Int, const ::IceGrid::ApplicationUpdateInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___applicationUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ApplicationObserver& l, const ApplicationObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ApplicationObserver& l, const ApplicationObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ICE_GRID_API AdapterObserver : virtual public ::Ice::Object
{
public:

    typedef AdapterObserverPrx ProxyType;
    typedef AdapterObserverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void adapterInit(const ::IceGrid::AdapterInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___adapterInit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void adapterAdded(const ::IceGrid::AdapterInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___adapterAdded(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void adapterUpdated(const ::IceGrid::AdapterInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___adapterUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void adapterRemoved(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___adapterRemoved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const AdapterObserver& l, const AdapterObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AdapterObserver& l, const AdapterObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ICE_GRID_API ObjectObserver : virtual public ::Ice::Object
{
public:

    typedef ObjectObserverPrx ProxyType;
    typedef ObjectObserverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void objectInit(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___objectInit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void objectAdded(const ::IceGrid::ObjectInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___objectAdded(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void objectUpdated(const ::IceGrid::ObjectInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___objectUpdated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void objectRemoved(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___objectRemoved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ObjectObserver& l, const ObjectObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ObjectObserver& l, const ObjectObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ICE_GRID_API RegistryObserver : virtual public ::Ice::Object
{
public:

    typedef RegistryObserverPrx ProxyType;
    typedef RegistryObserverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void registryInit(const ::IceGrid::RegistryInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registryInit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void registryUp(const ::IceGrid::RegistryInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registryUp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void registryDown(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registryDown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const RegistryObserver& l, const RegistryObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RegistryObserver& l, const RegistryObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace IceGrid
{

template<class T>
class CallbackNC_NodeObserver_nodeInit : public Callback_NodeObserver_nodeInit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeObserver_nodeInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeObserver_nodeInitPtr
newCallback_NodeObserver_nodeInit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeInitPtr
newCallback_NodeObserver_nodeInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeInit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeInitPtr
newCallback_NodeObserver_nodeInit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeInitPtr
newCallback_NodeObserver_nodeInit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeInit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeObserver_nodeInit : public Callback_NodeObserver_nodeInit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeObserver_nodeInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeObserver_nodeInitPtr
newCallback_NodeObserver_nodeInit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeInitPtr
newCallback_NodeObserver_nodeInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeInitPtr
newCallback_NodeObserver_nodeInit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeInitPtr
newCallback_NodeObserver_nodeInit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeObserver_nodeUp : public Callback_NodeObserver_nodeUp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeObserver_nodeUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeObserver_nodeUpPtr
newCallback_NodeObserver_nodeUp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeUpPtr
newCallback_NodeObserver_nodeUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeUp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeUpPtr
newCallback_NodeObserver_nodeUp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeUpPtr
newCallback_NodeObserver_nodeUp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeUp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeObserver_nodeUp : public Callback_NodeObserver_nodeUp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeObserver_nodeUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeObserver_nodeUpPtr
newCallback_NodeObserver_nodeUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeUpPtr
newCallback_NodeObserver_nodeUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeUpPtr
newCallback_NodeObserver_nodeUp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeUpPtr
newCallback_NodeObserver_nodeUp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeObserver_nodeDown : public Callback_NodeObserver_nodeDown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeObserver_nodeDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeObserver_nodeDownPtr
newCallback_NodeObserver_nodeDown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeDownPtr
newCallback_NodeObserver_nodeDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeDown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeDownPtr
newCallback_NodeObserver_nodeDown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_nodeDownPtr
newCallback_NodeObserver_nodeDown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_nodeDown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeObserver_nodeDown : public Callback_NodeObserver_nodeDown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeObserver_nodeDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeObserver_nodeDownPtr
newCallback_NodeObserver_nodeDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeDownPtr
newCallback_NodeObserver_nodeDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeDownPtr
newCallback_NodeObserver_nodeDown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_nodeDownPtr
newCallback_NodeObserver_nodeDown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_nodeDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeObserver_updateServer : public Callback_NodeObserver_updateServer_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeObserver_updateServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeObserver_updateServerPtr
newCallback_NodeObserver_updateServer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_updateServer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_updateServerPtr
newCallback_NodeObserver_updateServer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_updateServer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeObserver_updateServerPtr
newCallback_NodeObserver_updateServer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_updateServer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_updateServerPtr
newCallback_NodeObserver_updateServer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_updateServer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeObserver_updateServer : public Callback_NodeObserver_updateServer_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeObserver_updateServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeObserver_updateServerPtr
newCallback_NodeObserver_updateServer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_updateServer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_updateServerPtr
newCallback_NodeObserver_updateServer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_updateServer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_updateServerPtr
newCallback_NodeObserver_updateServer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_updateServer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_updateServerPtr
newCallback_NodeObserver_updateServer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_updateServer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeObserver_updateAdapter : public Callback_NodeObserver_updateAdapter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeObserver_updateAdapter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeObserver_updateAdapterPtr
newCallback_NodeObserver_updateAdapter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_updateAdapter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_updateAdapterPtr
newCallback_NodeObserver_updateAdapter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_updateAdapter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeObserver_updateAdapterPtr
newCallback_NodeObserver_updateAdapter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_updateAdapter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeObserver_updateAdapterPtr
newCallback_NodeObserver_updateAdapter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeObserver_updateAdapter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeObserver_updateAdapter : public Callback_NodeObserver_updateAdapter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeObserver_updateAdapter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeObserver_updateAdapterPtr
newCallback_NodeObserver_updateAdapter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_updateAdapter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_updateAdapterPtr
newCallback_NodeObserver_updateAdapter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_updateAdapter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_updateAdapterPtr
newCallback_NodeObserver_updateAdapter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_updateAdapter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeObserver_updateAdapterPtr
newCallback_NodeObserver_updateAdapter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeObserver_updateAdapter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ApplicationObserver_applicationInit : public Callback_ApplicationObserver_applicationInit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ApplicationObserver_applicationInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ApplicationObserver_applicationInitPtr
newCallback_ApplicationObserver_applicationInit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationInitPtr
newCallback_ApplicationObserver_applicationInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationInit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationInitPtr
newCallback_ApplicationObserver_applicationInit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationInitPtr
newCallback_ApplicationObserver_applicationInit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationInit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ApplicationObserver_applicationInit : public Callback_ApplicationObserver_applicationInit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ApplicationObserver_applicationInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ApplicationObserver_applicationInitPtr
newCallback_ApplicationObserver_applicationInit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationInitPtr
newCallback_ApplicationObserver_applicationInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationInitPtr
newCallback_ApplicationObserver_applicationInit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationInitPtr
newCallback_ApplicationObserver_applicationInit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ApplicationObserver_applicationAdded : public Callback_ApplicationObserver_applicationAdded_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ApplicationObserver_applicationAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ApplicationObserver_applicationAddedPtr
newCallback_ApplicationObserver_applicationAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationAddedPtr
newCallback_ApplicationObserver_applicationAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationAdded<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationAddedPtr
newCallback_ApplicationObserver_applicationAdded(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationAddedPtr
newCallback_ApplicationObserver_applicationAdded(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationAdded<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ApplicationObserver_applicationAdded : public Callback_ApplicationObserver_applicationAdded_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ApplicationObserver_applicationAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ApplicationObserver_applicationAddedPtr
newCallback_ApplicationObserver_applicationAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationAddedPtr
newCallback_ApplicationObserver_applicationAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationAddedPtr
newCallback_ApplicationObserver_applicationAdded(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationAddedPtr
newCallback_ApplicationObserver_applicationAdded(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ApplicationObserver_applicationRemoved : public Callback_ApplicationObserver_applicationRemoved_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ApplicationObserver_applicationRemoved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ApplicationObserver_applicationRemovedPtr
newCallback_ApplicationObserver_applicationRemoved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationRemoved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationRemovedPtr
newCallback_ApplicationObserver_applicationRemoved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationRemoved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationRemovedPtr
newCallback_ApplicationObserver_applicationRemoved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationRemoved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationRemovedPtr
newCallback_ApplicationObserver_applicationRemoved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationRemoved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ApplicationObserver_applicationRemoved : public Callback_ApplicationObserver_applicationRemoved_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ApplicationObserver_applicationRemoved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ApplicationObserver_applicationRemovedPtr
newCallback_ApplicationObserver_applicationRemoved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationRemoved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationRemovedPtr
newCallback_ApplicationObserver_applicationRemoved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationRemoved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationRemovedPtr
newCallback_ApplicationObserver_applicationRemoved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationRemoved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationRemovedPtr
newCallback_ApplicationObserver_applicationRemoved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationRemoved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ApplicationObserver_applicationUpdated : public Callback_ApplicationObserver_applicationUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ApplicationObserver_applicationUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ApplicationObserver_applicationUpdatedPtr
newCallback_ApplicationObserver_applicationUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationUpdatedPtr
newCallback_ApplicationObserver_applicationUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationUpdatedPtr
newCallback_ApplicationObserver_applicationUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ApplicationObserver_applicationUpdatedPtr
newCallback_ApplicationObserver_applicationUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ApplicationObserver_applicationUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ApplicationObserver_applicationUpdated : public Callback_ApplicationObserver_applicationUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ApplicationObserver_applicationUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ApplicationObserver_applicationUpdatedPtr
newCallback_ApplicationObserver_applicationUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationUpdatedPtr
newCallback_ApplicationObserver_applicationUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationUpdatedPtr
newCallback_ApplicationObserver_applicationUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ApplicationObserver_applicationUpdatedPtr
newCallback_ApplicationObserver_applicationUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ApplicationObserver_applicationUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterObserver_adapterInit : public Callback_AdapterObserver_adapterInit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AdapterObserver_adapterInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AdapterObserver_adapterInitPtr
newCallback_AdapterObserver_adapterInit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterInitPtr
newCallback_AdapterObserver_adapterInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterInit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterInitPtr
newCallback_AdapterObserver_adapterInit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterInitPtr
newCallback_AdapterObserver_adapterInit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterInit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterObserver_adapterInit : public Callback_AdapterObserver_adapterInit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AdapterObserver_adapterInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AdapterObserver_adapterInitPtr
newCallback_AdapterObserver_adapterInit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterInitPtr
newCallback_AdapterObserver_adapterInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterInitPtr
newCallback_AdapterObserver_adapterInit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterInitPtr
newCallback_AdapterObserver_adapterInit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterObserver_adapterAdded : public Callback_AdapterObserver_adapterAdded_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AdapterObserver_adapterAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AdapterObserver_adapterAddedPtr
newCallback_AdapterObserver_adapterAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterAddedPtr
newCallback_AdapterObserver_adapterAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterAdded<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterAddedPtr
newCallback_AdapterObserver_adapterAdded(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterAddedPtr
newCallback_AdapterObserver_adapterAdded(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterAdded<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterObserver_adapterAdded : public Callback_AdapterObserver_adapterAdded_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AdapterObserver_adapterAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AdapterObserver_adapterAddedPtr
newCallback_AdapterObserver_adapterAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterAddedPtr
newCallback_AdapterObserver_adapterAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterAddedPtr
newCallback_AdapterObserver_adapterAdded(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterAddedPtr
newCallback_AdapterObserver_adapterAdded(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterObserver_adapterUpdated : public Callback_AdapterObserver_adapterUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AdapterObserver_adapterUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AdapterObserver_adapterUpdatedPtr
newCallback_AdapterObserver_adapterUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterUpdatedPtr
newCallback_AdapterObserver_adapterUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterUpdatedPtr
newCallback_AdapterObserver_adapterUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterUpdatedPtr
newCallback_AdapterObserver_adapterUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterObserver_adapterUpdated : public Callback_AdapterObserver_adapterUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AdapterObserver_adapterUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AdapterObserver_adapterUpdatedPtr
newCallback_AdapterObserver_adapterUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterUpdatedPtr
newCallback_AdapterObserver_adapterUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterUpdatedPtr
newCallback_AdapterObserver_adapterUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterUpdatedPtr
newCallback_AdapterObserver_adapterUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterObserver_adapterRemoved : public Callback_AdapterObserver_adapterRemoved_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AdapterObserver_adapterRemoved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AdapterObserver_adapterRemovedPtr
newCallback_AdapterObserver_adapterRemoved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterRemoved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterRemovedPtr
newCallback_AdapterObserver_adapterRemoved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterRemoved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterRemovedPtr
newCallback_AdapterObserver_adapterRemoved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterRemoved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterObserver_adapterRemovedPtr
newCallback_AdapterObserver_adapterRemoved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterObserver_adapterRemoved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterObserver_adapterRemoved : public Callback_AdapterObserver_adapterRemoved_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AdapterObserver_adapterRemoved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AdapterObserver_adapterRemovedPtr
newCallback_AdapterObserver_adapterRemoved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterRemoved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterRemovedPtr
newCallback_AdapterObserver_adapterRemoved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterRemoved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterRemovedPtr
newCallback_AdapterObserver_adapterRemoved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterRemoved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterObserver_adapterRemovedPtr
newCallback_AdapterObserver_adapterRemoved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterObserver_adapterRemoved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ObjectObserver_objectInit : public Callback_ObjectObserver_objectInit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ObjectObserver_objectInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ObjectObserver_objectInitPtr
newCallback_ObjectObserver_objectInit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectInitPtr
newCallback_ObjectObserver_objectInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectInit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectInitPtr
newCallback_ObjectObserver_objectInit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectInitPtr
newCallback_ObjectObserver_objectInit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectInit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ObjectObserver_objectInit : public Callback_ObjectObserver_objectInit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ObjectObserver_objectInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ObjectObserver_objectInitPtr
newCallback_ObjectObserver_objectInit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectInitPtr
newCallback_ObjectObserver_objectInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectInitPtr
newCallback_ObjectObserver_objectInit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectInitPtr
newCallback_ObjectObserver_objectInit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ObjectObserver_objectAdded : public Callback_ObjectObserver_objectAdded_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ObjectObserver_objectAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ObjectObserver_objectAddedPtr
newCallback_ObjectObserver_objectAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectAddedPtr
newCallback_ObjectObserver_objectAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectAdded<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectAddedPtr
newCallback_ObjectObserver_objectAdded(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectAddedPtr
newCallback_ObjectObserver_objectAdded(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectAdded<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ObjectObserver_objectAdded : public Callback_ObjectObserver_objectAdded_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ObjectObserver_objectAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ObjectObserver_objectAddedPtr
newCallback_ObjectObserver_objectAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectAddedPtr
newCallback_ObjectObserver_objectAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectAddedPtr
newCallback_ObjectObserver_objectAdded(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectAddedPtr
newCallback_ObjectObserver_objectAdded(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ObjectObserver_objectUpdated : public Callback_ObjectObserver_objectUpdated_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ObjectObserver_objectUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ObjectObserver_objectUpdatedPtr
newCallback_ObjectObserver_objectUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectUpdatedPtr
newCallback_ObjectObserver_objectUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectUpdated<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectUpdatedPtr
newCallback_ObjectObserver_objectUpdated(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectUpdated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectUpdatedPtr
newCallback_ObjectObserver_objectUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectUpdated<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ObjectObserver_objectUpdated : public Callback_ObjectObserver_objectUpdated_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ObjectObserver_objectUpdated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ObjectObserver_objectUpdatedPtr
newCallback_ObjectObserver_objectUpdated(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectUpdatedPtr
newCallback_ObjectObserver_objectUpdated(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectUpdatedPtr
newCallback_ObjectObserver_objectUpdated(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectUpdated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectUpdatedPtr
newCallback_ObjectObserver_objectUpdated(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectUpdated<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ObjectObserver_objectRemoved : public Callback_ObjectObserver_objectRemoved_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ObjectObserver_objectRemoved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ObjectObserver_objectRemovedPtr
newCallback_ObjectObserver_objectRemoved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectRemoved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectRemovedPtr
newCallback_ObjectObserver_objectRemoved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectRemoved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectRemovedPtr
newCallback_ObjectObserver_objectRemoved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectRemoved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ObjectObserver_objectRemovedPtr
newCallback_ObjectObserver_objectRemoved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ObjectObserver_objectRemoved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ObjectObserver_objectRemoved : public Callback_ObjectObserver_objectRemoved_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ObjectObserver_objectRemoved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ObjectObserver_objectRemovedPtr
newCallback_ObjectObserver_objectRemoved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectRemoved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectRemovedPtr
newCallback_ObjectObserver_objectRemoved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectRemoved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectRemovedPtr
newCallback_ObjectObserver_objectRemoved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectRemoved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ObjectObserver_objectRemovedPtr
newCallback_ObjectObserver_objectRemoved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ObjectObserver_objectRemoved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RegistryObserver_registryInit : public Callback_RegistryObserver_registryInit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RegistryObserver_registryInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RegistryObserver_registryInitPtr
newCallback_RegistryObserver_registryInit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryInitPtr
newCallback_RegistryObserver_registryInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryInit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryInitPtr
newCallback_RegistryObserver_registryInit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryInitPtr
newCallback_RegistryObserver_registryInit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryInit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RegistryObserver_registryInit : public Callback_RegistryObserver_registryInit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RegistryObserver_registryInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RegistryObserver_registryInitPtr
newCallback_RegistryObserver_registryInit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryInitPtr
newCallback_RegistryObserver_registryInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryInitPtr
newCallback_RegistryObserver_registryInit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryInitPtr
newCallback_RegistryObserver_registryInit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RegistryObserver_registryUp : public Callback_RegistryObserver_registryUp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RegistryObserver_registryUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RegistryObserver_registryUpPtr
newCallback_RegistryObserver_registryUp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryUpPtr
newCallback_RegistryObserver_registryUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryUp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryUpPtr
newCallback_RegistryObserver_registryUp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryUpPtr
newCallback_RegistryObserver_registryUp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryUp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RegistryObserver_registryUp : public Callback_RegistryObserver_registryUp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RegistryObserver_registryUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RegistryObserver_registryUpPtr
newCallback_RegistryObserver_registryUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryUpPtr
newCallback_RegistryObserver_registryUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryUpPtr
newCallback_RegistryObserver_registryUp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryUpPtr
newCallback_RegistryObserver_registryUp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RegistryObserver_registryDown : public Callback_RegistryObserver_registryDown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RegistryObserver_registryDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RegistryObserver_registryDownPtr
newCallback_RegistryObserver_registryDown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryDownPtr
newCallback_RegistryObserver_registryDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryDown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryDownPtr
newCallback_RegistryObserver_registryDown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RegistryObserver_registryDownPtr
newCallback_RegistryObserver_registryDown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RegistryObserver_registryDown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RegistryObserver_registryDown : public Callback_RegistryObserver_registryDown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RegistryObserver_registryDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RegistryObserver_registryDownPtr
newCallback_RegistryObserver_registryDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryDownPtr
newCallback_RegistryObserver_registryDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryDownPtr
newCallback_RegistryObserver_registryDown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RegistryObserver_registryDownPtr
newCallback_RegistryObserver_registryDown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RegistryObserver_registryDown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
